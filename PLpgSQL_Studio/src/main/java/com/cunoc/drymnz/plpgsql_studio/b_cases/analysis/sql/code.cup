package com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.sql;

import java_cup.runtime.*;
import java.util.ArrayList;

import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ReportErrorInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.Token;
import com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.InterpretSyntaticError;



/**
     * ***STAR CODE*******
     */
    parser code {:

private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private LexemaSQL lexema;

	  public ParserSQL(LexemaSQL Lexema) {
        super(Lexema);
        this.lexema = Lexema;
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
        System.out.println(this.listError.get(0).toString());
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /**
     * ***END CODE*******
     */
:}

/* Terminales */
terminal IDENTIFICADOR,NUMEBERS,CHARS;

// DDL (Data Definition Language) - Definici칩n de Datos
terminal CONSTRAINT, REFERENCES, FOREIGN, PRIMARY;
terminal CREATE, SCHEMA, TABLE, ALTER, COLUMN;
terminal DROP, KEY, ADD, USE,MODIFY;

// Tipos de datos
terminal VARCHAR, INTEGER, BOOLEAN, INT;

// DML (Data Manipulation Language) - Manipulaci칩n de Datos
terminal LEFT, JOIN, SELECT, INSERT, UPDATE;
terminal DELETE, VALUES, WHERE, FROM, INTO, SET;

// DCL (Data Control Language) - Control de Datos
terminal REVOKE, GRANT, USER;
terminal TO, ON;

// Restricciones y modificadores
terminal NOT, NULL,DEFAULT;

// PL/pgSQL - Declaraciones y Control
terminal DECLARE;

// Operadores l칩gicos
terminal AND, OR;
terminal PERIOD_AND_AS, OPEN_P, CLOSE_P,COMMA;
//tomar
terminal OUT_HARVESTING,START_HARVESTING;
/* No terminales */
//inicio
non terminal inicio,finalizacion_punto_y_coma;
non terminal varias_etiquetas_usar,etiqueta_inicial;
//SQLTestDDL
non terminal use_ddl;
non terminal atributos_tabla,type_attribute,type_privacy,various_attributes;
non terminal attribute_null;
non terminal accion_update,accion_fk,set_fk;
non terminal space_use_alter,accion_alter,type_optional_alter;
///SQLTestDML
non terminal use_dml;
/* Gram치tica */
start with inicio;
/**********************************************INICIO DE LA GRAMATICA******************************/
inicio ::= varias_etiquetas_usar
    |error varias_etiquetas_usar
    |/*epsilon*/
    ;
/**********************************************GRAMATICA DE ESTRUCTURA DE SQL******************************/

varias_etiquetas_usar::=
varias_etiquetas_usar etiqueta_inicial
| etiqueta_inicial
;

/**********************************************INICIO DE DDL,DML,DCL******************************/
etiqueta_inicial ::= use_ddl finalizacion_punto_y_coma
    |use_dml finalizacion_punto_y_coma
    ; 

finalizacion_punto_y_coma ::= PERIOD_AND_AS
    | error
    ;
/************************************************ SQL DDL **************************************************/
use_ddl ::= CREATE SCHEMA IDENTIFICADOR
    |CREATE TABLE IDENTIFICADOR OPEN_P various_attributes CLOSE_P
    |USE SCHEMA IDENTIFICADOR
    |FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P accion_update
    |ALTER TABLE IDENTIFICADOR accion_alter space_use_alter IDENTIFICADOR type_optional_alter
    |DROP TABLE IDENTIFICADOR
    ;
// ATRIBUTO DE LA TABLA
various_attributes ::= various_attributes COMMA atributos_tabla
    |atributos_tabla 
    ; 

atributos_tabla ::= IDENTIFICADOR type_attribute type_privacy
    |FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P
    ;

accion_update ::= /*epsilon*/
    | ON UPDATE accion_fk
    | ON DELETE accion_fk
    ;

accion_fk ::= SET 
    ;

set_fk ::= DEFAULT
    |NULL
    ;

type_privacy ::= PRIMARY KEY attribute_null
    |attribute_null
    |NULL
    ;

attribute_null ::=    NOT NULL 
    |error
    | /*epsilon*/
    ;

type_attribute ::= INTEGER
    | BOOLEAN
    | INT
    | VARCHAR OPEN_P NUMEBERS CLOSE_P
    ;

// ATRIBUTO DE LA TABLA

/* alter_use::= 
    //| CHECK 
    //| UNIQUE 
    ; */

// FORMA ALTER
type_optional_alter ::= /*epsilon*/
    |type_attribute
    |FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P accion_update 
    ;

accion_alter ::= ADD
    |DROP
    |MODIFY
    ;

space_use_alter ::= CONSTRAINT
    |COLUMN
    ;

/************************************************ SQL DML **************************************************/
use_dml ::= INSERT INTO IDENTIFICADOR OPEN_P  CLOSE_P VALUES OPEN_P CLOSE_P ;

attribute_insert::= CHARS
    |NUMEBERS
    |IDENTIFICADOR
    |
    |error
    ;