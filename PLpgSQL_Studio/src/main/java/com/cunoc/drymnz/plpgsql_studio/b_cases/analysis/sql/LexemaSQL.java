// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: code.jflex

package com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.sql;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.io.StringReader;

import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ReportErrorInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.Token;


@SuppressWarnings("fallthrough")
public class LexemaSQL implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int DATA_COLLECTION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\3\1\22\0\1\1\1\3\4\0"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\12\16\1\0\1\17\1\20\1\21\1\22"+
    "\2\0\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\43\1\54\1\0\1\55\1\0\1\43"+
    "\1\0\32\56\1\0\1\1\10\0\1\1\32\0\1\1"+
    "\u01df\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1"+
    "\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\26\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\0\1\27\3\0\1\30\1\31\1\32\20\21\1\33"+
    "\1\34\7\21\1\35\1\36\7\21\1\37\6\21\1\2"+
    "\1\0\1\40\1\41\1\21\1\42\12\21\1\43\2\21"+
    "\1\44\3\21\1\45\1\21\1\46\3\21\1\47\7\21"+
    "\1\50\4\21\1\51\11\21\1\52\4\21\1\53\1\54"+
    "\3\21\1\55\3\21\1\56\1\57\1\60\1\61\2\21"+
    "\1\62\7\21\1\63\1\64\1\21\1\65\4\21\1\66"+
    "\11\21\1\67\1\21\1\70\5\21\1\71\4\21\1\72"+
    "\4\21\1\73\1\21\1\74\1\21\1\75\3\21\1\76"+
    "\2\21\1\77\1\21\1\100\1\101\2\21\1\102\1\103"+
    "\1\104\1\105\1\106\2\21\1\107\1\21\1\110\1\111"+
    "\1\112\1\21\1\113\1\114\1\115\1\21\1\116\1\117"+
    "\4\21\1\120\1\21\1\121\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\215\0\274\0\353\0\57"+
    "\0\57\0\57\0\57\0\57\0\u011a\0\57\0\u0149\0\u0178"+
    "\0\57\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439"+
    "\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1"+
    "\0\u05e0\0\u060f\0\57\0\57\0\u037d\0\57\0\57\0\353"+
    "\0\57\0\u063e\0\u066d\0\u069c\0\57\0\57\0\57\0\u06cb"+
    "\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843"+
    "\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u037d"+
    "\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04"+
    "\0\u037d\0\u037d\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e"+
    "\0\u0c4d\0\u037d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67"+
    "\0\57\0\u0d96\0\u069c\0\u037d\0\u0dc5\0\u037d\0\u0df4\0\u0e23"+
    "\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b"+
    "\0\u037d\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4"+
    "\0\u1113\0\u037d\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d"+
    "\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u037d\0\u1347\0\u1376"+
    "\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee"+
    "\0\u151d\0\u154c\0\u157b\0\u15aa\0\u037d\0\u15d9\0\u1608\0\u1637"+
    "\0\u1666\0\u037d\0\u037d\0\u1695\0\u16c4\0\u16f3\0\u037d\0\u1722"+
    "\0\u1751\0\u1780\0\u037d\0\u037d\0\u037d\0\u037d\0\u17af\0\u17de"+
    "\0\u037d\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927"+
    "\0\u037d\0\u037d\0\u1956\0\u037d\0\u1985\0\u19b4\0\u19e3\0\u1a12"+
    "\0\u037d\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b"+
    "\0\u1b8a\0\u1bb9\0\u037d\0\u1be8\0\u037d\0\u1c17\0\u1c46\0\u1c75"+
    "\0\u1ca4\0\u1cd3\0\u037d\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u037d"+
    "\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u037d\0\u1e7a\0\u037d\0\u1ea9"+
    "\0\u037d\0\u1ed8\0\u1f07\0\u1f36\0\u037d\0\u1f65\0\u1f94\0\u037d"+
    "\0\u1fc3\0\u037d\0\u037d\0\u1ff2\0\u2021\0\u037d\0\u037d\0\u037d"+
    "\0\u037d\0\u037d\0\u2050\0\u207f\0\u037d\0\u20ae\0\u037d\0\u037d"+
    "\0\u037d\0\u20dd\0\u037d\0\u037d\0\u037d\0\u210c\0\u037d\0\u037d"+
    "\0\u213b\0\u216a\0\u2199\0\u21c8\0\u037d\0\u21f7\0\u037d\0\u037d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\34\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\2\34\1\53\1\54\1\55\60\0\2\4\75\0"+
    "\1\56\41\0\1\57\52\0\5\60\1\61\51\60\13\0"+
    "\1\62\53\0\1\63\62\0\1\64\1\0\1\20\4\0"+
    "\31\34\2\0\1\34\21\0\1\65\56\0\1\66\56\0"+
    "\1\67\53\0\1\34\4\0\3\34\1\70\7\34\1\71"+
    "\1\34\1\72\13\34\2\0\1\34\16\0\1\34\4\0"+
    "\16\34\1\73\12\34\2\0\1\34\16\0\1\34\4\0"+
    "\16\34\1\74\2\34\1\75\7\34\2\0\1\34\16\0"+
    "\1\34\4\0\1\76\3\34\1\77\14\34\1\100\7\34"+
    "\2\0\1\34\16\0\1\34\4\0\13\34\1\101\1\34"+
    "\1\102\11\34\1\103\1\34\2\0\1\34\16\0\1\34"+
    "\4\0\1\104\15\34\1\105\2\34\1\106\7\34\2\0"+
    "\1\34\16\0\1\34\4\0\21\34\1\107\7\34\2\0"+
    "\1\34\16\0\1\34\4\0\31\34\2\0\1\34\16\0"+
    "\1\34\4\0\5\34\1\110\7\34\1\111\13\34\2\0"+
    "\1\34\16\0\1\34\4\0\16\34\1\112\12\34\2\0"+
    "\1\34\16\0\1\34\4\0\4\34\1\113\24\34\2\0"+
    "\1\34\16\0\1\34\4\0\4\34\1\114\11\34\1\115"+
    "\12\34\2\0\1\34\16\0\1\34\4\0\16\34\1\116"+
    "\12\34\2\0\1\34\16\0\1\34\4\0\16\34\1\117"+
    "\5\34\1\120\4\34\2\0\1\34\16\0\1\34\4\0"+
    "\15\34\1\121\3\34\1\122\7\34\2\0\1\34\16\0"+
    "\1\34\4\0\21\34\1\123\7\34\2\0\1\34\16\0"+
    "\1\34\4\0\1\124\3\34\1\125\24\34\2\0\1\34"+
    "\16\0\1\34\4\0\2\34\1\126\1\34\1\127\24\34"+
    "\2\0\1\34\16\0\1\34\4\0\1\130\6\34\1\131"+
    "\6\34\1\132\2\34\1\133\7\34\2\0\1\34\16\0"+
    "\1\34\4\0\17\34\1\134\2\34\1\135\6\34\2\0"+
    "\1\34\16\0\1\34\4\0\1\136\30\34\2\0\1\34"+
    "\16\0\1\34\4\0\1\137\6\34\1\140\21\34\2\0"+
    "\1\34\2\62\1\141\54\62\10\63\1\142\46\63\16\0"+
    "\1\143\56\0\1\34\4\0\3\34\1\144\25\34\2\0"+
    "\1\34\16\0\1\34\4\0\23\34\1\145\5\34\2\0"+
    "\1\34\16\0\1\34\4\0\3\34\1\146\25\34\2\0"+
    "\1\34\16\0\1\34\4\0\16\34\1\147\12\34\2\0"+
    "\1\34\16\0\1\34\4\0\13\34\1\150\1\34\1\151"+
    "\13\34\2\0\1\34\16\0\1\34\4\0\4\34\1\152"+
    "\24\34\2\0\1\34\16\0\1\34\4\0\23\34\1\153"+
    "\5\34\2\0\1\34\16\0\1\34\4\0\2\34\1\154"+
    "\2\34\1\155\5\34\1\156\15\34\2\0\1\34\16\0"+
    "\1\34\4\0\16\34\1\157\12\34\2\0\1\34\16\0"+
    "\1\34\4\0\22\34\1\160\6\34\2\0\1\34\16\0"+
    "\1\34\4\0\3\34\1\161\25\34\2\0\1\34\16\0"+
    "\1\34\4\0\2\34\1\162\26\34\2\0\1\34\16\0"+
    "\1\34\4\0\13\34\1\163\15\34\2\0\1\34\16\0"+
    "\1\34\4\0\21\34\1\164\7\34\2\0\1\34\16\0"+
    "\1\34\4\0\16\34\1\165\12\34\2\0\1\34\16\0"+
    "\1\34\4\0\1\166\30\34\2\0\1\34\16\0\1\34"+
    "\4\0\22\34\1\167\1\170\5\34\2\0\1\34\16\0"+
    "\1\34\4\0\10\34\1\171\20\34\2\0\1\34\16\0"+
    "\1\34\4\0\30\34\1\172\2\0\1\34\16\0\1\34"+
    "\4\0\5\34\1\173\23\34\2\0\1\34\16\0\1\34"+
    "\4\0\16\34\1\174\12\34\2\0\1\34\16\0\1\34"+
    "\4\0\3\34\1\175\25\34\2\0\1\34\16\0\1\34"+
    "\4\0\23\34\1\176\5\34\2\0\1\34\16\0\1\34"+
    "\4\0\13\34\1\177\15\34\2\0\1\34\16\0\1\34"+
    "\4\0\10\34\1\200\20\34\2\0\1\34\16\0\1\34"+
    "\4\0\10\34\1\201\20\34\2\0\1\34\16\0\1\34"+
    "\4\0\5\34\1\202\17\34\1\203\3\34\2\0\1\34"+
    "\16\0\1\34\4\0\7\34\1\204\21\34\2\0\1\34"+
    "\16\0\1\34\4\0\13\34\1\205\7\34\1\206\5\34"+
    "\2\0\1\34\16\0\1\34\4\0\1\34\1\207\27\34"+
    "\2\0\1\34\16\0\1\34\4\0\4\34\1\210\24\34"+
    "\2\0\1\34\16\0\1\34\4\0\24\34\1\211\4\34"+
    "\2\0\1\34\16\0\1\34\4\0\3\34\1\212\25\34"+
    "\2\0\1\34\16\0\1\34\4\0\4\34\1\213\24\34"+
    "\2\0\1\34\16\0\1\34\4\0\13\34\1\214\5\34"+
    "\1\215\7\34\2\0\1\34\16\0\1\34\4\0\21\34"+
    "\1\216\7\34\2\0\1\34\16\0\1\34\4\0\4\34"+
    "\1\217\24\34\2\0\1\34\10\63\1\142\4\63\1\141"+
    "\41\63\16\0\1\34\4\0\4\34\1\220\24\34\2\0"+
    "\1\34\16\0\1\34\4\0\13\34\1\221\15\34\2\0"+
    "\1\34\16\0\1\34\4\0\24\34\1\222\4\34\2\0"+
    "\1\34\16\0\1\34\4\0\22\34\1\223\6\34\2\0"+
    "\1\34\16\0\1\34\4\0\1\224\30\34\2\0\1\34"+
    "\16\0\1\34\4\0\4\34\1\225\24\34\2\0\1\34"+
    "\16\0\1\34\4\0\10\34\1\226\2\34\1\227\15\34"+
    "\2\0\1\34\16\0\1\34\4\0\1\230\30\34\2\0"+
    "\1\34\16\0\1\34\4\0\4\34\1\231\24\34\2\0"+
    "\1\34\16\0\1\34\4\0\17\34\1\232\11\34\2\0"+
    "\1\34\16\0\1\34\4\0\4\34\1\233\24\34\2\0"+
    "\1\34\16\0\1\34\4\0\4\34\1\234\24\34\2\0"+
    "\1\34\16\0\1\34\4\0\22\34\1\235\6\34\2\0"+
    "\1\34\16\0\1\34\4\0\4\34\1\236\24\34\2\0"+
    "\1\34\16\0\1\34\4\0\14\34\1\237\14\34\2\0"+
    "\1\34\16\0\1\34\4\0\15\34\1\240\13\34\2\0"+
    "\1\34\16\0\1\34\4\0\4\34\1\241\24\34\2\0"+
    "\1\34\16\0\1\34\4\0\4\34\1\242\11\34\1\243"+
    "\12\34\2\0\1\34\16\0\1\34\4\0\15\34\1\244"+
    "\13\34\2\0\1\34\16\0\1\34\4\0\23\34\1\245"+
    "\5\34\2\0\1\34\16\0\1\34\4\0\17\34\1\246"+
    "\11\34\2\0\1\34\16\0\1\34\4\0\10\34\1\247"+
    "\20\34\2\0\1\34\16\0\1\34\4\0\10\34\1\250"+
    "\20\34\2\0\1\34\16\0\1\34\4\0\13\34\1\251"+
    "\15\34\2\0\1\34\16\0\1\34\4\0\14\34\1\252"+
    "\14\34\2\0\1\34\16\0\1\34\4\0\22\34\1\253"+
    "\6\34\2\0\1\34\16\0\1\34\4\0\4\34\1\254"+
    "\24\34\2\0\1\34\16\0\1\34\4\0\16\34\1\255"+
    "\12\34\2\0\1\34\16\0\1\34\4\0\4\34\1\256"+
    "\24\34\2\0\1\34\16\0\1\34\4\0\4\34\1\257"+
    "\24\34\2\0\1\34\16\0\1\34\4\0\13\34\1\260"+
    "\15\34\2\0\1\34\16\0\1\34\4\0\15\34\1\261"+
    "\13\34\2\0\1\34\16\0\1\34\4\0\4\34\1\262"+
    "\24\34\2\0\1\34\16\0\1\34\4\0\1\263\30\34"+
    "\2\0\1\34\16\0\1\34\4\0\21\34\1\264\7\34"+
    "\2\0\1\34\16\0\1\34\4\0\24\34\1\265\4\34"+
    "\2\0\1\34\16\0\1\34\4\0\2\34\1\266\26\34"+
    "\2\0\1\34\16\0\1\34\4\0\15\34\1\267\13\34"+
    "\2\0\1\34\16\0\1\34\4\0\21\34\1\270\7\34"+
    "\2\0\1\34\16\0\1\34\4\0\21\34\1\271\7\34"+
    "\2\0\1\34\16\0\1\34\4\0\4\34\1\272\24\34"+
    "\2\0\1\34\16\0\1\34\4\0\14\34\1\273\14\34"+
    "\2\0\1\34\16\0\1\34\4\0\23\34\1\274\5\34"+
    "\2\0\1\34\16\0\1\34\4\0\23\34\1\275\5\34"+
    "\2\0\1\34\16\0\1\34\4\0\14\34\1\276\14\34"+
    "\2\0\1\34\16\0\1\34\4\0\1\277\30\34\2\0"+
    "\1\34\16\0\1\34\4\0\24\34\1\300\4\34\2\0"+
    "\1\34\16\0\1\34\4\0\23\34\1\301\5\34\2\0"+
    "\1\34\16\0\1\34\4\0\17\34\1\302\11\34\2\0"+
    "\1\34\16\0\1\34\4\0\4\34\1\303\24\34\2\0"+
    "\1\34\16\0\1\34\4\0\10\34\1\304\20\34\2\0"+
    "\1\34\16\0\1\34\4\0\23\34\1\305\5\34\2\0"+
    "\1\34\16\0\1\34\4\0\21\34\1\306\7\34\2\0"+
    "\1\34\16\0\1\34\4\0\6\34\1\307\22\34\2\0"+
    "\1\34\16\0\1\34\4\0\5\34\1\310\23\34\2\0"+
    "\1\34\16\0\1\34\4\0\2\34\1\311\26\34\2\0"+
    "\1\34\16\0\1\34\4\0\1\312\30\34\2\0\1\34"+
    "\16\0\1\34\4\0\4\34\1\313\24\34\2\0\1\34"+
    "\16\0\1\34\4\0\21\34\1\314\7\34\2\0\1\34"+
    "\16\0\1\34\4\0\12\34\1\315\16\34\2\0\1\34"+
    "\16\0\1\34\4\0\14\34\1\316\14\34\2\0\1\34"+
    "\16\0\1\34\4\0\2\34\1\317\26\34\2\0\1\34"+
    "\16\0\1\34\4\0\4\34\1\320\24\34\2\0\1\34"+
    "\16\0\1\34\4\0\23\34\1\321\5\34\2\0\1\34"+
    "\16\0\1\34\4\0\4\34\1\322\24\34\2\0\1\34"+
    "\16\0\1\34\4\0\7\34\1\323\21\34\2\0\1\34"+
    "\16\0\1\34\4\0\10\34\1\324\20\34\2\0\1\34"+
    "\16\0\1\34\4\0\4\34\1\325\24\34\2\0\1\34"+
    "\16\0\1\34\4\0\1\326\30\34\2\0\1\34\16\0"+
    "\1\34\4\0\15\34\1\327\13\34\2\0\1\34\16\0"+
    "\1\34\4\0\21\34\1\330\7\34\2\0\1\34\16\0"+
    "\1\34\4\0\4\34\1\331\24\34\2\0\1\34\16\0"+
    "\1\34\4\0\1\332\30\34\2\0\1\34\16\0\1\34"+
    "\4\0\21\34\1\333\7\34\2\0\1\34\16\0\1\34"+
    "\4\0\13\34\1\334\15\34\2\0\1\34\16\0\1\34"+
    "\4\0\4\34\1\335\24\34\2\0\1\34\16\0\1\34"+
    "\4\0\23\34\1\336\5\34\2\0\1\34\16\0\1\34"+
    "\4\0\6\34\1\337\22\34\2\0\1\34\16\0\1\34"+
    "\4\0\23\34\1\340\5\34\2\0\1\34\16\0\1\34"+
    "\4\0\4\34\1\341\24\34\2\0\1\34\16\0\1\34"+
    "\4\0\30\34\1\342\2\0\1\34\16\0\1\34\4\0"+
    "\4\34\1\343\24\34\2\0\1\34\16\0\1\34\4\0"+
    "\21\34\1\344\7\34\2\0\1\34\16\0\1\34\4\0"+
    "\4\34\1\345\24\34\2\0\1\34\16\0\1\34\4\0"+
    "\4\34\1\346\24\34\2\0\1\34\16\0\1\34\4\0"+
    "\1\347\30\34\2\0\1\34\16\0\1\34\4\0\23\34"+
    "\1\350\5\34\2\0\1\34\16\0\1\34\4\0\4\34"+
    "\1\351\24\34\2\0\1\34\16\0\1\34\4\0\22\34"+
    "\1\352\6\34\2\0\1\34\16\0\1\34\4\0\1\353"+
    "\30\34\2\0\1\34\16\0\1\34\4\0\15\34\1\354"+
    "\13\34\2\0\1\34\16\0\1\34\4\0\15\34\1\355"+
    "\13\34\2\0\1\34\16\0\1\34\4\0\1\356\30\34"+
    "\2\0\1\34\16\0\1\34\4\0\13\34\1\357\15\34"+
    "\2\0\1\34\16\0\1\34\4\0\4\34\1\360\24\34"+
    "\2\0\1\34\16\0\1\34\4\0\23\34\1\361\5\34"+
    "\2\0\1\34\16\0\1\34\4\0\10\34\1\362\20\34"+
    "\2\0\1\34\16\0\1\34\4\0\15\34\1\363\13\34"+
    "\2\0\1\34\16\0\1\34\4\0\21\34\1\364\7\34"+
    "\2\0\1\34\16\0\1\34\4\0\30\34\1\365\2\0"+
    "\1\34\16\0\1\34\4\0\15\34\1\366\13\34\2\0"+
    "\1\34\16\0\1\34\4\0\21\34\1\367\7\34\2\0"+
    "\1\34\16\0\1\34\4\0\6\34\1\370\22\34\2\0"+
    "\1\34\16\0\1\34\4\0\10\34\1\371\20\34\2\0"+
    "\1\34\16\0\1\34\4\0\16\34\1\372\12\34\2\0"+
    "\1\34\16\0\1\34\4\0\2\34\1\373\26\34\2\0"+
    "\1\34\16\0\1\34\4\0\15\34\1\374\13\34\2\0"+
    "\1\34\16\0\1\34\4\0\15\34\1\375\13\34\2\0"+
    "\1\34\16\0\1\34\4\0\4\34\1\376\24\34\2\0"+
    "\1\34\16\0\1\34\4\0\23\34\1\377\5\34\2\0"+
    "\1\34\16\0\1\34\4\0\22\34\1\u0100\6\34\2\0"+
    "\1\34";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8742];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\4\1\5\11\1\1\1\11\2\1"+
    "\1\11\31\1\2\11\1\1\2\11\1\0\1\11\3\0"+
    "\3\11\51\1\1\11\1\0\236\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*START-CODE*/

    private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
    private String dataCollected = "";

    public LexemaSQL(String in) {
        this.zzReader = new StringReader(in);
    }
      
    private void print(String token) {
       System.out.println(token+ " < " + yytext() + " > <Linea\"" + (yyline + 1) + "\">" + "<Columna\"" + (yycolumn+1) + "\">");
    }

    private void addError(){
        print("error");
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.LEXICON;
        Token toke = new Token(yyline + 1, yycolumn + 1, yytext());
        this.listError.add(new ReportErrorInterpreter(type, toke, ""));
    }

    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }
    
    public String getDataCollected(){
        return this.dataCollected;
    }

    public void setDataCollected(String newdataCollected){
        this.dataCollected = newdataCollected;
    }

    /*FINAL-CODE*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexemaSQL(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new java_cup.runtime.Symbol(SymSQL.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //MANEJAR EL ERROR LEXICO
                        print("ERROR");
                        addError();
            }
          // fall through
          case 83: break;
          case 2:
            { 
            }
          // fall through
          case 84: break;
          case 3:
            { print("!"   ); return new Symbol(SymSQL.NOT_O ,yyline,yycolumn,yytext());
            }
          // fall through
          case 85: break;
          case 4:
            { print("(");         return new Symbol(SymSQL.OPEN_P       , yyline, yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 5:
            { print(")");         return new Symbol(SymSQL.CLOSE_P      , yyline, yycolumn, yytext());
            }
          // fall through
          case 87: break;
          case 6:
            { print("*");         return new Symbol(SymSQL.ASTERISK     , yyline, yycolumn, yytext());
            }
          // fall through
          case 88: break;
          case 7:
            { print("+"); return new Symbol(SymSQL.ADDITION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 89: break;
          case 8:
            { print(",");         return new Symbol(SymSQL.COMMA        , yyline, yycolumn, yytext());
            }
          // fall through
          case 90: break;
          case 9:
            { print("-"); return new Symbol(SymSQL.SUBTRACTION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 91: break;
          case 10:
            { print(".");         return new Symbol(SymSQL.POINT        , yyline, yycolumn, yytext());
            }
          // fall through
          case 92: break;
          case 11:
            { print("/"); return new Symbol(SymSQL.DIVISION ,yyline,yycolumn,yytext());
            }
          // fall through
          case 93: break;
          case 12:
            { print("REAL_NUMEBERS"); return new Symbol(SymSQL.WHOLE     , yyline, yycolumn, yytext());
            }
          // fall through
          case 94: break;
          case 13:
            { print(";");         return new Symbol(SymSQL.PERIOD_AND_AS, yyline, yycolumn, yytext());
            }
          // fall through
          case 95: break;
          case 14:
            { print("<"   ); return new Symbol(SymSQL.LESS_THAN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 96: break;
          case 15:
            { print("=");         return new Symbol(SymSQL.EQUAL        , yyline, yycolumn, yytext());
            }
          // fall through
          case 97: break;
          case 16:
            { print(">"   ); return new Symbol(SymSQL.GREATER_THAN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 98: break;
          case 17:
            { print("IDENTIFICADOR"); return new Symbol(SymSQL.IDENTIFICADOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 99: break;
          case 18:
            { print("[");         return new Symbol(SymSQL.BRACKETS_OPEN ,yyline,yycolumn,yytext());
            }
          // fall through
          case 100: break;
          case 19:
            { print("]");         return new Symbol(SymSQL.BRACKETS_CLOSE ,yyline,yycolumn,yytext());
            }
          // fall through
          case 101: break;
          case 20:
            { print("ALIAS");          return new Symbol(SymSQL.ALIAS        , yyline, yycolumn, yytext());
            }
          // fall through
          case 102: break;
          case 21:
            { print("!="  ); return new Symbol(SymSQL.NOT_THE_SAME ,yyline,yycolumn,yytext());
            }
          // fall through
          case 103: break;
          case 22:
            { print("&&"  ); return new Symbol(SymSQL.AND ,yyline,yycolumn,yytext());
            }
          // fall through
          case 104: break;
          case 23:
            { print("CHARS");         return new Symbol(SymSQL.CHARS         , yyline, yycolumn, yytext());
            }
          // fall through
          case 105: break;
          case 24:
            { print("<="  ); return new Symbol(SymSQL.LESS_THAN_EQUAL ,yyline,yycolumn,yytext());
            }
          // fall through
          case 106: break;
          case 25:
            { print("=="  ); return new Symbol(SymSQL.SAME_AS_O ,yyline,yycolumn,yytext());
            }
          // fall through
          case 107: break;
          case 26:
            { print(">="  ); return new Symbol(SymSQL.GREATER_THAN_EQUAL ,yyline,yycolumn,yytext());
            }
          // fall through
          case 108: break;
          case 27:
            { print("IF");          return new Symbol(SymSQL.IF   , yyline, yycolumn, yytext());
            }
          // fall through
          case 109: break;
          case 28:
            { print("IN");           return new Symbol(SymSQL.IN   , yyline, yycolumn, yytext());
            }
          // fall through
          case 110: break;
          case 29:
            { print("ON");         return new Symbol(SymSQL.ON        , yyline, yycolumn, yytext());
            }
          // fall through
          case 111: break;
          case 30:
            { print("OR");         return new Symbol(SymSQL.OR        , yyline, yycolumn, yytext());
            }
          // fall through
          case 112: break;
          case 31:
            { print("TO");         return new Symbol(SymSQL.TO        , yyline, yycolumn, yytext());
            }
          // fall through
          case 113: break;
          case 32:
            { print("REAL_NUMEBERS"); return new Symbol(SymSQL.DECIMAL_V     , yyline, yycolumn, yytext());
            }
          // fall through
          case 114: break;
          case 33:
            { print("ADD");        return new Symbol(SymSQL.ADD       , yyline, yycolumn, yytext());
            }
          // fall through
          case 115: break;
          case 34:
            { print("AND");        return new Symbol(SymSQL.AND       , yyline, yycolumn, yytext());
            }
          // fall through
          case 116: break;
          case 35:
            { print("END");          return new Symbol(SymSQL.END   , yyline, yycolumn, yytext());
            }
          // fall through
          case 117: break;
          case 36:
            { print("FOR");          return new Symbol(SymSQL.FOR   , yyline, yycolumn, yytext());
            }
          // fall through
          case 118: break;
          case 37:
            { print("INT");        return new Symbol(SymSQL.INT       , yyline, yycolumn, yytext());
            }
          // fall through
          case 119: break;
          case 38:
            { print("KEY");        return new Symbol(SymSQL.KEY       , yyline, yycolumn, yytext());
            }
          // fall through
          case 120: break;
          case 39:
            { print("NOT");        return new Symbol(SymSQL.NOT       , yyline, yycolumn, yytext());
            }
          // fall through
          case 121: break;
          case 40:
            { print("SET");        return new Symbol(SymSQL.SET       , yyline, yycolumn, yytext());
            }
          // fall through
          case 122: break;
          case 41:
            { print("USE");        return new Symbol(SymSQL.USE       , yyline, yycolumn, yytext());
            }
          // fall through
          case 123: break;
          case 42:
            { print("DATE");       return new Symbol(SymSQL.DATE      , yyline, yycolumn, yytext());
            }
          // fall through
          case 124: break;
          case 43:
            { print("DROP");       return new Symbol(SymSQL.DROP      , yyline, yycolumn, yytext());
            }
          // fall through
          case 125: break;
          case 44:
            { print("ELSE");        return new Symbol(SymSQL.ELSE   , yyline, yycolumn, yytext());
            }
          // fall through
          case 126: break;
          case 45:
            { print("FROM");       return new Symbol(SymSQL.FROM      , yyline, yycolumn, yytext());
            }
          // fall through
          case 127: break;
          case 46:
            { print("INTO");       return new Symbol(SymSQL.INTO      , yyline, yycolumn, yytext());
            }
          // fall through
          case 128: break;
          case 47:
            { print("JOIN");       return new Symbol(SymSQL.JOIN      , yyline, yycolumn, yytext());
            }
          // fall through
          case 129: break;
          case 48:
            { print("LEFT");       return new Symbol(SymSQL.LEFT      , yyline, yycolumn, yytext());
            }
          // fall through
          case 130: break;
          case 49:
            { print("LOOP");         return new Symbol(SymSQL.LOOP   , yyline, yycolumn, yytext());
            }
          // fall through
          case 131: break;
          case 50:
            { print("NULL");       return new Symbol(SymSQL.NULL      , yyline, yycolumn, yytext());
            }
          // fall through
          case 132: break;
          case 51:
            { print("THEN");        return new Symbol(SymSQL.THEN   , yyline, yycolumn, yytext());
            }
          // fall through
          case 133: break;
          case 52:
            { print("TRUE");       return new Symbol(SymSQL.TRUE        , yyline, yycolumn, yytext());
            }
          // fall through
          case 134: break;
          case 53:
            { print("USER");       return new Symbol(SymSQL.USER      , yyline, yycolumn, yytext());
            }
          // fall through
          case 135: break;
          case 54:
            { print("ALTER");      return new Symbol(SymSQL.ALTER     , yyline, yycolumn, yytext());
            }
          // fall through
          case 136: break;
          case 55:
            { print("FALSE");      return new Symbol(SymSQL.FALSE        , yyline, yycolumn, yytext());
            }
          // fall through
          case 137: break;
          case 56:
            { print("GRANT");      return new Symbol(SymSQL.GRANT     , yyline, yycolumn, yytext());
            }
          // fall through
          case 138: break;
          case 57:
            { print("RAISE");       return new Symbol(SymSQL.RAISE        , yyline, yycolumn, yytext());
            }
          // fall through
          case 139: break;
          case 58:
            { print("TABLE");      return new Symbol(SymSQL.TABLE     , yyline, yycolumn, yytext());
            }
          // fall through
          case 140: break;
          case 59:
            { print("WHERE");      return new Symbol(SymSQL.WHERE     , yyline, yycolumn, yytext());
            }
          // fall through
          case 141: break;
          case 60:
            { print("COLUMN");     return new Symbol(SymSQL.COLUMN    , yyline, yycolumn, yytext());
            }
          // fall through
          case 142: break;
          case 61:
            { print("CREATE");     return new Symbol(SymSQL.CREATE    , yyline, yycolumn, yytext());
            }
          // fall through
          case 143: break;
          case 62:
            { print("DELETE");     return new Symbol(SymSQL.DELETE    , yyline, yycolumn, yytext());
            }
          // fall through
          case 144: break;
          case 63:
            { print("INSERT");     return new Symbol(SymSQL.INSERT    , yyline, yycolumn, yytext());
            }
          // fall through
          case 145: break;
          case 64:
            { print("MODIFY");      return new Symbol(SymSQL.MODIFY    , yyline, yycolumn, yytext());
            }
          // fall through
          case 146: break;
          case 65:
            { print("NOTICE");      return new Symbol(SymSQL.NOTICE        , yyline, yycolumn, yytext());
            }
          // fall through
          case 147: break;
          case 66:
            { print("REVOKE");     return new Symbol(SymSQL.REVOKE    , yyline, yycolumn, yytext());
            }
          // fall through
          case 148: break;
          case 67:
            { print("SCHEMA");     return new Symbol(SymSQL.SCHEMA    , yyline, yycolumn, yytext());
            }
          // fall through
          case 149: break;
          case 68:
            { print("SELECT");     return new Symbol(SymSQL.SELECT    , yyline, yycolumn, yytext());
            }
          // fall through
          case 150: break;
          case 69:
            { print("UPDATE");     return new Symbol(SymSQL.UPDATE    , yyline, yycolumn, yytext());
            }
          // fall through
          case 151: break;
          case 70:
            { print("VALUES");     return new Symbol(SymSQL.VALUES    , yyline, yycolumn, yytext());
            }
          // fall through
          case 152: break;
          case 71:
            { print("BOOLEAN");    return new Symbol(SymSQL.BOOLEAN   , yyline, yycolumn, yytext());
            }
          // fall through
          case 153: break;
          case 72:
            { print("DECIMAL");    return new Symbol(SymSQL.DECIMAL   , yyline, yycolumn, yytext());
            }
          // fall through
          case 154: break;
          case 73:
            { print("DECLARE");      return new Symbol(SymSQL.DECLARE   , yyline, yycolumn, yytext());
            }
          // fall through
          case 155: break;
          case 74:
            { print("DEFAULT");    return new Symbol(SymSQL.DEFAULT   , yyline, yycolumn, yytext());
            }
          // fall through
          case 156: break;
          case 75:
            { print("FOREIGN");    return new Symbol(SymSQL.FOREIGN   , yyline, yycolumn, yytext());
            }
          // fall through
          case 157: break;
          case 76:
            { print("INTEGER");    return new Symbol(SymSQL.INTEGER   , yyline, yycolumn, yytext());
            }
          // fall through
          case 158: break;
          case 77:
            { print("PRIMARY");    return new Symbol(SymSQL.PRIMARY   , yyline, yycolumn, yytext());
            }
          // fall through
          case 159: break;
          case 78:
            { print("VARCHAR");    return new Symbol(SymSQL.VARCHAR   , yyline, yycolumn, yytext());
            }
          // fall through
          case 160: break;
          case 79:
            { print("WARNING");     return new Symbol(SymSQL.WARNING        , yyline, yycolumn, yytext());
            }
          // fall through
          case 161: break;
          case 80:
            { print("EXCEPTION");   return new Symbol(SymSQL.EXCEPTION        , yyline, yycolumn, yytext());
            }
          // fall through
          case 162: break;
          case 81:
            { print("CONSTRAINT"); return new Symbol(SymSQL.CONSTRAINT, yyline, yycolumn, yytext());
            }
          // fall through
          case 163: break;
          case 82:
            { print("REFERENCES"); return new Symbol(SymSQL.REFERENCES, yyline, yycolumn, yytext());
            }
          // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
