// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: code.jflex

package com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.sql;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.io.StringReader;

import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ReportErrorInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.Token;


@SuppressWarnings("fallthrough")
public class LexemaSQL implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int DATA_COLLECTION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\3\1\22\0\1\1\6\0\1\3"+
    "\1\4\1\5\1\6\1\0\1\7\1\10\1\11\1\12"+
    "\12\13\1\0\1\14\1\15\1\16\1\17\2\0\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\40\1\47"+
    "\1\40\4\0\1\50\1\0\32\51\1\52\1\1\1\53"+
    "\7\0\1\1\32\0\1\1\u01df\0\1\1\177\0\13\1"+
    "\35\0\2\1\5\0\1\1\57\0\1\1\240\0\1\1"+
    "\u01ff\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\1\1\7\1\1\1\10\1\11\1\12\25\13\1\14"+
    "\1\1\2\15\1\0\1\16\3\0\24\13\1\17\1\20"+
    "\5\13\1\21\5\13\2\0\1\2\1\0\1\10\1\22"+
    "\1\13\1\23\16\13\1\24\1\13\1\25\2\13\1\26"+
    "\6\13\1\27\3\13\1\30\3\13\2\0\5\13\1\31"+
    "\4\13\1\32\2\13\1\33\3\13\1\34\1\35\1\36"+
    "\1\13\1\37\6\13\1\40\1\13\1\41\3\13\2\0"+
    "\1\42\10\13\1\43\1\13\1\44\10\13\1\45\3\13"+
    "\1\46\1\47\1\50\1\13\1\51\1\13\1\52\3\13"+
    "\1\53\1\13\1\54\1\13\1\55\2\13\1\56\1\57"+
    "\1\60\1\61\1\62\1\13\1\63\1\13\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\13\1\72\4\13\1\73"+
    "\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\130\0\130\0\130"+
    "\0\130\0\334\0\130\0\u0108\0\u0134\0\130\0\130\0\u0160"+
    "\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294\0\u02c0"+
    "\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0420"+
    "\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u0210\0\u04fc\0\130\0\u0528"+
    "\0\260\0\130\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630"+
    "\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790"+
    "\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0"+
    "\0\u091c\0\u0210\0\u0210\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8"+
    "\0\u0210\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c"+
    "\0\130\0\u0b58\0\u05ac\0\u0210\0\u0b84\0\u0210\0\u0bb0\0\u0bdc"+
    "\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c"+
    "\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0210\0\u0e70"+
    "\0\u0e9c\0\u0210\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4"+
    "\0\u0210\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080\0\u10ac\0\u10d8"+
    "\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u0210"+
    "\0\u1238\0\u1264\0\u1290\0\u12bc\0\u0210\0\u12e8\0\u1314\0\u0210"+
    "\0\u1340\0\u136c\0\u1398\0\u0210\0\u0210\0\u0210\0\u13c4\0\u0210"+
    "\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u0210\0\u14f8"+
    "\0\u0210\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u0210\0\u1600"+
    "\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u0210"+
    "\0\u1760\0\u0210\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868"+
    "\0\u1894\0\u18c0\0\u0210\0\u18ec\0\u1918\0\u1944\0\u0210\0\130"+
    "\0\130\0\u1970\0\u0210\0\u199c\0\u0210\0\u19c8\0\u19f4\0\u1a20"+
    "\0\u0210\0\u1a4c\0\u0210\0\u1a78\0\u0210\0\u1aa4\0\u1ad0\0\u0210"+
    "\0\u0210\0\u0210\0\u0210\0\u0210\0\u1afc\0\u0210\0\u1b28\0\u0210"+
    "\0\u0210\0\u0210\0\u0210\0\u0210\0\u0210\0\u1b54\0\u0210\0\u1b80"+
    "\0\u1bac\0\u1bd8\0\u1c04\0\u0210\0\u0210";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\3\1\17\1\3\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\24\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\24"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\2\24\1\45"+
    "\1\46\1\3\15\47\1\50\36\47\55\0\2\4\51\0"+
    "\3\51\1\52\50\51\10\0\1\53\51\0\1\54\56\0"+
    "\1\55\1\0\1\15\4\0\32\24\15\0\1\24\4\0"+
    "\3\24\1\56\7\24\1\57\1\24\1\60\14\24\15\0"+
    "\1\24\4\0\16\24\1\61\13\24\15\0\1\24\4\0"+
    "\16\24\1\62\2\24\1\63\10\24\15\0\1\24\4\0"+
    "\1\64\3\24\1\65\14\24\1\66\10\24\15\0\1\24"+
    "\4\0\32\24\15\0\1\24\4\0\1\67\15\24\1\70"+
    "\2\24\1\71\10\24\15\0\1\24\4\0\21\24\1\72"+
    "\10\24\15\0\1\24\4\0\15\24\1\73\14\24\15\0"+
    "\1\24\4\0\16\24\1\74\13\24\15\0\1\24\4\0"+
    "\4\24\1\75\25\24\15\0\1\24\4\0\4\24\1\76"+
    "\25\24\15\0\1\24\4\0\16\24\1\77\13\24\15\0"+
    "\1\24\4\0\16\24\1\100\5\24\1\101\5\24\15\0"+
    "\1\24\4\0\15\24\1\102\3\24\1\103\10\24\15\0"+
    "\1\24\4\0\21\24\1\104\10\24\15\0\1\24\4\0"+
    "\4\24\1\105\25\24\15\0\1\24\4\0\2\24\1\106"+
    "\1\24\1\107\25\24\15\0\1\24\4\0\1\110\15\24"+
    "\1\111\2\24\1\112\10\24\15\0\1\24\4\0\17\24"+
    "\1\113\2\24\1\114\7\24\15\0\1\24\4\0\1\115"+
    "\31\24\15\0\1\24\4\0\7\24\1\116\22\24\52\0"+
    "\1\117\21\0\1\120\35\0\2\53\1\121\51\53\6\54"+
    "\1\122\45\54\13\0\1\123\53\0\1\24\4\0\3\24"+
    "\1\124\26\24\15\0\1\24\4\0\23\24\1\125\6\24"+
    "\15\0\1\24\4\0\3\24\1\126\26\24\15\0\1\24"+
    "\4\0\16\24\1\127\13\24\15\0\1\24\4\0\13\24"+
    "\1\130\1\24\1\131\14\24\15\0\1\24\4\0\4\24"+
    "\1\132\25\24\15\0\1\24\4\0\23\24\1\133\6\24"+
    "\15\0\1\24\4\0\2\24\1\134\2\24\1\135\5\24"+
    "\1\136\16\24\15\0\1\24\4\0\16\24\1\137\13\24"+
    "\15\0\1\24\4\0\13\24\1\140\16\24\15\0\1\24"+
    "\4\0\21\24\1\141\10\24\15\0\1\24\4\0\16\24"+
    "\1\142\13\24\15\0\1\24\4\0\1\143\31\24\15\0"+
    "\1\24\4\0\22\24\1\144\1\145\6\24\15\0\1\24"+
    "\4\0\10\24\1\146\21\24\15\0\1\24\4\0\27\24"+
    "\1\147\2\24\15\0\1\24\4\0\5\24\1\150\24\24"+
    "\15\0\1\24\4\0\3\24\1\151\26\24\15\0\1\24"+
    "\4\0\23\24\1\152\6\24\15\0\1\24\4\0\13\24"+
    "\1\153\16\24\15\0\1\24\4\0\10\24\1\154\21\24"+
    "\15\0\1\24\4\0\5\24\1\155\17\24\1\156\4\24"+
    "\15\0\1\24\4\0\7\24\1\157\22\24\15\0\1\24"+
    "\4\0\13\24\1\160\7\24\1\161\6\24\15\0\1\24"+
    "\4\0\1\24\1\162\30\24\15\0\1\24\4\0\24\24"+
    "\1\163\5\24\15\0\1\24\4\0\3\24\1\164\26\24"+
    "\15\0\1\24\4\0\4\24\1\165\25\24\15\0\1\24"+
    "\4\0\13\24\1\166\5\24\1\167\10\24\15\0\1\24"+
    "\4\0\4\24\1\170\25\24\12\0\1\171\53\0\1\172"+
    "\43\0\6\54\1\122\3\54\1\121\41\54\13\0\1\24"+
    "\4\0\4\24\1\173\25\24\15\0\1\24\4\0\13\24"+
    "\1\174\16\24\15\0\1\24\4\0\24\24\1\175\5\24"+
    "\15\0\1\24\4\0\22\24\1\176\7\24\15\0\1\24"+
    "\4\0\1\177\31\24\15\0\1\24\4\0\4\24\1\200"+
    "\25\24\15\0\1\24\4\0\10\24\1\201\2\24\1\202"+
    "\16\24\15\0\1\24\4\0\1\203\31\24\15\0\1\24"+
    "\4\0\4\24\1\204\25\24\15\0\1\24\4\0\17\24"+
    "\1\205\12\24\15\0\1\24\4\0\22\24\1\206\7\24"+
    "\15\0\1\24\4\0\4\24\1\207\25\24\15\0\1\24"+
    "\4\0\14\24\1\210\15\24\15\0\1\24\4\0\15\24"+
    "\1\211\14\24\15\0\1\24\4\0\4\24\1\212\25\24"+
    "\15\0\1\24\4\0\4\24\1\213\11\24\1\214\13\24"+
    "\15\0\1\24\4\0\15\24\1\215\14\24\15\0\1\24"+
    "\4\0\23\24\1\216\6\24\15\0\1\24\4\0\10\24"+
    "\1\217\21\24\15\0\1\24\4\0\13\24\1\220\16\24"+
    "\15\0\1\24\4\0\14\24\1\221\15\24\15\0\1\24"+
    "\4\0\4\24\1\222\25\24\15\0\1\24\4\0\16\24"+
    "\1\223\13\24\15\0\1\24\4\0\4\24\1\224\25\24"+
    "\15\0\1\24\4\0\4\24\1\225\25\24\15\0\1\24"+
    "\4\0\13\24\1\226\16\24\15\0\1\24\4\0\4\24"+
    "\1\227\25\24\15\0\1\24\4\0\1\230\31\24\15\0"+
    "\1\24\4\0\21\24\1\231\10\24\15\0\1\24\4\0"+
    "\24\24\1\232\5\24\15\0\1\24\4\0\2\24\1\233"+
    "\27\24\15\0\1\24\4\0\21\24\1\234\10\24\20\0"+
    "\1\235\105\0\1\236\16\0\1\24\4\0\21\24\1\237"+
    "\10\24\15\0\1\24\4\0\4\24\1\240\25\24\15\0"+
    "\1\24\4\0\14\24\1\241\15\24\15\0\1\24\4\0"+
    "\23\24\1\242\6\24\15\0\1\24\4\0\23\24\1\243"+
    "\6\24\15\0\1\24\4\0\14\24\1\244\15\24\15\0"+
    "\1\24\4\0\1\245\31\24\15\0\1\24\4\0\24\24"+
    "\1\246\5\24\15\0\1\24\4\0\23\24\1\247\6\24"+
    "\15\0\1\24\4\0\4\24\1\250\25\24\15\0\1\24"+
    "\4\0\10\24\1\251\21\24\15\0\1\24\4\0\23\24"+
    "\1\252\6\24\15\0\1\24\4\0\21\24\1\253\10\24"+
    "\15\0\1\24\4\0\6\24\1\254\23\24\15\0\1\24"+
    "\4\0\5\24\1\255\24\24\15\0\1\24\4\0\1\256"+
    "\31\24\15\0\1\24\4\0\21\24\1\257\10\24\15\0"+
    "\1\24\4\0\12\24\1\260\17\24\15\0\1\24\4\0"+
    "\14\24\1\261\15\24\15\0\1\24\4\0\2\24\1\262"+
    "\27\24\15\0\1\24\4\0\4\24\1\263\25\24\15\0"+
    "\1\24\4\0\23\24\1\264\6\24\15\0\1\24\4\0"+
    "\4\24\1\265\25\24\15\0\1\24\4\0\7\24\1\266"+
    "\22\24\15\0\1\24\4\0\4\24\1\267\25\24\21\0"+
    "\1\270\107\0\1\271\13\0\1\24\4\0\1\272\31\24"+
    "\15\0\1\24\4\0\15\24\1\273\14\24\15\0\1\24"+
    "\4\0\21\24\1\274\10\24\15\0\1\24\4\0\4\24"+
    "\1\275\25\24\15\0\1\24\4\0\1\276\31\24\15\0"+
    "\1\24\4\0\21\24\1\277\10\24\15\0\1\24\4\0"+
    "\13\24\1\300\16\24\15\0\1\24\4\0\4\24\1\301"+
    "\25\24\15\0\1\24\4\0\6\24\1\302\23\24\15\0"+
    "\1\24\4\0\23\24\1\303\6\24\15\0\1\24\4\0"+
    "\4\24\1\304\25\24\15\0\1\24\4\0\27\24\1\305"+
    "\2\24\15\0\1\24\4\0\21\24\1\306\10\24\15\0"+
    "\1\24\4\0\4\24\1\307\25\24\15\0\1\24\4\0"+
    "\4\24\1\310\25\24\15\0\1\24\4\0\1\311\31\24"+
    "\15\0\1\24\4\0\23\24\1\312\6\24\15\0\1\24"+
    "\4\0\4\24\1\313\25\24\15\0\1\24\4\0\22\24"+
    "\1\314\7\24\15\0\1\24\4\0\1\315\31\24\15\0"+
    "\1\24\4\0\15\24\1\316\14\24\15\0\1\24\4\0"+
    "\1\317\31\24\15\0\1\24\4\0\13\24\1\320\16\24"+
    "\15\0\1\24\4\0\4\24\1\321\25\24\15\0\1\24"+
    "\4\0\23\24\1\322\6\24\15\0\1\24\4\0\15\24"+
    "\1\323\14\24\15\0\1\24\4\0\21\24\1\324\10\24"+
    "\15\0\1\24\4\0\27\24\1\325\2\24\15\0\1\24"+
    "\4\0\15\24\1\326\14\24\15\0\1\24\4\0\21\24"+
    "\1\327\10\24\15\0\1\24\4\0\10\24\1\330\21\24"+
    "\15\0\1\24\4\0\2\24\1\331\27\24\15\0\1\24"+
    "\4\0\15\24\1\332\14\24\15\0\1\24\4\0\4\24"+
    "\1\333\25\24\15\0\1\24\4\0\23\24\1\334\6\24"+
    "\15\0\1\24\4\0\22\24\1\335\7\24\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7216];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\4\11\1\1\1\11\2\1\2\11"+
    "\27\1\1\11\1\1\1\0\1\11\3\0\41\1\2\0"+
    "\1\11\1\0\46\1\2\0\42\1\2\0\31\1\2\11"+
    "\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*START-CODE*/

    private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
    private String dataCollected = "";

    public LexemaSQL(String in) {
        this.zzReader = new StringReader(in);
    }
      
    private void print(String token) {
       // System.out.println(token+ " < " + yytext() + " > <Linea\"" + (yyline + 1) + "\">" + "<Columna\"" + (yycolumn+1) + "\">");
    }

    private void addError(){
        print("error");
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.LEXICON;
        Token toke = new Token(yyline + 1, yycolumn + 1, yytext());
        this.listError.add(new ReportErrorInterpreter(type, toke, ""));
    }

    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }
    
    public String getDataCollected(){
        return this.dataCollected;
    }

    public void setDataCollected(String newdataCollected){
        this.dataCollected = newdataCollected;
    }

    /*FINAL-CODE*/


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexemaSQL(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new java_cup.runtime.Symbol(SymSQL.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //MANEJAR EL ERROR LEXICO
                        print("ERROR");
                        addError();
            }
          // fall through
          case 61: break;
          case 2:
            { 
            }
          // fall through
          case 62: break;
          case 3:
            { print("(");         return new Symbol(SymSQL.OPEN_P       , yyline, yycolumn, yytext());
            }
          // fall through
          case 63: break;
          case 4:
            { print(")");         return new Symbol(SymSQL.CLOSE_P      , yyline, yycolumn, yytext());
            }
          // fall through
          case 64: break;
          case 5:
            { print("*");         return new Symbol(SymSQL.ASTERISK     , yyline, yycolumn, yytext());
            }
          // fall through
          case 65: break;
          case 6:
            { print(",");         return new Symbol(SymSQL.COMMA        , yyline, yycolumn, yytext());
            }
          // fall through
          case 66: break;
          case 7:
            { print(".");         return new Symbol(SymSQL.POINT        , yyline, yycolumn, yytext());
            }
          // fall through
          case 67: break;
          case 8:
            { print("REAL_NUMEBERS"); return new Symbol(SymSQL.NUMEBERS     , yyline, yycolumn, yytext());
            }
          // fall through
          case 68: break;
          case 9:
            { print(";");         return new Symbol(SymSQL.PERIOD_AND_AS, yyline, yycolumn, yytext());
            }
          // fall through
          case 69: break;
          case 10:
            { print("=");         return new Symbol(SymSQL.EQUAL        , yyline, yycolumn, yytext());
            }
          // fall through
          case 70: break;
          case 11:
            { print("IDENTIFICADOR"); return new Symbol(SymSQL.IDENTIFICADOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 71: break;
          case 12:
            { print("ALIAS");          return new Symbol(SymSQL.ALIAS        , yyline, yycolumn, yytext());
            }
          // fall through
          case 72: break;
          case 13:
            { dataCollected += yytext();
            }
          // fall through
          case 73: break;
          case 14:
            { print("CHARS");         return new Symbol(SymSQL.CHARS         , yyline, yycolumn, yytext());
            }
          // fall through
          case 74: break;
          case 15:
            { print("ON");         return new Symbol(SymSQL.ON        , yyline, yycolumn, yytext());
            }
          // fall through
          case 75: break;
          case 16:
            { print("OR");         return new Symbol(SymSQL.OR        , yyline, yycolumn, yytext());
            }
          // fall through
          case 76: break;
          case 17:
            { print("TO");         return new Symbol(SymSQL.TO        , yyline, yycolumn, yytext());
            }
          // fall through
          case 77: break;
          case 18:
            { print("ADD");        return new Symbol(SymSQL.ADD       , yyline, yycolumn, yytext());
            }
          // fall through
          case 78: break;
          case 19:
            { print("AND");        return new Symbol(SymSQL.AND       , yyline, yycolumn, yytext());
            }
          // fall through
          case 79: break;
          case 20:
            { print("INT");        return new Symbol(SymSQL.INT       , yyline, yycolumn, yytext());
            }
          // fall through
          case 80: break;
          case 21:
            { print("KEY");        return new Symbol(SymSQL.KEY       , yyline, yycolumn, yytext());
            }
          // fall through
          case 81: break;
          case 22:
            { print("NOT");        return new Symbol(SymSQL.NOT       , yyline, yycolumn, yytext());
            }
          // fall through
          case 82: break;
          case 23:
            { print("SET");        return new Symbol(SymSQL.SET       , yyline, yycolumn, yytext());
            }
          // fall through
          case 83: break;
          case 24:
            { print("USE");        return new Symbol(SymSQL.USE       , yyline, yycolumn, yytext());
            }
          // fall through
          case 84: break;
          case 25:
            { print("DATE");       return new Symbol(SymSQL.DATE      , yyline, yycolumn, yytext());
            }
          // fall through
          case 85: break;
          case 26:
            { print("DROP");       return new Symbol(SymSQL.DROP      , yyline, yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 27:
            { print("FROM");       return new Symbol(SymSQL.FROM      , yyline, yycolumn, yytext());
            }
          // fall through
          case 87: break;
          case 28:
            { print("INTO");       return new Symbol(SymSQL.INTO      , yyline, yycolumn, yytext());
            }
          // fall through
          case 88: break;
          case 29:
            { print("JOIN");       return new Symbol(SymSQL.JOIN      , yyline, yycolumn, yytext());
            }
          // fall through
          case 89: break;
          case 30:
            { print("LEFT");       return new Symbol(SymSQL.LEFT      , yyline, yycolumn, yytext());
            }
          // fall through
          case 90: break;
          case 31:
            { print("NULL");       return new Symbol(SymSQL.NULL      , yyline, yycolumn, yytext());
            }
          // fall through
          case 91: break;
          case 32:
            { print("TRUE");       return new Symbol(SymSQL.TRUE        , yyline, yycolumn, yytext());
            }
          // fall through
          case 92: break;
          case 33:
            { print("USER");       return new Symbol(SymSQL.USER      , yyline, yycolumn, yytext());
            }
          // fall through
          case 93: break;
          case 34:
            { print("ALTER");      return new Symbol(SymSQL.ALTER     , yyline, yycolumn, yytext());
            }
          // fall through
          case 94: break;
          case 35:
            { print("FALSE");      return new Symbol(SymSQL.FALSE        , yyline, yycolumn, yytext());
            }
          // fall through
          case 95: break;
          case 36:
            { print("GRANT");      return new Symbol(SymSQL.GRANT     , yyline, yycolumn, yytext());
            }
          // fall through
          case 96: break;
          case 37:
            { print("TABLE");      return new Symbol(SymSQL.TABLE     , yyline, yycolumn, yytext());
            }
          // fall through
          case 97: break;
          case 38:
            { print("WHERE");      return new Symbol(SymSQL.WHERE     , yyline, yycolumn, yytext());
            }
          // fall through
          case 98: break;
          case 39:
            { yybegin(DATA_COLLECTION);
                    print("{_-=>"); 
                    return new Symbol(SymSQL.START_HARVESTING ,yyline,yycolumn,yytext());
            }
          // fall through
          case 99: break;
          case 40:
            { yybegin(YYINITIAL);
                    print("<=-_}"); 
                    return new Symbol(SymSQL.OUT_HARVESTING ,yyline,yycolumn,yytext());
            }
          // fall through
          case 100: break;
          case 41:
            { print("COLUMN");     return new Symbol(SymSQL.COLUMN    , yyline, yycolumn, yytext());
            }
          // fall through
          case 101: break;
          case 42:
            { print("CREATE");     return new Symbol(SymSQL.CREATE    , yyline, yycolumn, yytext());
            }
          // fall through
          case 102: break;
          case 43:
            { print("DELETE");     return new Symbol(SymSQL.DELETE    , yyline, yycolumn, yytext());
            }
          // fall through
          case 103: break;
          case 44:
            { print("INSERT");     return new Symbol(SymSQL.INSERT    , yyline, yycolumn, yytext());
            }
          // fall through
          case 104: break;
          case 45:
            { print("MODIFY");      return new Symbol(SymSQL.MODIFY    , yyline, yycolumn, yytext());
            }
          // fall through
          case 105: break;
          case 46:
            { print("REVOKE");     return new Symbol(SymSQL.REVOKE    , yyline, yycolumn, yytext());
            }
          // fall through
          case 106: break;
          case 47:
            { print("SCHEMA");     return new Symbol(SymSQL.SCHEMA    , yyline, yycolumn, yytext());
            }
          // fall through
          case 107: break;
          case 48:
            { print("SELECT");     return new Symbol(SymSQL.SELECT    , yyline, yycolumn, yytext());
            }
          // fall through
          case 108: break;
          case 49:
            { print("UPDATE");     return new Symbol(SymSQL.UPDATE    , yyline, yycolumn, yytext());
            }
          // fall through
          case 109: break;
          case 50:
            { print("VALUES");     return new Symbol(SymSQL.VALUES    , yyline, yycolumn, yytext());
            }
          // fall through
          case 110: break;
          case 51:
            { print("BOOLEAN");    return new Symbol(SymSQL.BOOLEAN   , yyline, yycolumn, yytext());
            }
          // fall through
          case 111: break;
          case 52:
            { print("DECIMAL");    return new Symbol(SymSQL.DECIMAL   , yyline, yycolumn, yytext());
            }
          // fall through
          case 112: break;
          case 53:
            { print("DECLARE");    return new Symbol(SymSQL.DECLARE   , yyline, yycolumn, yytext());
            }
          // fall through
          case 113: break;
          case 54:
            { print("DEFAULT");    return new Symbol(SymSQL.DEFAULT   , yyline, yycolumn, yytext());
            }
          // fall through
          case 114: break;
          case 55:
            { print("FOREIGN");    return new Symbol(SymSQL.FOREIGN   , yyline, yycolumn, yytext());
            }
          // fall through
          case 115: break;
          case 56:
            { print("INTEGER");    return new Symbol(SymSQL.INTEGER   , yyline, yycolumn, yytext());
            }
          // fall through
          case 116: break;
          case 57:
            { print("PRIMARY");    return new Symbol(SymSQL.PRIMARY   , yyline, yycolumn, yytext());
            }
          // fall through
          case 117: break;
          case 58:
            { print("VARCHAR");    return new Symbol(SymSQL.VARCHAR   , yyline, yycolumn, yytext());
            }
          // fall through
          case 118: break;
          case 59:
            { print("CONSTRAINT"); return new Symbol(SymSQL.CONSTRAINT, yyline, yycolumn, yytext());
            }
          // fall through
          case 119: break;
          case 60:
            { print("REFERENCES"); return new Symbol(SymSQL.REFERENCES, yyline, yycolumn, yytext());
            }
          // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
