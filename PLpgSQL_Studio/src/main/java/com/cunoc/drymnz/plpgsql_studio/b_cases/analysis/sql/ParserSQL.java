
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.sql;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ReportErrorInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.Token;
import com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.InterpretSyntaticError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserSQL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymSQL.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserSQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserSQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserSQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\003\003\000\002\003\003\000\002\006\004\000\002" +
    "\006\005\000\002\006\015\000\002\006\011\000\002\006" +
    "\005\000\002\044\007\000\002\044\004\000\002\044\004" +
    "\000\002\012\005\000\002\012\003\000\002\007\005\000" +
    "\002\007\014\000\002\014\002\000\002\014\005\000\002" +
    "\014\005\000\002\015\003\000\002\016\003\000\002\016" +
    "\003\000\002\011\005\000\002\011\003\000\002\011\003" +
    "\000\002\013\004\000\002\013\003\000\002\013\002\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\006\000\002\042\002\000\002\042\003\000\002\042" +
    "\015\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\017\003\000\002\017\003\000\002\024\014\000" +
    "\002\024\015\000\002\024\012\000\002\024\007\000\002" +
    "\034\002\000\002\034\004\000\002\034\007\000\002\034" +
    "\010\000\002\034\004\000\002\034\011\000\002\041\002" +
    "\000\002\041\003\000\002\033\003\000\002\032\005\000" +
    "\002\032\003\000\002\040\004\000\002\040\004\000\002" +
    "\040\003\000\002\035\004\000\002\035\002\000\002\030" +
    "\002\000\002\030\003\000\002\027\006\000\002\027\006" +
    "\000\002\031\004\000\002\031\003\000\002\025\005\000" +
    "\002\025\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\022\005\000\002\022\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\002\000\002\023\003\000\002\043\010\000\002" +
    "\043\010\000\002\043\005\000\002\047\005\000\002\047" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\046\003\000" +
    "\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\036\002\ufffe\003\017\014\010\016\012\021" +
    "\014\023\016\026\022\036\005\037\013\040\024\041\023" +
    "\047\004\050\020\057\025\001\002\000\014\013\126\036" +
    "\130\037\123\040\127\041\124\001\002\000\010\004\041" +
    "\011\042\067\043\001\002\000\006\003\120\062\122\001" +
    "\002\000\006\003\120\062\122\001\002\000\004\024\271" +
    "\001\002\000\004\002\270\001\002\000\010\017\227\020" +
    "\230\051\231\001\002\000\004\045\203\001\002\000\004" +
    "\020\146\001\002\000\034\002\000\014\010\016\012\021" +
    "\014\023\016\026\022\036\005\037\013\040\024\041\023" +
    "\047\004\050\020\057\025\001\002\000\004\020\144\001" +
    "\002\000\032\014\010\016\012\021\014\023\016\026\022" +
    "\036\005\037\013\040\024\041\023\047\004\050\020\057" +
    "\025\001\002\000\014\013\126\036\130\037\123\040\127" +
    "\041\124\001\002\000\006\003\120\062\122\001\002\000" +
    "\004\017\116\001\002\000\004\044\107\001\002\000\010" +
    "\004\041\011\042\067\043\001\002\000\004\004\027\001" +
    "\002\000\034\002\ufffc\014\ufffc\016\ufffc\021\ufffc\023\ufffc" +
    "\026\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\047\ufffc\050" +
    "\ufffc\057\ufffc\001\002\000\012\030\033\031\031\032\032" +
    "\033\034\001\002\000\006\003\uffa6\062\uffa6\001\002\000" +
    "\020\003\uffde\015\uffde\054\uffde\055\uffde\062\uffde\064\uffde" +
    "\065\uffde\001\002\000\020\003\uffdd\015\uffdd\054\uffdd\055" +
    "\uffdd\062\uffdd\064\uffdd\065\uffdd\001\002\000\004\063\035" +
    "\001\002\000\020\003\uffdc\015\uffdc\054\uffdc\055\uffdc\062" +
    "\uffdc\064\uffdc\065\uffdc\001\002\000\004\005\036\001\002" +
    "\000\004\064\037\001\002\000\020\003\uffdb\015\uffdb\054" +
    "\uffdb\055\uffdb\062\uffdb\064\uffdb\065\uffdb\001\002\000\032" +
    "\003\uffc6\011\uffc6\034\uffc6\035\uffc6\043\uffc6\044\uffc6\046" +
    "\uffc6\053\uffc6\062\uffc6\063\uffc6\065\105\066\uffc6\001\002" +
    "\000\034\003\uffbf\011\uffbf\034\uffbf\035\uffbf\043\uffbf\044" +
    "\uffbf\046\uffbf\053\uffbf\062\uffbf\063\uffbf\065\uffbf\066\uffbf" +
    "\070\101\001\002\000\034\003\uffbf\011\uffbf\034\uffbf\035" +
    "\uffbf\043\uffbf\044\uffbf\046\uffbf\053\uffbf\062\uffbf\063\uffbf" +
    "\065\uffbf\066\uffbf\070\101\001\002\000\032\003\uffc1\011" +
    "\uffc1\034\uffc1\035\uffc1\043\uffc1\044\uffc1\046\uffc1\053\uffc1" +
    "\062\uffc1\063\uffc1\065\uffc1\066\uffc1\001\002\000\004\046" +
    "\046\001\002\000\032\003\uffc4\011\uffc4\034\uffc4\035\uffc4" +
    "\043\uffc4\044\uffc4\046\uffc4\053\uffc4\062\uffc4\063\uffc4\065" +
    "\uffc4\066\uffc4\001\002\000\004\004\047\001\002\000\004" +
    "\066\050\001\002\000\020\003\052\004\054\005\051\006" +
    "\055\007\053\010\056\055\057\001\002\000\020\003\uffb6" +
    "\043\uffb6\060\uffb6\061\uffb6\062\uffb6\064\uffb6\065\uffb6\001" +
    "\002\000\020\003\uffb0\043\uffb0\060\uffb0\061\uffb0\062\uffb0" +
    "\064\uffb0\065\uffb0\001\002\000\020\003\uffb3\043\uffb3\060" +
    "\uffb3\061\uffb3\062\uffb3\064\uffb3\065\uffb3\001\002\000\020" +
    "\003\uffb5\043\uffb5\060\uffb5\061\uffb5\062\uffb5\064\uffb5\065" +
    "\uffb5\001\002\000\020\003\uffb4\043\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\064\uffb4\065\uffb4\001\002\000\020\003\uffb2\043" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\064\uffb2\065\uffb2\001\002" +
    "\000\020\003\uffb1\043\uffb1\060\uffb1\061\uffb1\062\uffb1\064" +
    "\uffb1\065\uffb1\001\002\000\004\043\061\001\002\000\004" +
    "\004\062\001\002\000\004\066\063\001\002\000\020\003" +
    "\052\004\054\005\051\006\055\007\053\010\056\055\057" +
    "\001\002\000\012\003\uffbe\060\066\061\071\062\uffbe\001" +
    "\002\000\006\003\uffd1\062\uffd1\001\002\000\004\004\076" +
    "\001\002\000\012\003\uffbd\060\066\061\071\062\uffbd\001" +
    "\002\000\012\003\uffb9\060\uffb9\061\uffb9\062\uffb9\001\002" +
    "\000\004\004\072\001\002\000\004\066\073\001\002\000" +
    "\020\003\052\004\054\005\051\006\055\007\053\010\056" +
    "\055\057\001\002\000\012\003\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\001\002\000\012\003\uffba\060\uffba\061\uffba\062\uffba" +
    "\001\002\000\004\066\077\001\002\000\020\003\052\004" +
    "\054\005\051\006\055\007\053\010\056\055\057\001\002" +
    "\000\012\003\uffbc\060\uffbc\061\uffbc\062\uffbc\001\002\000" +
    "\004\004\103\001\002\000\032\003\uffc2\011\uffc2\034\uffc2" +
    "\035\uffc2\043\uffc2\044\uffc2\046\uffc2\053\uffc2\062\uffc2\063" +
    "\uffc2\065\uffc2\066\uffc2\001\002\000\032\003\uffc0\011\uffc0" +
    "\034\uffc0\035\uffc0\043\uffc0\044\uffc0\046\uffc0\053\uffc0\062" +
    "\uffc0\063\uffc0\065\uffc0\066\uffc0\001\002\000\032\003\uffc3" +
    "\011\uffc3\034\uffc3\035\uffc3\043\uffc3\044\uffc3\046\uffc3\053" +
    "\uffc3\062\uffc3\063\uffc3\065\uffc3\066\uffc3\001\002\000\010" +
    "\004\041\011\042\067\043\001\002\000\032\003\uffc5\011" +
    "\uffc5\034\uffc5\035\uffc5\043\uffc5\044\uffc5\046\uffc5\053\uffc5" +
    "\062\uffc5\063\uffc5\065\uffc5\066\uffc5\001\002\000\010\004" +
    "\041\011\042\067\043\001\002\000\004\043\111\001\002" +
    "\000\004\004\112\001\002\000\004\066\113\001\002\000" +
    "\020\003\052\004\054\005\051\006\055\007\053\010\056" +
    "\055\057\001\002\000\012\003\uffbe\060\066\061\071\062" +
    "\uffbe\001\002\000\006\003\uffd0\062\uffd0\001\002\000\004" +
    "\004\117\001\002\000\006\003\ufff5\062\ufff5\001\002\000" +
    "\034\002\ufff7\014\ufff7\016\ufff7\021\ufff7\023\ufff7\026\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\041\ufff7\047\ufff7\050\ufff7\057" +
    "\ufff7\001\002\000\034\002\ufff9\014\ufff9\016\ufff9\021\ufff9" +
    "\023\ufff9\026\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\047" +
    "\ufff9\050\ufff9\057\ufff9\001\002\000\034\002\ufff8\014\ufff8" +
    "\016\ufff8\021\ufff8\023\ufff8\026\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\047\ufff8\050\ufff8\057\ufff8\001\002\000\004" +
    "\053\uffa3\001\002\000\004\053\uffa0\001\002\000\004\053" +
    "\131\001\002\000\004\053\uff9f\001\002\000\004\053\uffa1" +
    "\001\002\000\004\053\uffa2\001\002\000\004\004\133\001" +
    "\002\000\004\052\140\001\002\000\010\044\uffa4\052\uffa4" +
    "\070\134\001\002\000\006\004\136\067\137\001\002\000" +
    "\006\044\uffa5\052\uffa5\001\002\000\006\044\uff9d\052\uff9d" +
    "\001\002\000\006\044\uff9e\052\uff9e\001\002\000\004\004" +
    "\141\001\002\000\006\003\uffa8\062\uffa8\001\002\000\034" +
    "\002\uffff\014\010\016\012\021\014\023\016\026\022\036" +
    "\005\037\013\040\024\041\023\047\004\050\020\057\025" +
    "\001\002\000\034\002\ufffd\014\ufffd\016\ufffd\021\ufffd\023" +
    "\ufffd\026\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\047\ufffd" +
    "\050\ufffd\057\ufffd\001\002\000\004\004\145\001\002\000" +
    "\006\003\ufff2\062\ufff2\001\002\000\004\004\147\001\002" +
    "\000\010\023\152\025\151\027\153\001\002\000\006\012" +
    "\155\022\156\001\002\000\006\012\uffd7\022\uffd7\001\002" +
    "\000\006\012\uffd6\022\uffd6\001\002\000\006\012\uffd5\022" +
    "\uffd5\001\002\000\004\004\157\001\002\000\004\004\uffd4" +
    "\001\002\000\004\004\uffd3\001\002\000\020\003\uffda\014" +
    "\161\030\033\031\031\032\032\033\034\062\uffda\001\002" +
    "\000\006\003\uffd9\062\uffd9\001\002\000\004\024\163\001" +
    "\002\000\006\003\ufff3\062\ufff3\001\002\000\004\063\164" +
    "\001\002\000\004\004\165\001\002\000\004\064\166\001" +
    "\002\000\004\013\167\001\002\000\004\004\170\001\002" +
    "\000\004\063\171\001\002\000\004\004\172\001\002\000" +
    "\004\064\173\001\002\000\010\003\uffea\053\174\062\uffea" +
    "\001\002\000\006\040\177\041\176\001\002\000\006\003" +
    "\uffd8\062\uffd8\001\002\000\004\046\201\001\002\000\004" +
    "\046\201\001\002\000\006\003\uffe9\062\uffe9\001\002\000" +
    "\006\003\uffe7\062\uffe7\001\002\000\006\003\uffe8\062\uffe8" +
    "\001\002\000\010\004\041\011\042\067\043\001\002\000" +
    "\004\063\205\001\002\000\016\003\207\004\210\005\206" +
    "\006\211\064\uffaa\065\uffaa\001\002\000\006\064\uffac\065" +
    "\uffac\001\002\000\006\064\uffa9\065\uffa9\001\002\000\006" +
    "\064\uffab\065\uffab\001\002\000\006\064\uffad\065\uffad\001" +
    "\002\000\006\064\215\065\214\001\002\000\006\064\uffae" +
    "\065\uffae\001\002\000\016\003\207\004\210\005\206\006" +
    "\211\064\uffaa\065\uffaa\001\002\000\004\042\216\001\002" +
    "\000\004\063\217\001\002\000\020\003\052\004\054\005" +
    "\051\006\055\007\053\010\056\055\057\001\002\000\006" +
    "\064\223\065\222\001\002\000\006\064\uffb7\065\uffb7\001" +
    "\002\000\020\003\052\004\054\005\051\006\055\007\053" +
    "\010\056\055\057\001\002\000\006\003\uffd2\062\uffd2\001" +
    "\002\000\006\064\uffb8\065\uffb8\001\002\000\006\064\uffaf" +
    "\065\uffaf\001\002\000\006\003\ufff6\062\ufff6\001\002\000" +
    "\004\004\267\001\002\000\004\004\233\001\002\000\004" +
    "\004\232\001\002\000\006\003\uffef\062\uffef\001\002\000" +
    "\004\063\234\001\002\000\006\004\237\014\235\001\002" +
    "\000\004\024\256\001\002\000\006\064\254\065\253\001" +
    "\002\000\012\030\033\031\031\032\032\033\034\001\002" +
    "\000\006\064\uffed\065\uffed\001\002\000\016\003\244\015" +
    "\242\054\245\055\247\064\uffdf\065\uffdf\001\002\000\004" +
    "\024\251\001\002\000\006\064\uffec\065\uffec\001\002\000" +
    "\006\064\uffe0\065\uffe0\001\002\000\004\055\250\001\002" +
    "\000\006\064\uffe3\065\uffe3\001\002\000\006\064\uffe2\065" +
    "\uffe2\001\002\000\006\064\uffe1\065\uffe1\001\002\000\012" +
    "\003\244\054\245\064\uffdf\065\uffdf\001\002\000\006\064" +
    "\uffe4\065\uffe4\001\002\000\006\004\237\014\235\001\002" +
    "\000\006\003\ufff1\062\ufff1\001\002\000\006\064\uffee\065" +
    "\uffee\001\002\000\004\063\257\001\002\000\004\004\260" +
    "\001\002\000\004\064\261\001\002\000\004\013\262\001" +
    "\002\000\004\004\263\001\002\000\004\063\264\001\002" +
    "\000\004\004\265\001\002\000\004\064\266\001\002\000" +
    "\006\064\uffeb\065\uffeb\001\002\000\006\003\ufff0\062\ufff0" +
    "\001\002\000\004\002\001\001\002\000\004\063\272\001" +
    "\002\000\004\004\273\001\002\000\004\064\274\001\002" +
    "\000\004\013\275\001\002\000\004\004\276\001\002\000" +
    "\004\063\277\001\002\000\004\004\300\001\002\000\004" +
    "\064\301\001\002\000\010\003\uffea\053\174\062\uffea\001" +
    "\002\000\006\003\ufff4\062\ufff4\001\002\000\034\002\ufffa" +
    "\014\ufffa\016\ufffa\021\ufffa\023\ufffa\026\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\047\ufffa\050\ufffa\057\ufffa\001\002" +
    "\000\034\002\ufffb\014\ufffb\016\ufffb\021\ufffb\023\ufffb\026" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\047\ufffb\050\ufffb" +
    "\057\ufffb\001\002\000\004\044\306\001\002\000\010\004" +
    "\041\011\042\067\043\001\002\000\016\003\uffce\011\314" +
    "\034\310\035\312\043\313\062\uffce\001\002\000\004\035" +
    "\330\001\002\000\006\003\uffcf\062\uffcf\001\002\000\010" +
    "\004\041\011\042\067\043\001\002\000\010\004\316\060" +
    "\066\061\071\001\002\000\016\003\uffce\011\314\034\310" +
    "\035\312\043\313\062\uffce\001\002\000\006\003\uffca\062" +
    "\uffca\001\002\000\004\066\320\001\002\000\012\003\uffcd" +
    "\060\066\061\071\062\uffcd\001\002\000\020\003\052\004" +
    "\054\005\051\006\055\007\053\010\056\055\057\001\002" +
    "\000\012\003\uffbe\060\066\061\071\062\uffbe\001\002\000" +
    "\006\003\uffcc\062\uffcc\001\002\000\004\053\324\001\002" +
    "\000\010\004\041\011\042\067\043\001\002\000\004\066" +
    "\326\001\002\000\010\004\041\011\042\067\043\001\002" +
    "\000\006\003\uffcb\062\uffcb\001\002\000\010\004\041\011" +
    "\042\067\043\001\002\000\004\053\332\001\002\000\010" +
    "\004\041\011\042\067\043\001\002\000\004\066\334\001" +
    "\002\000\010\004\041\011\042\067\043\001\002\000\006" +
    "\003\uffc9\062\uffc9\001\002\000\004\053\337\001\002\000" +
    "\004\004\133\001\002\000\004\044\341\001\002\000\004" +
    "\004\342\001\002\000\006\003\uffa7\062\uffa7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\016\002\010\004\014\005\025\006\005\024" +
    "\006\043\020\001\001\000\004\045\335\001\001\000\010" +
    "\032\037\033\304\040\044\001\001\000\004\003\303\001" +
    "\001\000\004\003\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\142\006\005\024\006\043\020" +
    "\001\001\000\002\001\001\000\014\004\141\005\025\006" +
    "\005\024\006\043\020\001\001\000\004\045\124\001\001" +
    "\000\004\003\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\037\033\043\040\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\103" +
    "\001\001\000\004\035\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\063" +
    "\001\001\000\010\027\067\030\064\031\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\105\001\001\000\002\001" +
    "\001\000\010\032\037\033\107\040\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\113\001\001\000\010\027\067\030\114\031\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\142\006\005\024\006\043\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\147\001\001\000\004\017\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\157" +
    "\042\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\201\001\001\000\004\015\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\037\033" +
    "\203\040\044\001\001\000\002\001\001\000\006\022\211" +
    "\023\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\217\026\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\237" +
    "\012\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\240\001\001\000\002\001\001\000\006\011\242" +
    "\013\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\251\001\001\000" +
    "\002\001\001\000\004\007\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\032\037\033\306\040\044\001\001\000\004\034\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\037" +
    "\033\322\040\044\001\001\000\006\027\067\031\316\001" +
    "\001\000\004\034\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\074\001\001\000\004\026\320\001" +
    "\001\000\010\027\067\030\321\031\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\037\033\324\040" +
    "\044\001\001\000\002\001\001\000\010\032\037\033\326" +
    "\040\044\001\001\000\002\001\001\000\010\032\037\033" +
    "\330\040\044\001\001\000\002\001\001\000\010\032\037" +
    "\033\332\040\044\001\001\000\002\001\001\000\010\032" +
    "\037\033\334\040\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserSQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserSQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserSQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private LexemaSQL lexema;

	  public ParserSQL(LexemaSQL Lexema) {
        super(Lexema);
        this.lexema = Lexema;
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
        System.out.println(this.listError.get(0).toString());
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserSQL$actions {
  private final ParserSQL parser;

  /** Constructor */
  CUP$ParserSQL$actions(ParserSQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action_part00000000(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserSQL$result;

      /* select the action based on the action number */
      switch (CUP$ParserSQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		RESULT = start_val;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserSQL$parser.done_parsing();
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= varias_etiquetas_usar 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error varias_etiquetas_usar 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // varias_etiquetas_usar ::= varias_etiquetas_usar etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("varias_etiquetas_usar",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varias_etiquetas_usar ::= etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("varias_etiquetas_usar",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // etiqueta_inicial ::= use_ddl finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // etiqueta_inicial ::= use_dml finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // etiqueta_inicial ::= use_dcl finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // finalizacion_punto_y_coma ::= PERIOD_AND_AS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("finalizacion_punto_y_coma",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // finalizacion_punto_y_coma ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("finalizacion_punto_y_coma",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // use_ddl ::= CREATE optimization_create 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // use_ddl ::= USE SCHEMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // use_ddl ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P accion_update 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // use_ddl ::= ALTER TABLE IDENTIFICADOR accion_alter space_use_alter IDENTIFICADOR type_optional_alter 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // use_ddl ::= DROP TABLE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optimization_create ::= TABLE IDENTIFICADOR OPEN_P various_attributes CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",34, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optimization_create ::= SCHEMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",34, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optimization_create ::= USER IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",34, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // various_attributes ::= various_attributes COMMA atributos_tabla 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("various_attributes",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // various_attributes ::= atributos_tabla 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("various_attributes",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // atributos_tabla ::= IDENTIFICADOR type_attribute type_privacy 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributos_tabla",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atributos_tabla ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributos_tabla",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-9)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // accion_update ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // accion_update ::= ON UPDATE accion_fk 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // accion_update ::= ON DELETE accion_fk 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // accion_fk ::= SET 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_fk",11, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // set_fk ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("set_fk",12, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // set_fk ::= NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("set_fk",12, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_privacy ::= PRIMARY KEY attribute_null 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_privacy ::= attribute_null 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_privacy ::= NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // attribute_null ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // attribute_null ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // attribute_null ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_attribute ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_attribute ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_attribute ::= INT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_attribute ::= VARCHAR OPEN_P NUMEBERS CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_optional_alter ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_optional_alter ::= type_attribute 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_optional_alter ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P accion_update 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // accion_alter ::= ADD 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // accion_alter ::= DROP 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // accion_alter ::= MODIFY 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // space_use_alter ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("space_use_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // space_use_alter ::= COLUMN 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("space_use_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // use_dml ::= INSERT INTO select_parameters OPEN_P several_parameters CLOSE_P VALUES OPEN_P insert_parameters CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-9)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // use_dml ::= UPDATE select_parameters SET IDENTIFICADOR EQUAL insert_value WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // use_dml ::= DELETE FROM select_parameters WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-7)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // use_dml ::= SELECT select_parameters FROM select_parameters continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // continuation_select ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // continuation_select ::= WHERE logical_connector_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // continuation_select ::= WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // continuation_select ::= JOIN select_parameters ON select_parameters EQUAL select_parameters 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // continuation_select ::= ALIAS continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // continuation_select ::= LEFT JOIN select_parameters ON select_parameters EQUAL select_parameters 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // use_alias ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_alias",31, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // use_alias ::= select_parameters 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_alias",31, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // select_parameters ::= identificador_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("select_parameters",25, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // identificador_loop ::= identificador_loop COMMA optimization_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_loop",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // identificador_loop ::= optimization_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_loop",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // optimization_loop ::= IDENTIFICADOR attribute_possibility 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // optimization_loop ::= ALIAS attribute_possibility 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // optimization_loop ::= ASTERISK 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // attribute_possibility ::= POINT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_possibility",27, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // attribute_possibility ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_possibility",27, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // continuation_UPDATE ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_UPDATE",22, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // continuation_UPDATE ::= logical_connector_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_UPDATE",22, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logical_connector ::= AND IDENTIFICADOR EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector",21, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logical_connector ::= OR IDENTIFICADOR EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector",21, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logical_connector_loop ::= logical_connector_loop logical_connector 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector_loop",23, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logical_connector_loop ::= logical_connector 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector_loop",23, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // insert_parameters ::= insert_parameters COMMA insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_parameters",19, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // insert_parameters ::= insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_parameters",19, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // insert_value ::= NUMEBERS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // insert_value ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // insert_value ::= CHARS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // insert_value ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // insert_value ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // insert_value ::= NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // insert_value ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // several_parameters ::= several_parameters COMMA attribute_insert 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("several_parameters",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // several_parameters ::= attribute_insert 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("several_parameters",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // attribute_insert ::= CHARS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // attribute_insert ::= NUMEBERS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // attribute_insert ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // attribute_insert ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // attribute_insert ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // use_dcl ::= GRANT option_grant ON identificador_or_point TO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dcl",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // use_dcl ::= REVOKE option_grant ON identificador_or_point FROM IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dcl",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // use_dcl ::= DECLARE IDENTIFICADOR type_attribute 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dcl",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // identificador_or_point ::= IDENTIFICADOR POINT atributo_or_all 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_or_point",37, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // identificador_or_point ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_or_point",37, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // option_grant ::= INSERT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",35, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // option_grant ::= SELECT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",35, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // option_grant ::= UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",35, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // option_grant ::= DELETE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",35, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // option_grant ::= REFERENCES 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",35, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // atributo_or_all ::= ASTERISK 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributo_or_all",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // atributo_or_all ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributo_or_all",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserSQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
              return CUP$ParserSQL$do_action_part00000000(
                               CUP$ParserSQL$act_num,
                               CUP$ParserSQL$parser,
                               CUP$ParserSQL$stack,
                               CUP$ParserSQL$top);
    }
}

}
