
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.sql;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ReportErrorInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.Token;
import com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.InterpretSyntaticError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserSQL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymSQL.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserSQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserSQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserSQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\003\003\000\002\003\003\000\002\006\004\000\002" +
    "\006\005\000\002\006\015\000\002\006\011\000\002\006" +
    "\005\000\002\041\007\000\002\041\004\000\002\041\004" +
    "\000\002\012\005\000\002\012\003\000\002\007\005\000" +
    "\002\007\014\000\002\014\002\000\002\014\005\000\002" +
    "\014\005\000\002\015\003\000\002\011\005\000\002\011" +
    "\003\000\002\011\003\000\002\013\004\000\002\013\003" +
    "\000\002\013\002\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\006\000\002\010\003\000\002" +
    "\010\003\000\002\037\002\000\002\037\003\000\002\037" +
    "\015\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\016\003\000\002\016\003\000\002\022\014\000" +
    "\002\022\013\000\002\022\012\000\002\022\007\000\002" +
    "\032\002\000\002\032\004\000\002\032\007\000\002\032" +
    "\013\000\002\032\004\000\002\032\012\000\002\035\007" +
    "\000\002\035\005\000\002\036\002\000\002\036\003\000" +
    "\002\036\003\000\002\031\003\000\002\030\005\000\002" +
    "\030\003\000\002\034\004\000\002\034\004\000\002\034" +
    "\003\000\002\033\004\000\002\033\002\000\002\026\002" +
    "\000\002\026\003\000\002\025\006\000\002\025\006\000" +
    "\002\027\004\000\002\027\003\000\002\023\005\000\002" +
    "\023\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\020\005\000\002\020\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\002\000\002\021\003\000\002\040\010\000\002\040" +
    "\010\000\002\040\005\000\002\044\005\000\002\044\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\043\003\000\002" +
    "\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\036\002\ufffe\003\017\014\010\016\012\021" +
    "\014\023\016\026\022\040\005\041\013\042\024\043\023" +
    "\051\004\052\020\061\025\001\002\000\014\013\135\040" +
    "\137\041\132\042\136\043\133\001\002\000\010\004\044" +
    "\011\043\071\045\001\002\000\006\003\127\064\131\001" +
    "\002\000\006\003\127\064\131\001\002\000\004\024\300" +
    "\001\002\000\004\002\277\001\002\000\010\017\236\020" +
    "\237\053\240\001\002\000\004\047\212\001\002\000\004" +
    "\020\155\001\002\000\034\002\000\014\010\016\012\021" +
    "\014\023\016\026\022\040\005\041\013\042\024\043\023" +
    "\051\004\052\020\061\025\001\002\000\004\020\153\001" +
    "\002\000\032\014\010\016\012\021\014\023\016\026\022" +
    "\040\005\041\013\042\024\043\023\051\004\052\020\061" +
    "\025\001\002\000\014\013\135\040\137\041\132\042\136" +
    "\043\133\001\002\000\006\003\127\064\131\001\002\000" +
    "\004\017\125\001\002\000\004\046\116\001\002\000\010" +
    "\004\044\011\043\071\045\001\002\000\004\004\027\001" +
    "\002\000\034\002\ufffc\014\ufffc\016\ufffc\021\ufffc\023\ufffc" +
    "\026\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\051\ufffc\052" +
    "\ufffc\061\ufffc\001\002\000\016\030\033\031\030\032\034" +
    "\033\036\034\035\035\032\001\002\000\020\003\uffe0\015" +
    "\uffe0\056\uffe0\057\uffe0\064\uffe0\066\uffe0\067\uffe0\001\002" +
    "\000\006\003\uffa3\064\uffa3\001\002\000\020\003\uffdb\015" +
    "\uffdb\056\uffdb\057\uffdb\064\uffdb\066\uffdb\067\uffdb\001\002" +
    "\000\004\065\037\001\002\000\020\003\uffdf\015\uffdf\056" +
    "\uffdf\057\uffdf\064\uffdf\066\uffdf\067\uffdf\001\002\000\020" +
    "\003\uffdc\015\uffdc\056\uffdc\057\uffdc\064\uffdc\066\uffdc\067" +
    "\uffdc\001\002\000\020\003\uffde\015\uffde\056\uffde\057\uffde" +
    "\064\uffde\066\uffde\067\uffde\001\002\000\004\005\040\001" +
    "\002\000\004\066\041\001\002\000\020\003\uffdd\015\uffdd" +
    "\056\uffdd\057\uffdd\064\uffdd\066\uffdd\067\uffdd\001\002\000" +
    "\034\003\uffc3\004\uffc3\011\uffc3\036\uffc3\037\uffc3\045\uffc3" +
    "\046\uffc3\050\uffc3\055\uffc3\064\uffc3\065\uffc3\067\114\070" +
    "\uffc3\001\002\000\036\003\uffbc\004\uffbc\011\uffbc\036\uffbc" +
    "\037\uffbc\045\uffbc\046\uffbc\050\uffbc\055\uffbc\064\uffbc\065" +
    "\uffbc\067\uffbc\070\uffbc\072\110\001\002\000\036\003\uffbc" +
    "\004\uffbc\011\uffbc\036\uffbc\037\uffbc\045\uffbc\046\uffbc\050" +
    "\uffbc\055\uffbc\064\uffbc\065\uffbc\067\uffbc\070\uffbc\072\110" +
    "\001\002\000\034\003\uffbe\004\uffbe\011\uffbe\036\uffbe\037" +
    "\uffbe\045\uffbe\046\uffbe\050\uffbe\055\uffbe\064\uffbe\065\uffbe" +
    "\067\uffbe\070\uffbe\001\002\000\004\050\050\001\002\000" +
    "\034\003\uffc1\004\uffc1\011\uffc1\036\uffc1\037\uffc1\045\uffc1" +
    "\046\uffc1\050\uffc1\055\uffc1\064\uffc1\065\uffc1\067\uffc1\070" +
    "\uffc1\001\002\000\004\004\052\001\002\000\006\045\065" +
    "\067\064\001\002\000\004\070\053\001\002\000\020\003" +
    "\055\004\057\005\054\006\060\007\056\010\061\057\062" +
    "\001\002\000\020\003\uffb3\045\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\066\uffb3\067\uffb3\001\002\000\020\003\uffad\045\uffad" +
    "\062\uffad\063\uffad\064\uffad\066\uffad\067\uffad\001\002\000" +
    "\020\003\uffb0\045\uffb0\062\uffb0\063\uffb0\064\uffb0\066\uffb0" +
    "\067\uffb0\001\002\000\020\003\uffb2\045\uffb2\062\uffb2\063" +
    "\uffb2\064\uffb2\066\uffb2\067\uffb2\001\002\000\020\003\uffb1" +
    "\045\uffb1\062\uffb1\063\uffb1\064\uffb1\066\uffb1\067\uffb1\001" +
    "\002\000\020\003\uffaf\045\uffaf\062\uffaf\063\uffaf\064\uffaf" +
    "\066\uffaf\067\uffaf\001\002\000\020\003\uffae\045\uffae\062" +
    "\uffae\063\uffae\064\uffae\066\uffae\067\uffae\001\002\000\006" +
    "\045\uffc7\067\uffc7\001\002\000\004\004\105\001\002\000" +
    "\004\004\066\001\002\000\004\070\067\001\002\000\020" +
    "\003\055\004\057\005\054\006\060\007\056\010\061\057" +
    "\062\001\002\000\012\003\uffbb\062\072\063\075\064\uffbb" +
    "\001\002\000\006\003\uffd1\064\uffd1\001\002\000\010\004" +
    "\044\011\043\071\045\001\002\000\012\003\uffba\062\072" +
    "\063\075\064\uffba\001\002\000\012\003\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\001\002\000\010\004\044\011\043\071\045" +
    "\001\002\000\004\070\077\001\002\000\020\003\055\004" +
    "\057\005\054\006\060\007\056\010\061\057\062\001\002" +
    "\000\012\003\uffb8\062\uffb8\063\uffb8\064\uffb8\001\002\000" +
    "\012\003\uffb7\062\uffb7\063\uffb7\064\uffb7\001\002\000\004" +
    "\070\103\001\002\000\020\003\055\004\057\005\054\006" +
    "\060\007\056\010\061\057\062\001\002\000\012\003\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\001\002\000\004\070\106\001" +
    "\002\000\020\003\055\004\057\005\054\006\060\007\056" +
    "\010\061\057\062\001\002\000\006\045\uffc8\067\uffc8\001" +
    "\002\000\004\004\112\001\002\000\034\003\uffc0\004\uffc0" +
    "\011\uffc0\036\uffc0\037\uffc0\045\uffc0\046\uffc0\050\uffc0\055" +
    "\uffc0\064\uffc0\065\uffc0\067\uffc0\070\uffc0\001\002\000\034" +
    "\003\uffbd\004\uffbd\011\uffbd\036\uffbd\037\uffbd\045\uffbd\046" +
    "\uffbd\050\uffbd\055\uffbd\064\uffbd\065\uffbd\067\uffbd\070\uffbd" +
    "\001\002\000\034\003\uffbf\004\uffbf\011\uffbf\036\uffbf\037" +
    "\uffbf\045\uffbf\046\uffbf\050\uffbf\055\uffbf\064\uffbf\065\uffbf" +
    "\067\uffbf\070\uffbf\001\002\000\010\004\044\011\043\071" +
    "\045\001\002\000\034\003\uffc2\004\uffc2\011\uffc2\036\uffc2" +
    "\037\uffc2\045\uffc2\046\uffc2\050\uffc2\055\uffc2\064\uffc2\065" +
    "\uffc2\067\uffc2\070\uffc2\001\002\000\010\004\044\011\043" +
    "\071\045\001\002\000\004\045\120\001\002\000\004\004" +
    "\121\001\002\000\004\070\122\001\002\000\020\003\055" +
    "\004\057\005\054\006\060\007\056\010\061\057\062\001" +
    "\002\000\012\003\uffbb\062\072\063\075\064\uffbb\001\002" +
    "\000\006\003\uffd0\064\uffd0\001\002\000\004\004\126\001" +
    "\002\000\006\003\ufff5\064\ufff5\001\002\000\034\002\ufff7" +
    "\014\ufff7\016\ufff7\021\ufff7\023\ufff7\026\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\051\ufff7\052\ufff7\061\ufff7\001\002" +
    "\000\034\002\ufff9\014\ufff9\016\ufff9\021\ufff9\023\ufff9\026" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\051\ufff9\052\ufff9" +
    "\061\ufff9\001\002\000\034\002\ufff8\014\ufff8\016\ufff8\021" +
    "\ufff8\023\ufff8\026\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\051\ufff8\052\ufff8\061\ufff8\001\002\000\004\055\uffa0\001" +
    "\002\000\004\055\uff9d\001\002\000\004\055\140\001\002" +
    "\000\004\055\uff9c\001\002\000\004\055\uff9e\001\002\000" +
    "\004\055\uff9f\001\002\000\004\004\142\001\002\000\004" +
    "\054\147\001\002\000\010\046\uffa1\054\uffa1\072\143\001" +
    "\002\000\006\004\145\071\146\001\002\000\006\046\uffa2" +
    "\054\uffa2\001\002\000\006\046\uff9a\054\uff9a\001\002\000" +
    "\006\046\uff9b\054\uff9b\001\002\000\004\004\150\001\002" +
    "\000\006\003\uffa5\064\uffa5\001\002\000\034\002\uffff\014" +
    "\010\016\012\021\014\023\016\026\022\040\005\041\013" +
    "\042\024\043\023\051\004\052\020\061\025\001\002\000" +
    "\034\002\ufffd\014\ufffd\016\ufffd\021\ufffd\023\ufffd\026\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\051\ufffd\052\ufffd\061" +
    "\ufffd\001\002\000\004\004\154\001\002\000\006\003\ufff2" +
    "\064\ufff2\001\002\000\004\004\156\001\002\000\010\023" +
    "\161\025\160\027\162\001\002\000\006\012\164\022\165" +
    "\001\002\000\006\012\uffd7\022\uffd7\001\002\000\006\012" +
    "\uffd6\022\uffd6\001\002\000\006\012\uffd5\022\uffd5\001\002" +
    "\000\004\004\166\001\002\000\004\004\uffd4\001\002\000" +
    "\004\004\uffd3\001\002\000\024\003\uffda\014\170\030\033" +
    "\031\030\032\034\033\036\034\035\035\032\064\uffda\001" +
    "\002\000\006\003\ufff3\064\ufff3\001\002\000\004\024\172" +
    "\001\002\000\006\003\uffd9\064\uffd9\001\002\000\004\065" +
    "\173\001\002\000\004\004\174\001\002\000\004\066\175" +
    "\001\002\000\004\013\176\001\002\000\004\004\177\001" +
    "\002\000\004\065\200\001\002\000\004\004\201\001\002" +
    "\000\004\066\202\001\002\000\010\003\uffea\055\203\064" +
    "\uffea\001\002\000\006\042\206\043\205\001\002\000\006" +
    "\003\uffd8\064\uffd8\001\002\000\004\050\210\001\002\000" +
    "\004\050\210\001\002\000\006\003\uffe9\064\uffe9\001\002" +
    "\000\006\003\uffe7\064\uffe7\001\002\000\006\003\uffe8\064" +
    "\uffe8\001\002\000\010\004\044\011\043\071\045\001\002" +
    "\000\004\065\214\001\002\000\016\003\216\004\217\005" +
    "\215\006\220\066\uffa7\067\uffa7\001\002\000\006\066\uffa9" +
    "\067\uffa9\001\002\000\006\066\uffa6\067\uffa6\001\002\000" +
    "\006\066\uffa8\067\uffa8\001\002\000\006\066\uffaa\067\uffaa" +
    "\001\002\000\006\066\224\067\223\001\002\000\006\066" +
    "\uffab\067\uffab\001\002\000\016\003\216\004\217\005\215" +
    "\006\220\066\uffa7\067\uffa7\001\002\000\004\044\225\001" +
    "\002\000\004\065\226\001\002\000\020\003\055\004\057" +
    "\005\054\006\060\007\056\010\061\057\062\001\002\000" +
    "\006\066\232\067\231\001\002\000\006\066\uffb4\067\uffb4" +
    "\001\002\000\020\003\055\004\057\005\054\006\060\007" +
    "\056\010\061\057\062\001\002\000\006\003\uffd2\064\uffd2" +
    "\001\002\000\006\066\uffb5\067\uffb5\001\002\000\006\066" +
    "\uffac\067\uffac\001\002\000\006\003\ufff6\064\ufff6\001\002" +
    "\000\004\004\276\001\002\000\004\004\242\001\002\000" +
    "\004\004\241\001\002\000\006\003\uffef\064\uffef\001\002" +
    "\000\004\065\243\001\002\000\006\004\246\014\244\001" +
    "\002\000\004\024\265\001\002\000\006\066\263\067\262" +
    "\001\002\000\016\030\033\031\030\032\034\033\036\034" +
    "\035\035\032\001\002\000\006\066\uffed\067\uffed\001\002" +
    "\000\016\003\254\015\252\056\255\057\256\066\uffe1\067" +
    "\uffe1\001\002\000\006\066\uffec\067\uffec\001\002\000\004" +
    "\024\260\001\002\000\006\066\uffe5\067\uffe5\001\002\000" +
    "\006\066\uffe2\067\uffe2\001\002\000\004\057\257\001\002" +
    "\000\006\066\uffe4\067\uffe4\001\002\000\006\066\uffe3\067" +
    "\uffe3\001\002\000\012\003\254\056\255\066\uffe1\067\uffe1" +
    "\001\002\000\006\066\uffe6\067\uffe6\001\002\000\006\004" +
    "\246\014\244\001\002\000\006\003\ufff1\064\ufff1\001\002" +
    "\000\006\066\uffee\067\uffee\001\002\000\004\065\266\001" +
    "\002\000\004\004\267\001\002\000\004\066\270\001\002" +
    "\000\004\013\271\001\002\000\004\004\272\001\002\000" +
    "\004\065\273\001\002\000\004\004\274\001\002\000\004" +
    "\066\275\001\002\000\006\066\uffeb\067\uffeb\001\002\000" +
    "\006\003\ufff0\064\ufff0\001\002\000\004\002\001\001\002" +
    "\000\004\065\301\001\002\000\004\004\302\001\002\000" +
    "\004\066\303\001\002\000\004\013\304\001\002\000\004" +
    "\004\305\001\002\000\004\065\306\001\002\000\004\004" +
    "\307\001\002\000\004\066\310\001\002\000\010\003\uffea" +
    "\055\203\064\uffea\001\002\000\006\003\ufff4\064\ufff4\001" +
    "\002\000\034\002\ufffa\014\ufffa\016\ufffa\021\ufffa\023\ufffa" +
    "\026\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\051\ufffa\052" +
    "\ufffa\061\ufffa\001\002\000\034\002\ufffb\014\ufffb\016\ufffb" +
    "\021\ufffb\023\ufffb\026\ufffb\040\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\051\ufffb\052\ufffb\061\ufffb\001\002\000\004\046\315" +
    "\001\002\000\010\004\044\011\043\071\045\001\002\000" +
    "\016\003\uffce\011\323\036\317\037\321\045\322\064\uffce" +
    "\001\002\000\004\037\344\001\002\000\006\003\uffcf\064" +
    "\uffcf\001\002\000\010\004\044\011\043\071\045\001\002" +
    "\000\014\004\044\011\043\062\072\063\075\071\045\001" +
    "\002\000\016\003\uffce\011\323\036\317\037\321\045\322" +
    "\064\uffce\001\002\000\006\003\uffca\064\uffca\001\002\000" +
    "\012\003\uffcd\062\072\063\075\064\uffcd\001\002\000\004" +
    "\070\327\001\002\000\020\003\055\004\057\005\054\006" +
    "\060\007\056\010\061\057\062\001\002\000\012\003\uffbb" +
    "\062\072\063\075\064\uffbb\001\002\000\006\003\uffcc\064" +
    "\uffcc\001\002\000\010\004\334\011\335\055\uffc6\001\002" +
    "\000\004\055\336\001\002\000\006\055\uffc4\070\uffc4\001" +
    "\002\000\006\055\uffc5\070\uffc5\001\002\000\010\004\044" +
    "\011\043\071\045\001\002\000\010\004\334\011\335\070" +
    "\uffc6\001\002\000\004\070\341\001\002\000\010\004\044" +
    "\011\043\071\045\001\002\000\016\003\uffce\011\323\036" +
    "\317\037\321\045\322\064\uffce\001\002\000\006\003\uffcb" +
    "\064\uffcb\001\002\000\010\004\044\011\043\071\045\001" +
    "\002\000\010\004\334\011\335\055\uffc6\001\002\000\004" +
    "\055\347\001\002\000\010\004\044\011\043\071\045\001" +
    "\002\000\004\070\351\001\002\000\010\004\044\011\043" +
    "\071\045\001\002\000\006\003\uffc9\064\uffc9\001\002\000" +
    "\004\055\354\001\002\000\004\004\142\001\002\000\004" +
    "\046\356\001\002\000\004\004\357\001\002\000\006\003" +
    "\uffa4\064\uffa4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\016\002\010\004\014\005\025\006\005\022" +
    "\006\040\020\001\001\000\004\042\352\001\001\000\010" +
    "\030\041\031\313\034\046\001\001\000\004\003\312\001" +
    "\001\000\004\003\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\151\006\005\022\006\040\020" +
    "\001\001\000\002\001\001\000\014\004\150\005\025\006" +
    "\005\022\006\040\020\001\001\000\004\042\133\001\001" +
    "\000\004\003\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\041\031\045\034\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\112\001\001\000\004\033" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\067\001\001\000\010\025\073\026\070" +
    "\027\072\001\001\000\002\001\001\000\010\030\041\031" +
    "\101\034\046\001\001\000\004\025\100\001\001\000\002" +
    "\001\001\000\010\030\041\031\075\034\046\001\001\000" +
    "\002\001\001\000\004\024\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\114" +
    "\001\001\000\002\001\001\000\010\030\041\031\116\034" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\122\001\001\000\010\025\073\026" +
    "\123\027\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\151\006\005\022\006\040\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\156\001\001\000\004\016" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\170\037\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\210\001\001\000\004\015\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\041\031\212\034\046\001\001\000\002\001" +
    "\001\000\006\020\220\021\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\226\024" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\246\012\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\247\001\001\000\002\001" +
    "\001\000\006\011\250\013\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\260\001\001\000\002\001\001\000\004\007\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\041\031\315\034\046\001\001" +
    "\000\004\032\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\041\031\331\034\046\001\001\000\014" +
    "\025\073\027\324\030\041\031\325\034\046\001\001\000" +
    "\004\032\323\001\001\000\002\001\001\000\004\025\100" +
    "\001\001\000\002\001\001\000\004\024\327\001\001\000" +
    "\010\025\073\026\330\027\072\001\001\000\002\001\001" +
    "\000\004\036\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\041\031\336\034\046" +
    "\001\001\000\004\036\337\001\001\000\002\001\001\000" +
    "\010\030\041\031\341\034\046\001\001\000\004\032\342" +
    "\001\001\000\002\001\001\000\010\030\041\031\344\034" +
    "\046\001\001\000\004\036\345\001\001\000\002\001\001" +
    "\000\010\030\041\031\347\034\046\001\001\000\002\001" +
    "\001\000\010\030\041\031\351\034\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserSQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserSQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserSQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private LexemaSQL lexema;

	  public ParserSQL(LexemaSQL Lexema) {
        super(Lexema);
        this.lexema = Lexema;
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
        System.out.println(this.listError.get(0).toString());
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserSQL$actions {
  private final ParserSQL parser;

  /** Constructor */
  CUP$ParserSQL$actions(ParserSQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action_part00000000(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserSQL$result;

      /* select the action based on the action number */
      switch (CUP$ParserSQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		RESULT = start_val;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserSQL$parser.done_parsing();
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= varias_etiquetas_usar 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error varias_etiquetas_usar 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // varias_etiquetas_usar ::= varias_etiquetas_usar etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("varias_etiquetas_usar",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varias_etiquetas_usar ::= etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("varias_etiquetas_usar",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // etiqueta_inicial ::= use_ddl finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // etiqueta_inicial ::= use_dml finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // etiqueta_inicial ::= use_dcl finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // finalizacion_punto_y_coma ::= PERIOD_AND_AS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("finalizacion_punto_y_coma",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // finalizacion_punto_y_coma ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("finalizacion_punto_y_coma",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // use_ddl ::= CREATE optimization_create 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // use_ddl ::= USE SCHEMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // use_ddl ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P accion_update 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // use_ddl ::= ALTER TABLE IDENTIFICADOR accion_alter space_use_alter IDENTIFICADOR type_optional_alter 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // use_ddl ::= DROP TABLE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optimization_create ::= TABLE IDENTIFICADOR OPEN_P various_attributes CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",31, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optimization_create ::= SCHEMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",31, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optimization_create ::= USER IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",31, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // various_attributes ::= various_attributes COMMA atributos_tabla 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("various_attributes",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // various_attributes ::= atributos_tabla 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("various_attributes",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // atributos_tabla ::= IDENTIFICADOR type_attribute type_privacy 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributos_tabla",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atributos_tabla ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributos_tabla",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-9)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // accion_update ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // accion_update ::= ON UPDATE accion_fk 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // accion_update ::= ON DELETE accion_fk 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // accion_fk ::= SET 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_fk",11, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_privacy ::= PRIMARY KEY attribute_null 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_privacy ::= attribute_null 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_privacy ::= NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // attribute_null ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // attribute_null ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // attribute_null ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_attribute ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_attribute ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_attribute ::= INT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_attribute ::= VARCHAR OPEN_P NUMEBERS CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_attribute ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_attribute ::= DATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_optional_alter ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",29, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_optional_alter ::= type_attribute 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",29, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_optional_alter ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P accion_update 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",29, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // accion_alter ::= ADD 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // accion_alter ::= DROP 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // accion_alter ::= MODIFY 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // space_use_alter ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("space_use_alter",12, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // space_use_alter ::= COLUMN 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("space_use_alter",12, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // use_dml ::= INSERT INTO select_parameters OPEN_P several_parameters CLOSE_P VALUES OPEN_P insert_parameters CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-9)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // use_dml ::= UPDATE select_parameters SET loop_set WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-8)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // use_dml ::= DELETE FROM select_parameters WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-7)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // use_dml ::= SELECT select_parameters FROM select_parameters continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // continuation_select ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // continuation_select ::= WHERE logical_connector_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // continuation_select ::= WHERE select_parameters EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // continuation_select ::= JOIN select_parameters possibility_alias ON select_parameters possibility_alias EQUAL select_parameters continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-8)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // continuation_select ::= ALIAS continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // continuation_select ::= LEFT JOIN select_parameters possibility_alias ON select_parameters EQUAL select_parameters 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-7)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // loop_set ::= loop_set COMMA IDENTIFICADOR EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("loop_set",27, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // loop_set ::= IDENTIFICADOR EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("loop_set",27, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // possibility_alias ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("possibility_alias",28, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // possibility_alias ::= ALIAS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("possibility_alias",28, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // possibility_alias ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("possibility_alias",28, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // select_parameters ::= identificador_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("select_parameters",23, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // identificador_loop ::= identificador_loop COMMA optimization_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_loop",22, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // identificador_loop ::= optimization_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_loop",22, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // optimization_loop ::= IDENTIFICADOR attribute_possibility 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // optimization_loop ::= ALIAS attribute_possibility 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // optimization_loop ::= ASTERISK 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // attribute_possibility ::= POINT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_possibility",25, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // attribute_possibility ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_possibility",25, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // continuation_UPDATE ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_UPDATE",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // continuation_UPDATE ::= logical_connector_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_UPDATE",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logical_connector ::= AND select_parameters EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector",19, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logical_connector ::= OR select_parameters EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector",19, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logical_connector_loop ::= logical_connector_loop logical_connector 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector_loop",21, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logical_connector_loop ::= logical_connector 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector_loop",21, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // insert_parameters ::= insert_parameters COMMA insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_parameters",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // insert_parameters ::= insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_parameters",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // insert_value ::= NUMEBERS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // insert_value ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // insert_value ::= CHARS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // insert_value ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // insert_value ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // insert_value ::= NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // insert_value ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // several_parameters ::= several_parameters COMMA attribute_insert 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("several_parameters",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // several_parameters ::= attribute_insert 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("several_parameters",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // attribute_insert ::= CHARS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // attribute_insert ::= NUMEBERS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // attribute_insert ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // attribute_insert ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // attribute_insert ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // use_dcl ::= GRANT option_grant ON identificador_or_point TO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dcl",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // use_dcl ::= REVOKE option_grant ON identificador_or_point FROM IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dcl",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // use_dcl ::= DECLARE IDENTIFICADOR type_attribute 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dcl",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // identificador_or_point ::= IDENTIFICADOR POINT atributo_or_all 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_or_point",34, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // identificador_or_point ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_or_point",34, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // option_grant ::= INSERT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // option_grant ::= SELECT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // option_grant ::= UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // option_grant ::= DELETE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // option_grant ::= REFERENCES 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // atributo_or_all ::= ASTERISK 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributo_or_all",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // atributo_or_all ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributo_or_all",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserSQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
              return CUP$ParserSQL$do_action_part00000000(
                               CUP$ParserSQL$act_num,
                               CUP$ParserSQL$parser,
                               CUP$ParserSQL$stack,
                               CUP$ParserSQL$top);
    }
}

}
