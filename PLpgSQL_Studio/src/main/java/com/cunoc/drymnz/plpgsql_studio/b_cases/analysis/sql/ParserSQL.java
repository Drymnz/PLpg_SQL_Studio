
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.sql;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ReportErrorInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.Token;
import com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.InterpretSyntaticError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserSQL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymSQL.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserSQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserSQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserSQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\004\000\002\003\003\000" +
    "\002\003\003\000\002\006\005\000\002\006\010\000\002" +
    "\006\005\000\002\006\015\000\002\006\011\000\002\006" +
    "\005\000\002\012\005\000\002\012\003\000\002\007\005" +
    "\000\002\007\014\000\002\014\002\000\002\014\005\000" +
    "\002\014\005\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\011\005\000\002\011\003\000\002\011" +
    "\003\000\002\013\004\000\002\013\003\000\002\013\002" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\006\000\002\021\002\000\002\021\003\000\002" +
    "\021\015\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\017\003\000\002\017\003\000\002\024\014" +
    "\000\002\024\015\000\002\024\012\000\002\024\007\000" +
    "\002\034\002\000\002\034\004\000\002\034\007\000\002" +
    "\034\010\000\002\034\004\000\002\034\011\000\002\033" +
    "\003\000\002\033\003\000\002\032\006\000\002\032\004" +
    "\000\002\035\004\000\002\035\002\000\002\030\002\000" +
    "\002\030\003\000\002\027\006\000\002\027\006\000\002" +
    "\031\004\000\002\031\003\000\002\025\005\000\002\025" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\022\005\000\002\022\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\002\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\030\002\ufffe\003\016\014\022\016\005\021" +
    "\007\023\004\026\014\036\017\037\020\040\010\041\015" +
    "\001\002\000\004\020\301\001\002\000\006\017\242\020" +
    "\243\001\002\000\006\003\166\062\170\001\002\000\004" +
    "\020\203\001\002\000\004\004\171\001\002\000\006\003" +
    "\166\062\170\001\002\000\004\002\165\001\002\000\026" +
    "\002\000\014\022\016\005\021\007\023\004\026\014\036" +
    "\017\037\020\040\010\041\015\001\002\000\004\017\163" +
    "\001\002\000\004\044\154\001\002\000\024\014\022\016" +
    "\005\021\007\023\004\026\014\036\017\037\020\040\010" +
    "\041\015\001\002\000\006\004\076\067\077\001\002\000" +
    "\004\045\043\001\002\000\026\002\ufffc\014\ufffc\016\ufffc" +
    "\021\ufffc\023\ufffc\026\ufffc\036\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\001\002\000\004\024\023\001\002\000\004\063\024" +
    "\001\002\000\004\004\025\001\002\000\004\064\026\001" +
    "\002\000\004\013\027\001\002\000\004\004\030\001\002" +
    "\000\004\063\031\001\002\000\004\004\032\001\002\000" +
    "\004\064\033\001\002\000\010\003\uffed\053\034\062\uffed" +
    "\001\002\000\006\040\037\041\036\001\002\000\006\003" +
    "\ufff4\062\ufff4\001\002\000\004\046\041\001\002\000\004" +
    "\046\041\001\002\000\006\003\uffec\062\uffec\001\002\000" +
    "\006\003\uffea\062\uffea\001\002\000\006\003\uffeb\062\uffeb" +
    "\001\002\000\004\004\044\001\002\000\004\063\045\001" +
    "\002\000\016\003\047\004\050\005\046\006\051\064\uffb1" +
    "\065\uffb1\001\002\000\006\064\uffb3\065\uffb3\001\002\000" +
    "\006\064\uffb0\065\uffb0\001\002\000\006\064\uffb2\065\uffb2" +
    "\001\002\000\006\064\uffb4\065\uffb4\001\002\000\006\064" +
    "\055\065\054\001\002\000\006\064\uffb5\065\uffb5\001\002" +
    "\000\016\003\047\004\050\005\046\006\051\064\uffb1\065" +
    "\uffb1\001\002\000\004\042\056\001\002\000\004\063\057" +
    "\001\002\000\020\003\067\004\070\005\062\006\064\007" +
    "\060\010\066\055\063\001\002\000\020\003\uffba\043\uffba" +
    "\060\uffba\061\uffba\062\uffba\064\uffba\065\uffba\001\002\000" +
    "\006\064\072\065\071\001\002\000\020\003\uffbd\043\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\064\uffbd\065\uffbd\001\002\000" +
    "\020\003\uffb8\043\uffb8\060\uffb8\061\uffb8\062\uffb8\064\uffb8" +
    "\065\uffb8\001\002\000\020\003\uffbb\043\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\064\uffbb\065\uffbb\001\002\000\006\064\uffbe" +
    "\065\uffbe\001\002\000\020\003\uffb9\043\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\064\uffb9\065\uffb9\001\002\000\020\003\uffb7" +
    "\043\uffb7\060\uffb7\061\uffb7\062\uffb7\064\uffb7\065\uffb7\001" +
    "\002\000\020\003\uffbc\043\uffbc\060\uffbc\061\uffbc\062\uffbc" +
    "\064\uffbc\065\uffbc\001\002\000\020\003\067\004\070\005" +
    "\062\006\064\007\060\010\066\055\063\001\002\000\006" +
    "\003\uffd5\062\uffd5\001\002\000\006\064\uffbf\065\uffbf\001" +
    "\002\000\006\064\uffb6\065\uffb6\001\002\000\014\003\uffcb" +
    "\044\uffcb\062\uffcb\065\147\066\uffcb\001\002\000\016\003" +
    "\uffc6\044\uffc6\062\uffc6\065\uffc6\066\uffc6\070\144\001\002" +
    "\000\012\003\uffca\044\uffca\062\uffca\066\uffca\001\002\000" +
    "\004\044\101\001\002\000\004\004\102\001\002\000\016" +
    "\003\uffd1\011\107\034\103\035\105\043\106\062\uffd1\001" +
    "\002\000\004\035\136\001\002\000\006\003\uffd2\062\uffd2" +
    "\001\002\000\004\004\131\001\002\000\010\004\112\060" +
    "\111\061\115\001\002\000\016\003\uffd1\011\107\034\103" +
    "\035\105\043\106\062\uffd1\001\002\000\006\003\uffcd\062" +
    "\uffcd\001\002\000\004\004\126\001\002\000\004\066\122" +
    "\001\002\000\012\003\uffd0\060\111\061\115\062\uffd0\001" +
    "\002\000\012\003\uffc0\060\uffc0\061\uffc0\062\uffc0\001\002" +
    "\000\004\004\116\001\002\000\004\066\117\001\002\000" +
    "\020\003\067\004\070\005\062\006\064\007\060\010\066" +
    "\055\063\001\002\000\012\003\uffc2\060\uffc2\061\uffc2\062" +
    "\uffc2\001\002\000\012\003\uffc1\060\uffc1\061\uffc1\062\uffc1" +
    "\001\002\000\020\003\067\004\070\005\062\006\064\007" +
    "\060\010\066\055\063\001\002\000\012\003\uffc5\060\111" +
    "\061\115\062\uffc5\001\002\000\006\003\uffcf\062\uffcf\001" +
    "\002\000\012\003\uffc4\060\111\061\115\062\uffc4\001\002" +
    "\000\004\066\127\001\002\000\020\003\067\004\070\005" +
    "\062\006\064\007\060\010\066\055\063\001\002\000\012" +
    "\003\uffc3\060\uffc3\061\uffc3\062\uffc3\001\002\000\004\053" +
    "\132\001\002\000\006\004\076\067\077\001\002\000\004" +
    "\066\134\001\002\000\006\004\076\067\077\001\002\000" +
    "\006\003\uffce\062\uffce\001\002\000\004\004\137\001\002" +
    "\000\004\053\140\001\002\000\006\004\076\067\077\001" +
    "\002\000\004\066\142\001\002\000\006\004\076\067\077" +
    "\001\002\000\006\003\uffcc\062\uffcc\001\002\000\004\004" +
    "\146\001\002\000\014\003\uffc8\044\uffc8\062\uffc8\065\uffc8" +
    "\066\uffc8\001\002\000\014\003\uffc7\044\uffc7\062\uffc7\065" +
    "\uffc7\066\uffc7\001\002\000\004\004\150\001\002\000\016" +
    "\003\uffc6\044\uffc6\062\uffc6\065\uffc6\066\uffc6\070\144\001" +
    "\002\000\014\003\uffc9\044\uffc9\062\uffc9\065\uffc9\066\uffc9" +
    "\001\002\000\026\002\uffff\014\022\016\005\021\007\023" +
    "\004\026\014\036\017\037\020\040\010\041\015\001\002" +
    "\000\026\002\ufffd\014\ufffd\016\ufffd\021\ufffd\023\ufffd\026" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\001\002\000\004" +
    "\004\155\001\002\000\004\043\156\001\002\000\004\004" +
    "\157\001\002\000\004\066\160\001\002\000\020\003\067" +
    "\004\070\005\062\006\064\007\060\010\066\055\063\001" +
    "\002\000\012\003\uffc5\060\111\061\115\062\uffc5\001\002" +
    "\000\006\003\uffd3\062\uffd3\001\002\000\004\004\164\001" +
    "\002\000\006\003\ufff5\062\ufff5\001\002\000\004\002\001" +
    "\001\002\000\026\002\ufff8\014\ufff8\016\ufff8\021\ufff8\023" +
    "\ufff8\026\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\001\002" +
    "\000\026\002\ufffb\014\ufffb\016\ufffb\021\ufffb\023\ufffb\026" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\001\002\000\026" +
    "\002\ufff9\014\ufff9\016\ufff9\021\ufff9\023\ufff9\026\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\001\002\000\004\046\172" +
    "\001\002\000\004\004\173\001\002\000\004\066\174\001" +
    "\002\000\020\003\067\004\070\005\062\006\064\007\060" +
    "\010\066\055\063\001\002\000\004\043\176\001\002\000" +
    "\004\004\177\001\002\000\004\066\200\001\002\000\020" +
    "\003\067\004\070\005\062\006\064\007\060\010\066\055" +
    "\063\001\002\000\012\003\uffc5\060\111\061\115\062\uffc5" +
    "\001\002\000\006\003\uffd4\062\uffd4\001\002\000\004\004" +
    "\204\001\002\000\010\023\207\025\206\027\210\001\002" +
    "\000\006\012\212\022\213\001\002\000\006\012\uffda\022" +
    "\uffda\001\002\000\006\012\uffd9\022\uffd9\001\002\000\006" +
    "\012\uffd8\022\uffd8\001\002\000\004\004\214\001\002\000" +
    "\004\004\uffd7\001\002\000\004\004\uffd6\001\002\000\020" +
    "\003\uffdd\014\217\030\222\031\216\032\221\033\223\062" +
    "\uffdd\001\002\000\006\003\uffdc\062\uffdc\001\002\000\020" +
    "\003\uffe1\015\uffe1\054\uffe1\055\uffe1\062\uffe1\064\uffe1\065" +
    "\uffe1\001\002\000\004\024\227\001\002\000\006\003\ufff3" +
    "\062\ufff3\001\002\000\020\003\uffe0\015\uffe0\054\uffe0\055" +
    "\uffe0\062\uffe0\064\uffe0\065\uffe0\001\002\000\004\063\224" +
    "\001\002\000\020\003\uffdf\015\uffdf\054\uffdf\055\uffdf\062" +
    "\uffdf\064\uffdf\065\uffdf\001\002\000\004\005\225\001\002" +
    "\000\004\064\226\001\002\000\020\003\uffde\015\uffde\054" +
    "\uffde\055\uffde\062\uffde\064\uffde\065\uffde\001\002\000\004" +
    "\063\230\001\002\000\004\004\231\001\002\000\004\064" +
    "\232\001\002\000\004\013\233\001\002\000\004\004\234" +
    "\001\002\000\004\063\235\001\002\000\004\004\236\001" +
    "\002\000\004\064\237\001\002\000\010\003\uffed\053\034" +
    "\062\uffed\001\002\000\006\003\uffdb\062\uffdb\001\002\000" +
    "\026\002\ufffa\014\ufffa\016\ufffa\021\ufffa\023\ufffa\026\ufffa" +
    "\036\ufffa\037\ufffa\040\ufffa\041\ufffa\001\002\000\004\004" +
    "\300\001\002\000\004\004\244\001\002\000\004\063\245" +
    "\001\002\000\006\004\250\014\246\001\002\000\004\024" +
    "\267\001\002\000\006\064\265\065\264\001\002\000\012" +
    "\030\222\031\216\032\221\033\223\001\002\000\006\064" +
    "\ufff0\065\ufff0\001\002\000\016\003\257\015\253\054\255" +
    "\055\260\064\uffe2\065\uffe2\001\002\000\004\024\262\001" +
    "\002\000\006\064\uffef\065\uffef\001\002\000\004\055\261" +
    "\001\002\000\006\064\uffe6\065\uffe6\001\002\000\006\064" +
    "\uffe3\065\uffe3\001\002\000\006\064\uffe5\065\uffe5\001\002" +
    "\000\006\064\uffe4\065\uffe4\001\002\000\012\003\257\054" +
    "\255\064\uffe2\065\uffe2\001\002\000\006\064\uffe7\065\uffe7" +
    "\001\002\000\006\004\250\014\246\001\002\000\006\003" +
    "\ufff6\062\ufff6\001\002\000\006\064\ufff1\065\ufff1\001\002" +
    "\000\004\063\270\001\002\000\004\004\271\001\002\000" +
    "\004\064\272\001\002\000\004\013\273\001\002\000\004" +
    "\004\274\001\002\000\004\063\275\001\002\000\004\004" +
    "\276\001\002\000\004\064\277\001\002\000\006\064\uffee" +
    "\065\uffee\001\002\000\006\003\ufff7\062\ufff7\001\002\000" +
    "\004\004\302\001\002\000\006\003\ufff2\062\ufff2\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\014\002\011\004\012\005\020\006\010\024" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\166\001\001\000\002\001\001\000\010\005\152" +
    "\006\010\024\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\151\005\020\006\010\024\005\001\001" +
    "\000\006\032\074\033\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\041\001\001\000\004\015\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\051\023\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\060\026\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\113\031\112\001\001\000\004\034\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\122\001\001\000\010" +
    "\027\113\030\123\031\124\001\001\000\002\001\001\000" +
    "\004\027\120\001\001\000\002\001\001\000\004\026\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\074\033\132\001\001\000\002\001\001\000\006\032\074" +
    "\033\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\074\033\140\001\001\000\002" +
    "\001\001\000\006\032\074\033\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\150\001\001\000\002\001" +
    "\001\000\010\005\152\006\010\024\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\160\001\001\000\010" +
    "\027\113\030\161\031\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\200\001\001\000\010\027\113\030\201" +
    "\031\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\204\001\001\000\004\017\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\214" +
    "\021\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\250\012\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\251\001\001\000\002\001\001\000\006" +
    "\011\253\013\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\262\001" +
    "\001\000\002\001\001\000\004\007\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserSQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserSQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserSQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private LexemaSQL lexema;

	  public ParserSQL(LexemaSQL Lexema) {
        super(Lexema);
        this.lexema = Lexema;
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
        System.out.println(this.listError.get(0).toString());
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserSQL$actions {
  private final ParserSQL parser;

  /** Constructor */
  CUP$ParserSQL$actions(ParserSQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action_part00000000(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserSQL$result;

      /* select the action based on the action number */
      switch (CUP$ParserSQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		RESULT = start_val;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserSQL$parser.done_parsing();
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= varias_etiquetas_usar 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error varias_etiquetas_usar 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // varias_etiquetas_usar ::= varias_etiquetas_usar etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("varias_etiquetas_usar",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varias_etiquetas_usar ::= etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("varias_etiquetas_usar",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // etiqueta_inicial ::= use_ddl finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // etiqueta_inicial ::= use_dml finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // finalizacion_punto_y_coma ::= PERIOD_AND_AS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("finalizacion_punto_y_coma",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // finalizacion_punto_y_coma ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("finalizacion_punto_y_coma",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // use_ddl ::= CREATE SCHEMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // use_ddl ::= CREATE TABLE IDENTIFICADOR OPEN_P various_attributes CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // use_ddl ::= USE SCHEMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // use_ddl ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P accion_update 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // use_ddl ::= ALTER TABLE IDENTIFICADOR accion_alter space_use_alter IDENTIFICADOR type_optional_alter 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // use_ddl ::= DROP TABLE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // various_attributes ::= various_attributes COMMA atributos_tabla 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("various_attributes",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // various_attributes ::= atributos_tabla 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("various_attributes",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atributos_tabla ::= IDENTIFICADOR type_attribute type_privacy 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributos_tabla",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atributos_tabla ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributos_tabla",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-9)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // accion_update ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // accion_update ::= ON UPDATE accion_fk 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // accion_update ::= ON DELETE accion_fk 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // accion_fk ::= SET 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_fk",11, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // set_fk ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("set_fk",12, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // set_fk ::= NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("set_fk",12, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_privacy ::= PRIMARY KEY attribute_null 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_privacy ::= attribute_null 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_privacy ::= NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // attribute_null ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // attribute_null ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // attribute_null ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_attribute ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_attribute ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_attribute ::= INT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_attribute ::= VARCHAR OPEN_P NUMEBERS CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_optional_alter ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_optional_alter ::= type_attribute 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_optional_alter ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P accion_update 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // accion_alter ::= ADD 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // accion_alter ::= DROP 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // accion_alter ::= MODIFY 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // space_use_alter ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("space_use_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // space_use_alter ::= COLUMN 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("space_use_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // use_dml ::= INSERT INTO IDENTIFICADOR OPEN_P several_parameters CLOSE_P VALUES OPEN_P insert_parameters CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-9)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // use_dml ::= UPDATE IDENTIFICADOR SET IDENTIFICADOR EQUAL insert_value WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // use_dml ::= DELETE FROM IDENTIFICADOR WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-7)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // use_dml ::= SELECT select_parameters FROM IDENTIFICADOR continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // continuation_select ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // continuation_select ::= WHERE logical_connector_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // continuation_select ::= WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // continuation_select ::= JOIN IDENTIFICADOR ON select_parameters EQUAL select_parameters 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // continuation_select ::= ALIAS continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // continuation_select ::= LEFT JOIN IDENTIFICADOR ON select_parameters EQUAL select_parameters 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // select_parameters ::= identificador_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("select_parameters",25, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // select_parameters ::= ASTERISK 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("select_parameters",25, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // identificador_loop ::= identificador_loop COMMA IDENTIFICADOR attribute_possibility 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_loop",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // identificador_loop ::= IDENTIFICADOR attribute_possibility 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_loop",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // attribute_possibility ::= POINT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_possibility",27, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // attribute_possibility ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_possibility",27, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // continuation_UPDATE ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_UPDATE",22, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // continuation_UPDATE ::= logical_connector_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_UPDATE",22, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // logical_connector ::= AND IDENTIFICADOR EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector",21, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // logical_connector ::= OR IDENTIFICADOR EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector",21, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // logical_connector_loop ::= logical_connector_loop logical_connector 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector_loop",23, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // logical_connector_loop ::= logical_connector 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector_loop",23, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // insert_parameters ::= insert_parameters COMMA insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_parameters",19, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // insert_parameters ::= insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_parameters",19, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // insert_value ::= NUMEBERS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // insert_value ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // insert_value ::= CHARS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // insert_value ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // insert_value ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // insert_value ::= NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // insert_value ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // several_parameters ::= several_parameters COMMA attribute_insert 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("several_parameters",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // several_parameters ::= attribute_insert 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("several_parameters",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // attribute_insert ::= CHARS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // attribute_insert ::= NUMEBERS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // attribute_insert ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // attribute_insert ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // attribute_insert ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserSQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
              return CUP$ParserSQL$do_action_part00000000(
                               CUP$ParserSQL$act_num,
                               CUP$ParserSQL$parser,
                               CUP$ParserSQL$stack,
                               CUP$ParserSQL$top);
    }
}

}
