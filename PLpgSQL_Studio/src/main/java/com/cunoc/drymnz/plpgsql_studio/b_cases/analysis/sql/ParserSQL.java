
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.sql;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ReportErrorInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.Token;
import com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.InterpretSyntaticError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserSQL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymSQL.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserSQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserSQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserSQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\003\003\000\002\003\003\000\002\006\004\000\002" +
    "\006\005\000\002\006\015\000\002\006\011\000\002\006" +
    "\005\000\002\037\007\000\002\037\004\000\002\037\004" +
    "\000\002\012\005\000\002\012\003\000\002\007\005\000" +
    "\002\007\014\000\002\014\002\000\002\014\005\000\002" +
    "\014\005\000\002\015\003\000\002\011\005\000\002\011" +
    "\003\000\002\011\003\000\002\013\004\000\002\013\003" +
    "\000\002\013\002\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\006\000\002\010\003\000\002" +
    "\010\003\000\002\035\002\000\002\035\003\000\002\035" +
    "\015\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\016\003\000\002\016\003\000\002\022\014\000" +
    "\002\022\015\000\002\022\012\000\002\022\007\000\002" +
    "\032\002\000\002\032\004\000\002\032\007\000\002\032" +
    "\010\000\002\032\004\000\002\032\011\000\002\031\003" +
    "\000\002\030\005\000\002\030\003\000\002\034\004\000" +
    "\002\034\004\000\002\034\003\000\002\033\004\000\002" +
    "\033\002\000\002\026\002\000\002\026\003\000\002\025" +
    "\006\000\002\025\006\000\002\027\004\000\002\027\003" +
    "\000\002\023\005\000\002\023\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\020" +
    "\005\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\002\000\002\021\003\000" +
    "\002\036\010\000\002\036\010\000\002\036\005\000\002" +
    "\042\005\000\002\042\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\036\002\ufffe\003\017\014\010\016\012\021" +
    "\014\023\016\026\022\040\005\041\013\042\024\043\023" +
    "\051\004\052\020\061\025\001\002\000\014\013\130\040" +
    "\132\041\125\042\131\043\126\001\002\000\010\004\044" +
    "\011\043\071\045\001\002\000\006\003\122\064\124\001" +
    "\002\000\006\003\122\064\124\001\002\000\004\024\273" +
    "\001\002\000\004\002\272\001\002\000\010\017\231\020" +
    "\232\053\233\001\002\000\004\047\205\001\002\000\004" +
    "\020\150\001\002\000\034\002\000\014\010\016\012\021" +
    "\014\023\016\026\022\040\005\041\013\042\024\043\023" +
    "\051\004\052\020\061\025\001\002\000\004\020\146\001" +
    "\002\000\032\014\010\016\012\021\014\023\016\026\022" +
    "\040\005\041\013\042\024\043\023\051\004\052\020\061" +
    "\025\001\002\000\014\013\130\040\132\041\125\042\131" +
    "\043\126\001\002\000\006\003\122\064\124\001\002\000" +
    "\004\017\120\001\002\000\004\046\111\001\002\000\010" +
    "\004\044\011\043\071\045\001\002\000\004\004\027\001" +
    "\002\000\034\002\ufffc\014\ufffc\016\ufffc\021\ufffc\023\ufffc" +
    "\026\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\051\ufffc\052" +
    "\ufffc\061\ufffc\001\002\000\016\030\033\031\030\032\034" +
    "\033\036\034\035\035\032\001\002\000\020\003\uffe0\015" +
    "\uffe0\056\uffe0\057\uffe0\064\uffe0\066\uffe0\067\uffe0\001\002" +
    "\000\006\003\uffa8\064\uffa8\001\002\000\020\003\uffdb\015" +
    "\uffdb\056\uffdb\057\uffdb\064\uffdb\066\uffdb\067\uffdb\001\002" +
    "\000\004\065\037\001\002\000\020\003\uffdf\015\uffdf\056" +
    "\uffdf\057\uffdf\064\uffdf\066\uffdf\067\uffdf\001\002\000\020" +
    "\003\uffdc\015\uffdc\056\uffdc\057\uffdc\064\uffdc\066\uffdc\067" +
    "\uffdc\001\002\000\020\003\uffde\015\uffde\056\uffde\057\uffde" +
    "\064\uffde\066\uffde\067\uffde\001\002\000\004\005\040\001" +
    "\002\000\004\066\041\001\002\000\020\003\uffdd\015\uffdd" +
    "\056\uffdd\057\uffdd\064\uffdd\066\uffdd\067\uffdd\001\002\000" +
    "\032\003\uffc8\011\uffc8\036\uffc8\037\uffc8\045\uffc8\046\uffc8" +
    "\050\uffc8\055\uffc8\064\uffc8\065\uffc8\067\107\070\uffc8\001" +
    "\002\000\034\003\uffc1\011\uffc1\036\uffc1\037\uffc1\045\uffc1" +
    "\046\uffc1\050\uffc1\055\uffc1\064\uffc1\065\uffc1\067\uffc1\070" +
    "\uffc1\072\103\001\002\000\034\003\uffc1\011\uffc1\036\uffc1" +
    "\037\uffc1\045\uffc1\046\uffc1\050\uffc1\055\uffc1\064\uffc1\065" +
    "\uffc1\067\uffc1\070\uffc1\072\103\001\002\000\032\003\uffc3" +
    "\011\uffc3\036\uffc3\037\uffc3\045\uffc3\046\uffc3\050\uffc3\055" +
    "\uffc3\064\uffc3\065\uffc3\067\uffc3\070\uffc3\001\002\000\004" +
    "\050\050\001\002\000\032\003\uffc6\011\uffc6\036\uffc6\037" +
    "\uffc6\045\uffc6\046\uffc6\050\uffc6\055\uffc6\064\uffc6\065\uffc6" +
    "\067\uffc6\070\uffc6\001\002\000\004\004\051\001\002\000" +
    "\004\070\052\001\002\000\020\003\054\004\056\005\053" +
    "\006\060\007\055\010\057\057\061\001\002\000\020\003" +
    "\uffb8\045\uffb8\062\uffb8\063\uffb8\064\uffb8\066\uffb8\067\uffb8" +
    "\001\002\000\020\003\uffb2\045\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\066\uffb2\067\uffb2\001\002\000\020\003\uffb5\045\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\066\uffb5\067\uffb5\001\002\000" +
    "\020\003\uffb7\045\uffb7\062\uffb7\063\uffb7\064\uffb7\066\uffb7" +
    "\067\uffb7\001\002\000\020\003\uffb4\045\uffb4\062\uffb4\063" +
    "\uffb4\064\uffb4\066\uffb4\067\uffb4\001\002\000\020\003\uffb6" +
    "\045\uffb6\062\uffb6\063\uffb6\064\uffb6\066\uffb6\067\uffb6\001" +
    "\002\000\020\003\uffb3\045\uffb3\062\uffb3\063\uffb3\064\uffb3" +
    "\066\uffb3\067\uffb3\001\002\000\004\045\063\001\002\000" +
    "\004\004\064\001\002\000\004\070\065\001\002\000\020" +
    "\003\054\004\056\005\053\006\060\007\055\010\057\057" +
    "\061\001\002\000\012\003\uffc0\062\070\063\073\064\uffc0" +
    "\001\002\000\006\003\uffd1\064\uffd1\001\002\000\004\004" +
    "\100\001\002\000\012\003\uffbf\062\070\063\073\064\uffbf" +
    "\001\002\000\012\003\uffbb\062\uffbb\063\uffbb\064\uffbb\001" +
    "\002\000\004\004\074\001\002\000\004\070\075\001\002" +
    "\000\020\003\054\004\056\005\053\006\060\007\055\010" +
    "\057\057\061\001\002\000\012\003\uffbd\062\uffbd\063\uffbd" +
    "\064\uffbd\001\002\000\012\003\uffbc\062\uffbc\063\uffbc\064" +
    "\uffbc\001\002\000\004\070\101\001\002\000\020\003\054" +
    "\004\056\005\053\006\060\007\055\010\057\057\061\001" +
    "\002\000\012\003\uffbe\062\uffbe\063\uffbe\064\uffbe\001\002" +
    "\000\004\004\105\001\002\000\032\003\uffc5\011\uffc5\036" +
    "\uffc5\037\uffc5\045\uffc5\046\uffc5\050\uffc5\055\uffc5\064\uffc5" +
    "\065\uffc5\067\uffc5\070\uffc5\001\002\000\032\003\uffc2\011" +
    "\uffc2\036\uffc2\037\uffc2\045\uffc2\046\uffc2\050\uffc2\055\uffc2" +
    "\064\uffc2\065\uffc2\067\uffc2\070\uffc2\001\002\000\032\003" +
    "\uffc4\011\uffc4\036\uffc4\037\uffc4\045\uffc4\046\uffc4\050\uffc4" +
    "\055\uffc4\064\uffc4\065\uffc4\067\uffc4\070\uffc4\001\002\000" +
    "\010\004\044\011\043\071\045\001\002\000\032\003\uffc7" +
    "\011\uffc7\036\uffc7\037\uffc7\045\uffc7\046\uffc7\050\uffc7\055" +
    "\uffc7\064\uffc7\065\uffc7\067\uffc7\070\uffc7\001\002\000\010" +
    "\004\044\011\043\071\045\001\002\000\004\045\113\001" +
    "\002\000\004\004\114\001\002\000\004\070\115\001\002" +
    "\000\020\003\054\004\056\005\053\006\060\007\055\010" +
    "\057\057\061\001\002\000\012\003\uffc0\062\070\063\073" +
    "\064\uffc0\001\002\000\006\003\uffd0\064\uffd0\001\002\000" +
    "\004\004\121\001\002\000\006\003\ufff5\064\ufff5\001\002" +
    "\000\034\002\ufff7\014\ufff7\016\ufff7\021\ufff7\023\ufff7\026" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\051\ufff7\052\ufff7" +
    "\061\ufff7\001\002\000\034\002\ufff9\014\ufff9\016\ufff9\021" +
    "\ufff9\023\ufff9\026\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\051\ufff9\052\ufff9\061\ufff9\001\002\000\034\002\ufff8\014" +
    "\ufff8\016\ufff8\021\ufff8\023\ufff8\026\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\043\ufff8\051\ufff8\052\ufff8\061\ufff8\001\002\000" +
    "\004\055\uffa5\001\002\000\004\055\uffa2\001\002\000\004" +
    "\055\133\001\002\000\004\055\uffa1\001\002\000\004\055" +
    "\uffa3\001\002\000\004\055\uffa4\001\002\000\004\004\134" +
    "\001\002\000\010\046\uffa6\054\uffa6\072\140\001\002\000" +
    "\004\054\136\001\002\000\004\004\137\001\002\000\006" +
    "\003\uffaa\064\uffaa\001\002\000\006\004\142\071\143\001" +
    "\002\000\006\046\uffa7\054\uffa7\001\002\000\006\046\uff9f" +
    "\054\uff9f\001\002\000\006\046\uffa0\054\uffa0\001\002\000" +
    "\034\002\uffff\014\010\016\012\021\014\023\016\026\022" +
    "\040\005\041\013\042\024\043\023\051\004\052\020\061" +
    "\025\001\002\000\034\002\ufffd\014\ufffd\016\ufffd\021\ufffd" +
    "\023\ufffd\026\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\051" +
    "\ufffd\052\ufffd\061\ufffd\001\002\000\004\004\147\001\002" +
    "\000\006\003\ufff2\064\ufff2\001\002\000\004\004\151\001" +
    "\002\000\010\023\154\025\153\027\155\001\002\000\006" +
    "\012\157\022\160\001\002\000\006\012\uffd7\022\uffd7\001" +
    "\002\000\006\012\uffd6\022\uffd6\001\002\000\006\012\uffd5" +
    "\022\uffd5\001\002\000\004\004\161\001\002\000\004\004" +
    "\uffd4\001\002\000\004\004\uffd3\001\002\000\024\003\uffda" +
    "\014\163\030\033\031\030\032\034\033\036\034\035\035" +
    "\032\064\uffda\001\002\000\006\003\ufff3\064\ufff3\001\002" +
    "\000\004\024\165\001\002\000\006\003\uffd9\064\uffd9\001" +
    "\002\000\004\065\166\001\002\000\004\004\167\001\002" +
    "\000\004\066\170\001\002\000\004\013\171\001\002\000" +
    "\004\004\172\001\002\000\004\065\173\001\002\000\004" +
    "\004\174\001\002\000\004\066\175\001\002\000\010\003" +
    "\uffea\055\176\064\uffea\001\002\000\006\042\201\043\200" +
    "\001\002\000\006\003\uffd8\064\uffd8\001\002\000\004\050" +
    "\203\001\002\000\004\050\203\001\002\000\006\003\uffe9" +
    "\064\uffe9\001\002\000\006\003\uffe7\064\uffe7\001\002\000" +
    "\006\003\uffe8\064\uffe8\001\002\000\010\004\044\011\043" +
    "\071\045\001\002\000\004\065\207\001\002\000\016\003" +
    "\211\004\212\005\210\006\214\066\uffac\067\uffac\001\002" +
    "\000\006\066\uffae\067\uffae\001\002\000\006\066\uffab\067" +
    "\uffab\001\002\000\006\066\uffad\067\uffad\001\002\000\006" +
    "\066\217\067\216\001\002\000\006\066\uffaf\067\uffaf\001" +
    "\002\000\006\066\uffb0\067\uffb0\001\002\000\016\003\211" +
    "\004\212\005\210\006\214\066\uffac\067\uffac\001\002\000" +
    "\004\044\220\001\002\000\004\065\221\001\002\000\020" +
    "\003\054\004\056\005\053\006\060\007\055\010\057\057" +
    "\061\001\002\000\006\066\225\067\224\001\002\000\006" +
    "\066\uffb9\067\uffb9\001\002\000\020\003\054\004\056\005" +
    "\053\006\060\007\055\010\057\057\061\001\002\000\006" +
    "\003\uffd2\064\uffd2\001\002\000\006\066\uffba\067\uffba\001" +
    "\002\000\006\066\uffb1\067\uffb1\001\002\000\006\003\ufff6" +
    "\064\ufff6\001\002\000\004\004\271\001\002\000\004\004" +
    "\235\001\002\000\004\004\234\001\002\000\006\003\uffef" +
    "\064\uffef\001\002\000\004\065\236\001\002\000\006\004" +
    "\241\014\237\001\002\000\004\024\260\001\002\000\006" +
    "\066\256\067\255\001\002\000\016\030\033\031\030\032" +
    "\034\033\036\034\035\035\032\001\002\000\006\066\uffed" +
    "\067\uffed\001\002\000\016\003\247\015\245\056\250\057" +
    "\251\066\uffe1\067\uffe1\001\002\000\006\066\uffec\067\uffec" +
    "\001\002\000\004\024\253\001\002\000\006\066\uffe5\067" +
    "\uffe5\001\002\000\006\066\uffe2\067\uffe2\001\002\000\004" +
    "\057\252\001\002\000\006\066\uffe4\067\uffe4\001\002\000" +
    "\006\066\uffe3\067\uffe3\001\002\000\012\003\247\056\250" +
    "\066\uffe1\067\uffe1\001\002\000\006\066\uffe6\067\uffe6\001" +
    "\002\000\006\004\241\014\237\001\002\000\006\003\ufff1" +
    "\064\ufff1\001\002\000\006\066\uffee\067\uffee\001\002\000" +
    "\004\065\261\001\002\000\004\004\262\001\002\000\004" +
    "\066\263\001\002\000\004\013\264\001\002\000\004\004" +
    "\265\001\002\000\004\065\266\001\002\000\004\004\267" +
    "\001\002\000\004\066\270\001\002\000\006\066\uffeb\067" +
    "\uffeb\001\002\000\006\003\ufff0\064\ufff0\001\002\000\004" +
    "\002\001\001\002\000\004\065\274\001\002\000\004\004" +
    "\275\001\002\000\004\066\276\001\002\000\004\013\277" +
    "\001\002\000\004\004\300\001\002\000\004\065\301\001" +
    "\002\000\004\004\302\001\002\000\004\066\303\001\002" +
    "\000\010\003\uffea\055\176\064\uffea\001\002\000\006\003" +
    "\ufff4\064\ufff4\001\002\000\034\002\ufffa\014\ufffa\016\ufffa" +
    "\021\ufffa\023\ufffa\026\ufffa\040\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\051\ufffa\052\ufffa\061\ufffa\001\002\000\034\002\ufffb" +
    "\014\ufffb\016\ufffb\021\ufffb\023\ufffb\026\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\051\ufffb\052\ufffb\061\ufffb\001\002" +
    "\000\004\046\310\001\002\000\010\004\044\011\043\071" +
    "\045\001\002\000\016\003\uffce\011\316\036\312\037\314" +
    "\045\315\064\uffce\001\002\000\004\037\332\001\002\000" +
    "\006\003\uffcf\064\uffcf\001\002\000\010\004\044\011\043" +
    "\071\045\001\002\000\010\004\320\062\070\063\073\001" +
    "\002\000\016\003\uffce\011\316\036\312\037\314\045\315" +
    "\064\uffce\001\002\000\006\003\uffca\064\uffca\001\002\000" +
    "\004\070\322\001\002\000\012\003\uffcd\062\070\063\073" +
    "\064\uffcd\001\002\000\020\003\054\004\056\005\053\006" +
    "\060\007\055\010\057\057\061\001\002\000\012\003\uffc0" +
    "\062\070\063\073\064\uffc0\001\002\000\006\003\uffcc\064" +
    "\uffcc\001\002\000\004\055\326\001\002\000\010\004\044" +
    "\011\043\071\045\001\002\000\004\070\330\001\002\000" +
    "\010\004\044\011\043\071\045\001\002\000\006\003\uffcb" +
    "\064\uffcb\001\002\000\010\004\044\011\043\071\045\001" +
    "\002\000\004\055\334\001\002\000\010\004\044\011\043" +
    "\071\045\001\002\000\004\070\336\001\002\000\010\004" +
    "\044\011\043\071\045\001\002\000\006\003\uffc9\064\uffc9" +
    "\001\002\000\004\055\341\001\002\000\004\004\134\001" +
    "\002\000\004\046\343\001\002\000\004\004\344\001\002" +
    "\000\006\003\uffa9\064\uffa9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\016\002\010\004\014\005\025\006\005\022" +
    "\006\036\020\001\001\000\004\040\337\001\001\000\010" +
    "\030\041\031\306\034\046\001\001\000\004\003\305\001" +
    "\001\000\004\003\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\144\006\005\022\006\036\020" +
    "\001\001\000\002\001\001\000\014\004\143\005\025\006" +
    "\005\022\006\036\020\001\001\000\004\040\126\001\001" +
    "\000\004\003\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\041\031\045\034\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\105\001\001\000\004\033" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\065\001\001\000\010\025" +
    "\071\026\066\027\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\107\001\001\000\002\001\001\000\010\030\041" +
    "\031\111\034\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\115\001\001\000\010" +
    "\025\071\026\116\027\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\144\006\005\022\006" +
    "\036\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\151\001\001" +
    "\000\004\016\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\163\035\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\203\001\001\000\004" +
    "\015\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\041\031\205\034\046\001\001" +
    "\000\002\001\001\000\006\020\212\021\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\221\024\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\241\012\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\242\001\001" +
    "\000\002\001\001\000\006\011\243\013\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\253\001\001\000\002\001\001\000\004" +
    "\007\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\041\031\310\034" +
    "\046\001\001\000\004\032\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\041\031\324\034\046\001" +
    "\001\000\006\025\071\027\320\001\001\000\004\032\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\076\001\001\000\004\024\322\001\001\000\010\025\071" +
    "\026\323\027\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\041\031\326\034\046\001\001\000\002" +
    "\001\001\000\010\030\041\031\330\034\046\001\001\000" +
    "\002\001\001\000\010\030\041\031\332\034\046\001\001" +
    "\000\002\001\001\000\010\030\041\031\334\034\046\001" +
    "\001\000\002\001\001\000\010\030\041\031\336\034\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\341\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserSQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserSQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserSQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private LexemaSQL lexema;

	  public ParserSQL(LexemaSQL Lexema) {
        super(Lexema);
        this.lexema = Lexema;
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
        System.out.println(this.listError.get(0).toString());
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserSQL$actions {
  private final ParserSQL parser;

  /** Constructor */
  CUP$ParserSQL$actions(ParserSQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action_part00000000(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserSQL$result;

      /* select the action based on the action number */
      switch (CUP$ParserSQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		RESULT = start_val;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserSQL$parser.done_parsing();
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= varias_etiquetas_usar 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error varias_etiquetas_usar 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // varias_etiquetas_usar ::= varias_etiquetas_usar etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("varias_etiquetas_usar",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varias_etiquetas_usar ::= etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("varias_etiquetas_usar",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // etiqueta_inicial ::= use_ddl finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // etiqueta_inicial ::= use_dml finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // etiqueta_inicial ::= use_dcl finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // finalizacion_punto_y_coma ::= PERIOD_AND_AS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("finalizacion_punto_y_coma",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // finalizacion_punto_y_coma ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("finalizacion_punto_y_coma",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // use_ddl ::= CREATE optimization_create 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // use_ddl ::= USE SCHEMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // use_ddl ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P accion_update 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // use_ddl ::= ALTER TABLE IDENTIFICADOR accion_alter space_use_alter IDENTIFICADOR type_optional_alter 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // use_ddl ::= DROP TABLE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optimization_create ::= TABLE IDENTIFICADOR OPEN_P various_attributes CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",29, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optimization_create ::= SCHEMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",29, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optimization_create ::= USER IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",29, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // various_attributes ::= various_attributes COMMA atributos_tabla 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("various_attributes",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // various_attributes ::= atributos_tabla 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("various_attributes",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // atributos_tabla ::= IDENTIFICADOR type_attribute type_privacy 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributos_tabla",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atributos_tabla ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributos_tabla",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-9)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // accion_update ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // accion_update ::= ON UPDATE accion_fk 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // accion_update ::= ON DELETE accion_fk 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // accion_fk ::= SET 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_fk",11, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_privacy ::= PRIMARY KEY attribute_null 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_privacy ::= attribute_null 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_privacy ::= NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // attribute_null ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // attribute_null ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // attribute_null ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_attribute ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_attribute ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_attribute ::= INT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_attribute ::= VARCHAR OPEN_P NUMEBERS CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_attribute ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_attribute ::= DATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_optional_alter ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",27, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_optional_alter ::= type_attribute 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",27, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_optional_alter ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P accion_update 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",27, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // accion_alter ::= ADD 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // accion_alter ::= DROP 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // accion_alter ::= MODIFY 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // space_use_alter ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("space_use_alter",12, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // space_use_alter ::= COLUMN 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("space_use_alter",12, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // use_dml ::= INSERT INTO select_parameters OPEN_P several_parameters CLOSE_P VALUES OPEN_P insert_parameters CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-9)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // use_dml ::= UPDATE select_parameters SET IDENTIFICADOR EQUAL insert_value WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // use_dml ::= DELETE FROM select_parameters WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-7)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // use_dml ::= SELECT select_parameters FROM select_parameters continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // continuation_select ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // continuation_select ::= WHERE logical_connector_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // continuation_select ::= WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // continuation_select ::= JOIN select_parameters ON select_parameters EQUAL select_parameters 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // continuation_select ::= ALIAS continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // continuation_select ::= LEFT JOIN select_parameters ON select_parameters EQUAL select_parameters 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // select_parameters ::= identificador_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("select_parameters",23, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // identificador_loop ::= identificador_loop COMMA optimization_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_loop",22, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // identificador_loop ::= optimization_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_loop",22, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // optimization_loop ::= IDENTIFICADOR attribute_possibility 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // optimization_loop ::= ALIAS attribute_possibility 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // optimization_loop ::= ASTERISK 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // attribute_possibility ::= POINT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_possibility",25, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // attribute_possibility ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_possibility",25, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // continuation_UPDATE ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_UPDATE",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // continuation_UPDATE ::= logical_connector_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_UPDATE",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // logical_connector ::= AND IDENTIFICADOR EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector",19, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // logical_connector ::= OR IDENTIFICADOR EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector",19, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logical_connector_loop ::= logical_connector_loop logical_connector 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector_loop",21, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logical_connector_loop ::= logical_connector 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector_loop",21, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // insert_parameters ::= insert_parameters COMMA insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_parameters",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // insert_parameters ::= insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_parameters",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // insert_value ::= NUMEBERS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // insert_value ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // insert_value ::= CHARS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // insert_value ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // insert_value ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // insert_value ::= NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // insert_value ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // several_parameters ::= several_parameters COMMA attribute_insert 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("several_parameters",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // several_parameters ::= attribute_insert 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("several_parameters",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // attribute_insert ::= CHARS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // attribute_insert ::= NUMEBERS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // attribute_insert ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // attribute_insert ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // attribute_insert ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // use_dcl ::= GRANT option_grant ON identificador_or_point TO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dcl",28, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // use_dcl ::= REVOKE option_grant ON identificador_or_point FROM IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dcl",28, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // use_dcl ::= DECLARE IDENTIFICADOR type_attribute 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dcl",28, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // identificador_or_point ::= IDENTIFICADOR POINT atributo_or_all 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_or_point",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // identificador_or_point ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_or_point",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // option_grant ::= INSERT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // option_grant ::= SELECT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // option_grant ::= UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // option_grant ::= DELETE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // option_grant ::= REFERENCES 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // atributo_or_all ::= ASTERISK 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributo_or_all",31, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // atributo_or_all ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributo_or_all",31, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserSQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
              return CUP$ParserSQL$do_action_part00000000(
                               CUP$ParserSQL$act_num,
                               CUP$ParserSQL$parser,
                               CUP$ParserSQL$stack,
                               CUP$ParserSQL$top);
    }
}

}
