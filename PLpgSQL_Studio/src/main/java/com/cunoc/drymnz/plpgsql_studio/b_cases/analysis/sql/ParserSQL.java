
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.sql;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ReportErrorInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.Token;
import com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.InterpretSyntaticError;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.DataValue;
import com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.AnalyzerSemantico;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.operations.ListTypeOperations;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.operations.ListsDefaultFunctionOperations;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ListTypeData;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserSQL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymSQL.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserSQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserSQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserSQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\260\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\003\003\000\002\003\003\000\002" +
    "\006\004\000\002\006\005\000\002\006\015\000\002\006" +
    "\011\000\002\006\005\000\002\042\007\000\002\042\004" +
    "\000\002\042\004\000\002\012\005\000\002\012\003\000" +
    "\002\007\005\000\002\007\014\000\002\014\002\000\002" +
    "\014\005\000\002\014\005\000\002\015\003\000\002\011" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\013\004\000\002\013\003\000\002\013\002\000" +
    "\002\037\002\000\002\037\003\000\002\037\015\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\016" +
    "\003\000\002\016\003\000\002\022\014\000\002\022\013" +
    "\000\002\022\012\000\002\022\007\000\002\032\002\000" +
    "\002\032\004\000\002\032\013\000\002\032\004\000\002" +
    "\032\012\000\002\040\003\000\002\040\006\000\002\035" +
    "\007\000\002\035\005\000\002\036\002\000\002\036\003" +
    "\000\002\036\003\000\002\031\003\000\002\030\005\000" +
    "\002\030\003\000\002\034\004\000\002\034\004\000\002" +
    "\034\003\000\002\033\004\000\002\033\002\000\002\026" +
    "\002\000\002\026\003\000\002\025\006\000\002\025\006" +
    "\000\002\027\004\000\002\027\003\000\002\023\005\000" +
    "\002\023\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\020\005\000\002\020" +
    "\003\000\002\021\003\000\002\021\002\000\002\021\003" +
    "\000\002\041\010\000\002\041\010\000\002\045\005\000" +
    "\002\045\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\044" +
    "\003\000\002\044\003\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\004\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\004\000\002\046\004\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\047\004\000\002\050" +
    "\004\000\002\050\002\000\002\051\004\000\002\051\003" +
    "\000\002\052\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\006\000\002\010\003\000\002" +
    "\010\003\000\002\053\003\000\002\053\004\000\002\053" +
    "\003\000\002\053\003\000\002\053\004\000\002\054\006" +
    "\000\002\055\004\000\002\055\003\000\002\056\003\000" +
    "\002\056\004\000\002\057\005\000\002\057\003\000\002" +
    "\060\004\000\002\061\003\000\002\061\004\000\002\062" +
    "\005\000\002\063\003\000\002\064\005\000\002\064\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\006\000\002\065\003\000\002\065\003\000\002" +
    "\066\006\000\002\067\003\000\002\067\005\000\002\070" +
    "\005\000\002\071\005\000\002\071\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\074\003\000\002\074\014\000\002\076\006\000\002" +
    "\076\004\000\002\077\003\000\002\075\005\000\002\100" +
    "\003\000\002\100\003\000\002\101\005\000\002\102\004" +
    "\000\002\102\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\050\002\ufffe\003\030\035\032\046\015\050" +
    "\023\053\025\055\027\060\034\072\010\073\024\074\035" +
    "\075\036\103\006\104\031\113\041\116\020\122\037\126" +
    "\017\130\007\001\002\000\046\002\uff86\035\uff86\046\uff86" +
    "\050\uff86\053\uff86\055\uff86\060\uff86\072\uff86\073\uff86\074" +
    "\uff86\075\uff86\103\uff86\104\uff86\113\uff86\116\uff86\122\uff86" +
    "\126\uff86\130\uff86\001\002\000\046\002\ufff8\035\ufff8\046" +
    "\ufff8\050\ufff8\053\ufff8\055\ufff8\060\ufff8\072\ufff8\073\ufff8" +
    "\074\ufff8\075\ufff8\103\ufff8\104\ufff8\113\ufff8\116\ufff8\122" +
    "\ufff8\126\ufff8\130\ufff8\001\002\000\014\045\277\072\302" +
    "\073\275\074\301\075\276\001\002\000\020\035\uff58\113" +
    "\uff58\116\uff58\122\uff58\125\uff58\126\uff58\130\uff58\001\002" +
    "\000\010\013\170\035\166\043\167\001\002\000\006\003" +
    "\246\006\250\001\002\000\006\003\246\006\250\001\002" +
    "\000\050\002\uff5c\035\uff5c\046\uff5c\050\uff5c\053\uff5c\055" +
    "\uff5c\060\uff5c\072\uff5c\073\uff5c\074\uff5c\075\uff5c\103\uff5c" +
    "\104\uff5c\113\uff5c\116\uff5c\122\uff5c\125\uff5c\126\uff5c\130" +
    "\uff5c\001\002\000\020\035\032\113\041\116\020\122\037" +
    "\125\u0141\126\017\130\007\001\002\000\004\056\u0133\001" +
    "\002\000\050\002\uff7c\035\uff7c\046\uff7c\050\uff7c\053\uff7c" +
    "\055\uff7c\060\uff7c\072\uff7c\073\uff7c\074\uff7c\075\uff7c\103" +
    "\uff7c\104\uff7c\113\uff7c\116\uff7c\122\uff7c\125\uff7c\126\uff7c" +
    "\130\uff7c\001\002\000\004\034\u012d\001\002\000\004\117" +
    "\u012b\001\002\000\050\002\uff7d\035\uff7d\046\uff7d\050\uff7d" +
    "\053\uff7d\055\uff7d\060\uff7d\072\uff7d\073\uff7d\074\uff7d\075" +
    "\uff7d\103\uff7d\104\uff7d\113\uff7d\116\uff7d\122\uff7d\125\uff7d" +
    "\126\uff7d\130\uff7d\001\002\000\004\002\u012a\001\002\000" +
    "\010\051\u0108\052\u0109\105\u010a\001\002\000\004\101\366" +
    "\001\002\000\004\052\320\001\002\000\046\002\000\035" +
    "\032\046\015\050\023\053\025\055\027\060\034\072\010" +
    "\073\024\074\035\075\036\103\006\104\031\113\041\116" +
    "\020\122\037\126\017\130\007\001\002\000\004\052\316" +
    "\001\002\000\044\035\032\046\015\050\023\053\025\055" +
    "\027\060\034\072\010\073\024\074\035\075\036\103\006" +
    "\104\031\113\041\116\020\122\037\126\017\130\007\001" +
    "\002\000\014\045\277\072\302\073\275\074\301\075\276" +
    "\001\002\000\006\012\252\034\251\001\002\000\006\003" +
    "\246\006\250\001\002\000\004\051\244\001\002\000\010" +
    "\013\170\035\166\043\167\001\002\000\004\100\164\001" +
    "\002\000\004\043\150\001\002\000\004\006\147\001\002" +
    "\000\004\035\044\001\002\000\050\002\uff7f\035\uff7f\046" +
    "\uff7f\050\uff7f\053\uff7f\055\uff7f\060\uff7f\072\uff7f\073\uff7f" +
    "\074\uff7f\075\uff7f\103\uff7f\104\uff7f\113\uff7f\116\uff7f\122" +
    "\uff7f\125\uff7f\126\uff7f\130\uff7f\001\002\000\046\002\ufffc" +
    "\035\ufffc\046\ufffc\050\ufffc\053\ufffc\055\ufffc\060\ufffc\072" +
    "\ufffc\073\ufffc\074\ufffc\075\ufffc\103\ufffc\104\ufffc\113\ufffc" +
    "\116\ufffc\122\ufffc\126\ufffc\130\ufffc\001\002\000\020\011" +
    "\uff6d\062\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d" +
    "\001\002\000\050\002\uff7e\035\uff7e\046\uff7e\050\uff7e\053" +
    "\uff7e\055\uff7e\060\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e" +
    "\103\uff7e\104\uff7e\113\uff7e\116\uff7e\122\uff7e\125\uff7e\126" +
    "\uff7e\130\uff7e\001\002\000\020\011\145\062\uff6f\063\uff6f" +
    "\064\uff6f\065\uff6f\066\uff6f\067\uff6f\001\002\000\016\062" +
    "\053\063\050\064\055\065\056\066\054\067\052\001\002" +
    "\000\010\006\uff6c\012\uff6c\035\uff6c\001\002\000\006\006" +
    "\142\012\141\001\002\000\010\006\uff67\012\uff67\035\uff67" +
    "\001\002\000\004\007\057\001\002\000\010\006\uff6b\012" +
    "\uff6b\035\uff6b\001\002\000\010\006\uff6a\012\uff6a\035\uff6a" +
    "\001\002\000\010\006\uff68\012\uff68\035\uff68\001\002\000" +
    "\026\025\064\030\065\034\060\035\072\036\071\037\062" +
    "\040\063\041\061\042\067\116\020\001\002\000\026\025" +
    "\064\030\065\034\060\035\072\036\071\037\062\040\063" +
    "\041\061\042\067\116\020\001\002\000\074\003\uff94\004" +
    "\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\014\uff94" +
    "\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024" +
    "\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94" +
    "\035\uff94\077\uff94\113\uff94\116\uff94\122\uff94\124\uff94\126" +
    "\uff94\130\uff94\001\002\000\074\003\uff91\004\uff91\005\uff91" +
    "\006\uff91\007\uff91\010\uff91\011\uff91\014\uff91\016\uff91\017" +
    "\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\026\uff91" +
    "\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\035\uff91\077" +
    "\uff91\113\uff91\116\uff91\122\uff91\124\uff91\126\uff91\130\uff91" +
    "\001\002\000\074\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007" +
    "\uff8e\010\uff8e\011\uff8e\014\uff8e\016\uff8e\017\uff8e\020\uff8e" +
    "\021\uff8e\022\uff8e\023\uff8e\024\uff8e\026\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\032\uff8e\033\uff8e\035\uff8e\077\uff8e\113\uff8e" +
    "\116\uff8e\122\uff8e\124\uff8e\126\uff8e\130\uff8e\001\002\000" +
    "\026\025\064\030\065\034\060\035\072\036\071\037\062" +
    "\040\063\041\061\042\067\116\020\001\002\000\006\036" +
    "\133\037\134\001\002\000\074\003\uff8c\004\uff8c\005\uff8c" +
    "\006\uff8c\007\uff8c\010\uff8c\011\uff8c\014\uff8c\016\uff8c\017" +
    "\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\026\uff8c" +
    "\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\035\uff8c\077" +
    "\uff8c\113\uff8c\116\uff8c\122\uff8c\124\uff8c\126\uff8c\130\uff8c" +
    "\001\002\000\074\003\uff93\004\uff93\005\uff93\006\uff93\007" +
    "\uff93\010\uff93\011\uff93\014\uff93\016\uff93\017\uff93\020\uff93" +
    "\021\uff93\022\uff93\023\uff93\024\uff93\026\uff93\027\uff93\030" +
    "\uff93\031\uff93\032\uff93\033\uff93\035\uff93\077\uff93\113\uff93" +
    "\116\uff93\122\uff93\124\uff93\126\uff93\130\uff93\001\002\000" +
    "\034\004\102\005\110\010\132\016\106\017\105\020\101" +
    "\021\114\022\113\026\104\027\107\030\103\031\111\032" +
    "\115\001\002\000\074\003\uff92\004\uff92\005\uff92\006\uff92" +
    "\007\uff92\010\uff92\011\uff92\014\uff92\016\uff92\017\uff92\020" +
    "\uff92\021\uff92\022\uff92\023\uff92\024\uff92\026\uff92\027\uff92" +
    "\030\uff92\031\uff92\032\uff92\033\uff92\035\uff92\077\uff92\113" +
    "\uff92\116\uff92\122\uff92\124\uff92\126\uff92\130\uff92\001\002" +
    "\000\074\003\uff89\004\uff89\005\uff89\006\uff89\007\074\010" +
    "\uff89\011\uff89\014\uff89\016\uff89\017\uff89\020\uff89\021\uff89" +
    "\022\uff89\023\uff89\024\uff89\026\uff89\027\uff89\030\uff89\031" +
    "\uff89\032\uff89\033\uff89\035\uff89\077\uff89\113\uff89\116\uff89" +
    "\122\uff89\124\uff89\126\uff89\130\uff89\001\002\000\074\003" +
    "\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d" +
    "\014\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023" +
    "\uff8d\024\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d" +
    "\033\uff8d\035\uff8d\077\uff8d\113\uff8d\116\uff8d\122\uff8d\124" +
    "\uff8d\126\uff8d\130\uff8d\001\002\000\030\010\077\025\064" +
    "\030\065\034\060\035\072\036\071\037\062\040\063\041" +
    "\061\042\067\116\020\001\002\000\074\003\uff8b\004\uff8b" +
    "\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\014\uff8b\016" +
    "\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b" +
    "\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\035" +
    "\uff8b\077\uff8b\113\uff8b\116\uff8b\122\uff8b\124\uff8b\126\uff8b" +
    "\130\uff8b\001\002\000\074\003\uff8a\004\uff8a\005\uff8a\006" +
    "\uff8a\007\uff8a\010\uff8a\011\uff8a\014\uff8a\016\uff8a\017\uff8a" +
    "\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\026\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\035\uff8a\077\uff8a" +
    "\113\uff8a\116\uff8a\122\uff8a\124\uff8a\126\uff8a\130\uff8a\001" +
    "\002\000\074\003\uff87\004\uff87\005\uff87\006\uff87\007\uff87" +
    "\010\uff87\011\uff87\014\uff87\016\uff87\017\uff87\020\uff87\021" +
    "\uff87\022\uff87\023\uff87\024\uff87\026\uff87\027\uff87\030\uff87" +
    "\031\uff87\032\uff87\033\uff87\035\uff87\077\uff87\113\uff87\116" +
    "\uff87\122\uff87\124\uff87\126\uff87\130\uff87\001\002\000\034" +
    "\004\102\005\110\007\112\016\106\017\105\020\101\021" +
    "\114\022\113\026\104\027\107\030\103\031\111\032\115" +
    "\001\002\000\026\025\064\030\065\034\060\035\072\036" +
    "\071\037\062\040\063\041\061\042\067\116\020\001\002" +
    "\000\026\025\064\030\065\034\060\035\072\036\071\037" +
    "\062\040\063\041\061\042\067\116\020\001\002\000\026" +
    "\025\064\030\065\034\060\035\072\036\071\037\062\040" +
    "\063\041\061\042\067\116\020\001\002\000\026\025\064" +
    "\030\065\034\060\035\072\036\071\037\062\040\063\041" +
    "\061\042\067\116\020\001\002\000\026\025\064\030\065" +
    "\034\060\035\072\036\071\037\062\040\063\041\061\042" +
    "\067\116\020\001\002\000\026\025\064\030\065\034\060" +
    "\035\072\036\071\037\062\040\063\041\061\042\067\116" +
    "\020\001\002\000\026\025\064\030\065\034\060\035\072" +
    "\036\071\037\062\040\063\041\061\042\067\116\020\001" +
    "\002\000\026\025\064\030\065\034\060\035\072\036\071" +
    "\037\062\040\063\041\061\042\067\116\020\001\002\000" +
    "\026\025\064\030\065\034\060\035\072\036\071\037\062" +
    "\040\063\041\061\042\067\116\020\001\002\000\074\003" +
    "\uff88\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88" +
    "\014\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023" +
    "\uff88\024\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88" +
    "\033\uff88\035\uff88\077\uff88\113\uff88\116\uff88\122\uff88\124" +
    "\uff88\126\uff88\130\uff88\001\002\000\026\025\064\030\065" +
    "\034\060\035\072\036\071\037\062\040\063\041\061\042" +
    "\067\116\020\001\002\000\026\025\064\030\065\034\060" +
    "\035\072\036\071\037\062\040\063\041\061\042\067\116" +
    "\020\001\002\000\026\025\064\030\065\034\060\035\072" +
    "\036\071\037\062\040\063\041\061\042\067\116\020\001" +
    "\002\000\074\003\uff96\004\102\005\110\006\uff96\007\uff96" +
    "\010\uff96\011\uff96\014\uff96\016\106\017\105\020\101\021" +
    "\114\022\113\023\uff96\024\uff96\026\104\027\uff96\030\uff96" +
    "\031\uff96\032\uff96\033\uff96\035\uff96\077\uff96\113\uff96\116" +
    "\uff96\122\uff96\124\uff96\126\uff96\130\uff96\001\002\000\074" +
    "\003\uff9e\004\102\005\110\006\uff9e\007\uff9e\010\uff9e\011" +
    "\uff9e\014\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\035\uff9e\077\uff9e\113\uff9e\116\uff9e\122\uff9e" +
    "\124\uff9e\126\uff9e\130\uff9e\001\002\000\074\003\uff9d\004" +
    "\102\005\110\006\uff9d\007\uff9d\010\uff9d\011\uff9d\014\uff9d" +
    "\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\035\uff9d\077\uff9d\113\uff9d\116\uff9d\122\uff9d\124\uff9d\126" +
    "\uff9d\130\uff9d\001\002\000\074\003\uff97\004\102\005\110" +
    "\006\uff97\007\uff97\010\uff97\011\uff97\014\uff97\016\106\017" +
    "\105\020\101\021\114\022\113\023\uff97\024\uff97\026\104" +
    "\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\035\uff97\077" +
    "\uff97\113\uff97\116\uff97\122\uff97\124\uff97\126\uff97\130\uff97" +
    "\001\002\000\074\003\uff9c\004\102\005\uff9c\006\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\014\uff9c\016\uff9c\017\uff9c\020\uff9c" +
    "\021\uff9c\022\uff9c\023\uff9c\024\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\035\uff9c\077\uff9c\113\uff9c" +
    "\116\uff9c\122\uff9c\124\uff9c\126\uff9c\130\uff9c\001\002\000" +
    "\074\003\uff99\004\102\005\110\006\uff99\007\uff99\010\uff99" +
    "\011\uff99\014\uff99\016\106\017\105\020\101\021\114\022" +
    "\113\023\uff99\024\uff99\026\104\027\uff99\030\uff99\031\111" +
    "\032\115\033\uff99\035\uff99\077\uff99\113\uff99\116\uff99\122" +
    "\uff99\124\uff99\126\uff99\130\uff99\001\002\000\074\003\uffa1" +
    "\004\102\005\110\006\uffa1\007\uffa1\010\uffa1\011\uffa1\014" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033" +
    "\uffa1\035\uffa1\077\uffa1\113\uffa1\116\uffa1\122\uffa1\124\uffa1" +
    "\126\uffa1\130\uffa1\001\002\000\074\003\uffa0\004\102\005" +
    "\110\006\uffa0\007\uffa0\010\uffa0\011\uffa0\014\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\035\uffa0" +
    "\077\uffa0\113\uffa0\116\uffa0\122\uffa0\124\uffa0\126\uffa0\130" +
    "\uffa0\001\002\000\074\003\uffa2\004\102\005\110\006\uffa2" +
    "\007\uffa2\010\uffa2\011\uffa2\014\uffa2\016\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\033\uffa2\035\uffa2\077\uffa2\113" +
    "\uffa2\116\uffa2\122\uffa2\124\uffa2\126\uffa2\130\uffa2\001\002" +
    "\000\074\003\uff98\004\102\005\110\006\uff98\007\uff98\010" +
    "\uff98\011\uff98\014\uff98\016\106\017\105\020\101\021\114" +
    "\022\113\023\uff98\024\uff98\026\104\027\uff98\030\uff98\031" +
    "\111\032\115\033\uff98\035\uff98\077\uff98\113\uff98\116\uff98" +
    "\122\uff98\124\uff98\126\uff98\130\uff98\001\002\000\074\003" +
    "\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b" +
    "\014\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\035\uff9b\077\uff9b\113\uff9b\116\uff9b\122\uff9b\124" +
    "\uff9b\126\uff9b\130\uff9b\001\002\000\074\003\uff9f\004\102" +
    "\005\110\006\uff9f\007\uff9f\010\uff9f\011\uff9f\014\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\035" +
    "\uff9f\077\uff9f\113\uff9f\116\uff9f\122\uff9f\124\uff9f\126\uff9f" +
    "\130\uff9f\001\002\000\010\006\uff69\012\uff69\035\uff69\001" +
    "\002\000\074\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90" +
    "\010\uff90\011\uff90\014\uff90\016\uff90\017\uff90\020\uff90\021" +
    "\uff90\022\uff90\023\uff90\024\uff90\026\uff90\027\uff90\030\uff90" +
    "\031\uff90\032\uff90\033\uff90\035\uff90\077\uff90\113\uff90\116" +
    "\uff90\122\uff90\124\uff90\126\uff90\130\uff90\001\002\000\074" +
    "\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011" +
    "\uff8f\014\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f" +
    "\023\uff8f\024\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\033\uff8f\035\uff8f\077\uff8f\113\uff8f\116\uff8f\122\uff8f" +
    "\124\uff8f\126\uff8f\130\uff8f\001\002\000\074\003\uff9a\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\014\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a" +
    "\035\uff9a\077\uff9a\113\uff9a\116\uff9a\122\uff9a\124\uff9a\126" +
    "\uff9a\130\uff9a\001\002\000\034\004\102\005\110\016\106" +
    "\017\105\020\101\021\114\022\113\026\104\027\107\030" +
    "\103\031\111\032\115\033\137\001\002\000\074\003\uff95" +
    "\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\014" +
    "\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95" +
    "\024\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\035\uff95\077\uff95\113\uff95\116\uff95\122\uff95\124\uff95" +
    "\126\uff95\130\uff95\001\002\000\050\002\uff70\035\uff70\046" +
    "\uff70\050\uff70\053\uff70\055\uff70\060\uff70\072\uff70\073\uff70" +
    "\074\uff70\075\uff70\103\uff70\104\uff70\113\uff70\116\uff70\122" +
    "\uff70\125\uff70\126\uff70\130\uff70\001\002\000\026\025\064" +
    "\030\065\034\060\035\072\036\071\037\062\040\063\041" +
    "\061\042\067\116\020\001\002\000\050\002\uff65\035\uff65" +
    "\046\uff65\050\uff65\053\uff65\055\uff65\060\uff65\072\uff65\073" +
    "\uff65\074\uff65\075\uff65\103\uff65\104\uff65\113\uff65\116\uff65" +
    "\122\uff65\125\uff65\126\uff65\130\uff65\001\002\000\034\004" +
    "\102\005\110\006\144\016\106\017\105\020\101\021\114" +
    "\022\113\026\104\027\107\030\103\031\111\032\115\001" +
    "\002\000\050\002\uff64\035\uff64\046\uff64\050\uff64\053\uff64" +
    "\055\uff64\060\uff64\072\uff64\073\uff64\074\uff64\075\uff64\103" +
    "\uff64\104\uff64\113\uff64\116\uff64\122\uff64\125\uff64\126\uff64" +
    "\130\uff64\001\002\000\004\035\146\001\002\000\020\011" +
    "\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\066\uff6e\067\uff6e" +
    "\001\002\000\050\002\uff7b\035\uff7b\046\uff7b\050\uff7b\053" +
    "\uff7b\055\uff7b\060\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b" +
    "\103\uff7b\104\uff7b\113\uff7b\116\uff7b\122\uff7b\125\uff7b\126" +
    "\uff7b\130\uff7b\001\002\000\004\123\151\001\002\000\026" +
    "\025\064\030\065\034\060\035\072\036\071\037\062\040" +
    "\063\041\061\042\067\116\020\001\002\000\034\004\102" +
    "\005\110\014\153\016\106\017\105\020\101\021\114\022" +
    "\113\026\104\027\107\030\103\031\111\032\115\001\002" +
    "\000\004\014\154\001\002\000\026\025\064\030\065\034" +
    "\060\035\072\036\071\037\062\040\063\041\061\042\067" +
    "\116\020\001\002\000\034\004\102\005\110\016\106\017" +
    "\105\020\101\021\114\022\113\026\104\027\107\030\103" +
    "\031\111\032\115\124\156\001\002\000\026\025\064\030" +
    "\065\034\060\035\072\036\071\037\062\040\063\041\061" +
    "\042\067\116\020\001\002\000\046\004\102\005\110\016" +
    "\106\017\105\020\101\021\114\022\113\026\104\027\107" +
    "\030\103\031\111\032\115\035\032\113\041\116\020\122" +
    "\037\126\017\130\007\001\002\000\004\125\162\001\002" +
    "\000\050\002\uff5b\035\uff5b\046\uff5b\050\uff5b\053\uff5b\055" +
    "\uff5b\060\uff5b\072\uff5b\073\uff5b\074\uff5b\075\uff5b\103\uff5b" +
    "\104\uff5b\113\uff5b\116\uff5b\122\uff5b\125\uff5b\126\uff5b\130" +
    "\uff5b\001\002\000\004\124\163\001\002\000\050\002\uff54" +
    "\035\uff54\046\uff54\050\uff54\053\uff54\055\uff54\060\uff54\072" +
    "\uff54\073\uff54\074\uff54\075\uff54\103\uff54\104\uff54\113\uff54" +
    "\116\uff54\122\uff54\125\uff54\126\uff54\130\uff54\001\002\000" +
    "\010\013\170\035\166\043\167\001\002\000\034\003\uffc6" +
    "\006\uffc6\007\uffc6\011\223\012\uffc6\035\uffc6\043\uffc6\070" +
    "\uffc6\071\uffc6\077\uffc6\100\uffc6\102\uffc6\107\uffc6\001\002" +
    "\000\036\003\uffbf\006\uffbf\007\uffbf\011\uffbf\012\uffbf\014" +
    "\217\035\uffbf\043\uffbf\070\uffbf\071\uffbf\077\uffbf\100\uffbf" +
    "\102\uffbf\107\uffbf\001\002\000\036\003\uffbf\006\uffbf\007" +
    "\uffbf\011\uffbf\012\uffbf\014\217\035\uffbf\043\uffbf\070\uffbf" +
    "\071\uffbf\077\uffbf\100\uffbf\102\uffbf\107\uffbf\001\002\000" +
    "\034\003\uffc1\006\uffc1\007\uffc1\011\uffc1\012\uffc1\035\uffc1" +
    "\043\uffc1\070\uffc1\071\uffc1\077\uffc1\100\uffc1\102\uffc1\107" +
    "\uffc1\001\002\000\004\077\173\001\002\000\034\003\uffc4" +
    "\006\uffc4\007\uffc4\011\uffc4\012\uffc4\035\uffc4\043\uffc4\070" +
    "\uffc4\071\uffc4\077\uffc4\100\uffc4\102\uffc4\107\uffc4\001\002" +
    "\000\004\035\174\001\002\000\004\012\175\001\002\000" +
    "\034\003\201\025\064\030\065\034\060\035\072\036\071" +
    "\037\062\040\063\041\061\042\067\111\176\112\177\116" +
    "\020\001\002\000\020\003\uffb5\006\uffb5\010\uffb5\011\uffb5" +
    "\023\uffb5\024\uffb5\077\uffb5\001\002\000\020\003\uffb4\006" +
    "\uffb4\010\uffb4\011\uffb4\023\uffb4\024\uffb4\077\uffb4\001\002" +
    "\000\012\003\uffbe\006\uffbe\023\207\024\204\001\002\000" +
    "\020\003\uffb3\006\uffb3\010\uffb3\011\uffb3\023\uffb3\024\uffb3" +
    "\077\uffb3\001\002\000\050\003\uffb6\004\102\005\110\006" +
    "\uffb6\010\uffb6\011\uffb6\016\106\017\105\020\101\021\114" +
    "\022\113\023\uffb6\024\uffb6\026\104\027\107\030\103\031" +
    "\111\032\115\077\uffb6\001\002\000\006\003\uffd4\006\uffd4" +
    "\001\002\000\010\013\170\035\166\043\167\001\002\000" +
    "\012\003\uffbd\006\uffbd\023\207\024\204\001\002\000\012" +
    "\003\uffb9\006\uffb9\023\uffb9\024\uffb9\001\002\000\010\013" +
    "\170\035\166\043\167\001\002\000\004\012\211\001\002" +
    "\000\034\003\201\025\064\030\065\034\060\035\072\036" +
    "\071\037\062\040\063\041\061\042\067\111\176\112\177" +
    "\116\020\001\002\000\012\003\uffbb\006\uffbb\023\uffbb\024" +
    "\uffbb\001\002\000\012\003\uffba\006\uffba\023\uffba\024\uffba" +
    "\001\002\000\004\012\215\001\002\000\034\003\201\025" +
    "\064\030\065\034\060\035\072\036\071\037\062\040\063" +
    "\041\061\042\067\111\176\112\177\116\020\001\002\000" +
    "\012\003\uffbc\006\uffbc\023\uffbc\024\uffbc\001\002\000\004" +
    "\035\221\001\002\000\034\003\uffc2\006\uffc2\007\uffc2\011" +
    "\uffc2\012\uffc2\035\uffc2\043\uffc2\070\uffc2\071\uffc2\077\uffc2" +
    "\100\uffc2\102\uffc2\107\uffc2\001\002\000\034\003\uffc0\006" +
    "\uffc0\007\uffc0\011\uffc0\012\uffc0\035\uffc0\043\uffc0\070\uffc0" +
    "\071\uffc0\077\uffc0\100\uffc0\102\uffc0\107\uffc0\001\002\000" +
    "\034\003\uffc3\006\uffc3\007\uffc3\011\uffc3\012\uffc3\035\uffc3" +
    "\043\uffc3\070\uffc3\071\uffc3\077\uffc3\100\uffc3\102\uffc3\107" +
    "\uffc3\001\002\000\010\013\170\035\166\043\167\001\002" +
    "\000\034\003\uffc5\006\uffc5\007\uffc5\011\uffc5\012\uffc5\035" +
    "\uffc5\043\uffc5\070\uffc5\071\uffc5\077\uffc5\100\uffc5\102\uffc5" +
    "\107\uffc5\001\002\000\004\102\226\001\002\000\004\035" +
    "\230\001\002\000\006\011\233\077\234\001\002\000\004" +
    "\012\231\001\002\000\034\003\201\025\064\030\065\034" +
    "\060\035\072\036\071\037\062\040\063\041\061\042\067" +
    "\111\176\112\177\116\020\001\002\000\006\011\uffca\077" +
    "\uffca\001\002\000\004\035\241\001\002\000\004\035\235" +
    "\001\002\000\004\012\236\001\002\000\034\003\201\025" +
    "\064\030\065\034\060\035\072\036\071\037\062\040\063" +
    "\041\061\042\067\111\176\112\177\116\020\001\002\000" +
    "\012\003\uffbe\006\uffbe\023\207\024\204\001\002\000\006" +
    "\003\uffd5\006\uffd5\001\002\000\004\012\242\001\002\000" +
    "\034\003\201\025\064\030\065\034\060\035\072\036\071" +
    "\037\062\040\063\041\061\042\067\111\176\112\177\116" +
    "\020\001\002\000\006\011\uffcb\077\uffcb\001\002\000\004" +
    "\035\245\001\002\000\006\003\ufff4\006\ufff4\001\002\000" +
    "\046\002\ufff6\035\ufff6\046\ufff6\050\ufff6\053\ufff6\055\ufff6" +
    "\060\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\103\ufff6\104" +
    "\ufff6\113\ufff6\116\ufff6\122\ufff6\126\ufff6\130\ufff6\001\002" +
    "\000\046\002\ufff9\035\ufff9\046\ufff9\050\ufff9\053\ufff9\055" +
    "\ufff9\060\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\103\ufff9" +
    "\104\ufff9\113\ufff9\116\ufff9\122\ufff9\126\ufff9\130\ufff9\001" +
    "\002\000\046\002\ufff7\035\ufff7\046\ufff7\050\ufff7\053\ufff7" +
    "\055\ufff7\060\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\103" +
    "\ufff7\104\ufff7\113\ufff7\116\ufff7\122\ufff7\126\ufff7\130\ufff7" +
    "\001\002\000\020\033\256\062\053\063\050\064\055\065" +
    "\056\066\054\067\052\001\002\000\026\025\064\030\065" +
    "\034\060\035\072\036\071\037\062\040\063\041\061\042" +
    "\067\116\020\001\002\000\034\004\102\005\110\006\254" +
    "\016\106\017\105\020\101\021\114\022\113\026\104\027" +
    "\107\030\103\031\111\032\115\001\002\000\050\002\uff66" +
    "\035\uff66\046\uff66\050\uff66\053\uff66\055\uff66\060\uff66\072" +
    "\uff66\073\uff66\074\uff66\075\uff66\103\uff66\104\uff66\113\uff66" +
    "\116\uff66\122\uff66\125\uff66\126\uff66\130\uff66\001\002\000" +
    "\006\006\270\114\267\001\002\000\006\006\uff77\114\uff77" +
    "\001\002\000\004\035\265\001\002\000\006\011\uff74\033" +
    "\uff74\001\002\000\006\011\262\033\263\001\002\000\016" +
    "\062\053\063\050\064\055\065\056\066\054\067\052\001" +
    "\002\000\006\006\uff76\114\uff76\001\002\000\006\011\uff75" +
    "\033\uff75\001\002\000\006\011\uff73\033\uff73\001\002\000" +
    "\050\002\uff7a\035\uff7a\046\uff7a\050\uff7a\053\uff7a\055\uff7a" +
    "\060\uff7a\072\uff7a\073\uff7a\074\uff7a\075\uff7a\103\uff7a\104" +
    "\uff7a\113\uff7a\116\uff7a\122\uff7a\125\uff7a\126\uff7a\130\uff7a" +
    "\001\002\000\004\115\273\001\002\000\050\002\uff78\035" +
    "\uff78\046\uff78\050\uff78\053\uff78\055\uff78\060\uff78\072\uff78" +
    "\073\uff78\074\uff78\075\uff78\103\uff78\104\uff78\113\uff78\116" +
    "\uff78\122\uff78\125\uff78\126\uff78\130\uff78\001\002\000\050" +
    "\002\uff79\035\uff79\046\uff79\050\uff79\053\uff79\055\uff79\060" +
    "\uff79\072\uff79\073\uff79\074\uff79\075\uff79\103\uff79\104\uff79" +
    "\113\uff79\116\uff79\122\uff79\125\uff79\126\uff79\130\uff79\001" +
    "\002\000\004\115\274\001\002\000\050\002\uff72\035\uff72" +
    "\046\uff72\050\uff72\053\uff72\055\uff72\060\uff72\072\uff72\073" +
    "\uff72\074\uff72\075\uff72\103\uff72\104\uff72\113\uff72\116\uff72" +
    "\122\uff72\125\uff72\126\uff72\130\uff72\001\002\000\050\002" +
    "\uff71\035\uff71\046\uff71\050\uff71\053\uff71\055\uff71\060\uff71" +
    "\072\uff71\073\uff71\074\uff71\075\uff71\103\uff71\104\uff71\113" +
    "\uff71\116\uff71\122\uff71\125\uff71\126\uff71\130\uff71\001\002" +
    "\000\004\107\uffa9\001\002\000\004\107\uffa6\001\002\000" +
    "\004\107\uffa5\001\002\000\004\107\303\001\002\000\004" +
    "\107\uffa7\001\002\000\004\107\uffa8\001\002\000\004\035" +
    "\304\001\002\000\010\014\310\100\uffaa\106\uffaa\001\002" +
    "\000\004\106\306\001\002\000\004\035\307\001\002\000" +
    "\006\003\uffad\006\uffad\001\002\000\006\013\313\035\312" +
    "\001\002\000\006\100\uffab\106\uffab\001\002\000\006\100" +
    "\uffa3\106\uffa3\001\002\000\006\100\uffa4\106\uffa4\001\002" +
    "\000\046\002\uffff\035\032\046\015\050\023\053\025\055" +
    "\027\060\034\072\010\073\024\074\035\075\036\103\006" +
    "\104\031\113\041\116\020\122\037\126\017\130\007\001" +
    "\002\000\046\002\ufffd\035\ufffd\046\ufffd\050\ufffd\053\ufffd" +
    "\055\ufffd\060\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\103" +
    "\ufffd\104\ufffd\113\ufffd\116\ufffd\122\ufffd\126\ufffd\130\ufffd" +
    "\001\002\000\004\035\317\001\002\000\006\003\ufff1\006" +
    "\ufff1\001\002\000\004\035\321\001\002\000\010\055\324" +
    "\057\323\061\325\001\002\000\006\044\330\054\327\001" +
    "\002\000\006\044\uffdb\054\uffdb\001\002\000\006\044\uffda" +
    "\054\uffda\001\002\000\006\044\uffd9\054\uffd9\001\002\000" +
    "\004\035\331\001\002\000\004\035\uffd7\001\002\000\004" +
    "\035\uffd8\001\002\000\024\003\uffde\006\uffde\046\341\062" +
    "\340\063\334\064\337\065\332\066\333\067\335\001\002" +
    "\000\022\003\uff83\006\uff83\010\uff83\011\uff83\047\uff83\110" +
    "\uff83\111\uff83\112\uff83\001\002\000\022\003\uff81\006\uff81" +
    "\010\uff81\011\uff81\047\uff81\110\uff81\111\uff81\112\uff81\001" +
    "\002\000\022\003\uff85\006\uff85\010\uff85\011\uff85\047\uff85" +
    "\110\uff85\111\uff85\112\uff85\001\002\000\022\003\uff80\006" +
    "\uff80\010\uff80\011\uff80\047\uff80\110\uff80\111\uff80\112\uff80" +
    "\001\002\000\006\003\ufff2\006\ufff2\001\002\000\022\003" +
    "\uff84\006\uff84\010\uff84\011\uff84\047\uff84\110\uff84\111\uff84" +
    "\112\uff84\001\002\000\004\007\363\001\002\000\004\056" +
    "\343\001\002\000\006\003\uffdd\006\uffdd\001\002\000\004" +
    "\007\344\001\002\000\004\035\345\001\002\000\004\010" +
    "\346\001\002\000\004\045\347\001\002\000\004\035\350" +
    "\001\002\000\004\007\351\001\002\000\004\035\352\001" +
    "\002\000\004\010\353\001\002\000\010\003\uffe9\006\uffe9" +
    "\107\354\001\002\000\006\074\357\075\356\001\002\000" +
    "\006\003\uffdc\006\uffdc\001\002\000\004\102\361\001\002" +
    "\000\004\102\361\001\002\000\006\003\uffe8\006\uffe8\001" +
    "\002\000\006\003\uffe6\006\uffe6\001\002\000\006\003\uffe7" +
    "\006\uffe7\001\002\000\026\025\064\030\065\034\060\035" +
    "\072\036\071\037\062\040\063\041\061\042\067\116\020" +
    "\001\002\000\034\004\102\005\110\010\365\016\106\017" +
    "\105\020\101\021\114\022\113\026\104\027\107\030\103" +
    "\031\111\032\115\001\002\000\022\003\uff82\006\uff82\010" +
    "\uff82\011\uff82\047\uff82\110\uff82\111\uff82\112\uff82\001\002" +
    "\000\010\013\170\035\166\043\167\001\002\000\004\007" +
    "\370\001\002\000\034\003\373\010\uffaf\011\uffaf\025\064" +
    "\030\065\034\060\035\072\036\071\037\062\040\063\041" +
    "\061\042\067\116\020\001\002\000\006\010\uffb1\011\uffb1" +
    "\001\002\000\006\010\376\011\375\001\002\000\006\010" +
    "\uffae\011\uffae\001\002\000\036\004\102\005\110\010\uffb0" +
    "\011\uffb0\016\106\017\105\020\101\021\114\022\113\026" +
    "\104\027\107\030\103\031\111\032\115\001\002\000\034" +
    "\003\373\010\uffaf\011\uffaf\025\064\030\065\034\060\035" +
    "\072\036\071\037\062\040\063\041\061\042\067\116\020" +
    "\001\002\000\004\076\377\001\002\000\004\007\u0100\001" +
    "\002\000\034\003\201\025\064\030\065\034\060\035\072" +
    "\036\071\037\062\040\063\041\061\042\067\111\176\112" +
    "\177\116\020\001\002\000\006\010\u0104\011\u0103\001\002" +
    "\000\006\010\uffb7\011\uffb7\001\002\000\034\003\201\025" +
    "\064\030\065\034\060\035\072\036\071\037\062\040\063" +
    "\041\061\042\067\111\176\112\177\116\020\001\002\000" +
    "\006\003\uffd6\006\uffd6\001\002\000\006\010\uffb8\011\uffb8" +
    "\001\002\000\006\010\uffb2\011\uffb2\001\002\000\006\003" +
    "\ufff5\006\ufff5\001\002\000\004\035\u0129\001\002\000\004" +
    "\035\u010c\001\002\000\004\035\u010b\001\002\000\006\003" +
    "\uffee\006\uffee\001\002\000\004\007\u010d\001\002\000\006" +
    "\035\u0110\046\u010e\001\002\000\004\056\u0120\001\002\000" +
    "\006\010\u011e\011\u011d\001\002\000\016\062\340\063\334" +
    "\064\337\065\332\066\333\067\335\001\002\000\006\010" +
    "\uffec\011\uffec\001\002\000\020\003\u0116\010\uffdf\011\uffdf" +
    "\047\u0115\110\u0118\111\u0119\112\u0113\001\002\000\006\010" +
    "\uffe2\011\uffe2\001\002\000\006\010\uffeb\011\uffeb\001\002" +
    "\000\004\056\u011b\001\002\000\006\010\uffe0\011\uffe0\001" +
    "\002\000\006\010\uffe4\011\uffe4\001\002\000\004\111\u011a" +
    "\001\002\000\006\010\uffe3\011\uffe3\001\002\000\006\010" +
    "\uffe1\011\uffe1\001\002\000\012\003\u0116\010\uffdf\011\uffdf" +
    "\110\u0118\001\002\000\006\010\uffe5\011\uffe5\001\002\000" +
    "\006\035\u0110\046\u010e\001\002\000\006\003\ufff0\006\ufff0" +
    "\001\002\000\006\010\uffed\011\uffed\001\002\000\004\007" +
    "\u0121\001\002\000\004\035\u0122\001\002\000\004\010\u0123" +
    "\001\002\000\004\045\u0124\001\002\000\004\035\u0125\001" +
    "\002\000\004\007\u0126\001\002\000\004\035\u0127\001\002" +
    "\000\004\010\u0128\001\002\000\006\010\uffea\011\uffea\001" +
    "\002\000\006\003\uffef\006\uffef\001\002\000\004\002\001" +
    "\001\002\000\026\025\064\030\065\034\060\035\072\036" +
    "\071\037\062\040\063\041\061\042\067\116\020\001\002" +
    "\000\074\003\uff63\004\102\005\110\006\uff63\007\uff63\010" +
    "\uff63\011\uff63\014\uff63\016\106\017\105\020\101\021\114" +
    "\022\113\023\uff63\024\uff63\026\104\027\107\030\103\031" +
    "\111\032\115\033\uff63\035\uff63\077\uff63\113\uff63\116\uff63" +
    "\122\uff63\124\uff63\126\uff63\130\uff63\001\002\000\026\025" +
    "\064\030\065\034\060\035\072\036\071\037\062\040\063" +
    "\041\061\042\067\116\020\001\002\000\004\127\u012f\001" +
    "\002\000\016\035\032\113\041\116\020\122\037\126\017" +
    "\130\007\001\002\000\050\002\uff5a\035\uff5a\046\uff5a\050" +
    "\uff5a\053\uff5a\055\uff5a\060\uff5a\072\uff5a\073\uff5a\074\uff5a" +
    "\075\uff5a\103\uff5a\104\uff5a\113\uff5a\116\uff5a\122\uff5a\125" +
    "\uff5a\126\uff5a\130\uff5a\001\002\000\034\004\102\005\110" +
    "\016\106\017\105\020\101\021\114\022\113\026\104\027" +
    "\107\030\103\031\111\032\115\033\u0132\001\002\000\004" +
    "\127\uff57\001\002\000\004\007\u0134\001\002\000\004\035" +
    "\u0135\001\002\000\004\010\u0136\001\002\000\004\045\u0137" +
    "\001\002\000\004\035\u0138\001\002\000\004\007\u0139\001" +
    "\002\000\004\035\u013a\001\002\000\004\010\u013b\001\002" +
    "\000\010\003\uffe9\006\uffe9\107\354\001\002\000\006\003" +
    "\ufff3\006\ufff3\001\002\000\050\002\uff59\035\uff59\046\uff59" +
    "\050\uff59\053\uff59\055\uff59\060\uff59\072\uff59\073\uff59\074" +
    "\uff59\075\uff59\103\uff59\104\uff59\113\uff59\116\uff59\122\uff59" +
    "\125\uff59\126\uff59\130\uff59\001\002\000\004\125\u0142\001" +
    "\002\000\050\002\uff56\035\uff56\046\uff56\050\uff56\053\uff56" +
    "\055\uff56\060\uff56\072\uff56\073\uff56\074\uff56\075\uff56\103" +
    "\uff56\104\uff56\113\uff56\116\uff56\122\uff56\125\uff56\126\uff56" +
    "\130\uff56\001\002\000\050\002\uff55\035\uff55\046\uff55\050" +
    "\uff55\053\uff55\055\uff55\060\uff55\072\uff55\073\uff55\074\uff55" +
    "\075\uff55\103\uff55\104\uff55\113\uff55\116\uff55\122\uff55\125" +
    "\uff55\126\uff55\130\uff55\001\002\000\050\002\uff52\035\uff52" +
    "\046\uff52\050\uff52\053\uff52\055\uff52\060\uff52\072\uff52\073" +
    "\uff52\074\uff52\075\uff52\103\uff52\104\uff52\113\uff52\116\uff52" +
    "\122\uff52\125\uff52\126\uff52\130\uff52\001\002\000\050\002" +
    "\uff53\035\uff53\046\uff53\050\uff53\053\uff53\055\uff53\060\uff53" +
    "\072\uff53\073\uff53\074\uff53\075\uff53\103\uff53\104\uff53\113" +
    "\uff53\116\uff53\122\uff53\125\uff53\126\uff53\130\uff53\001\002" +
    "\000\046\002\ufffa\035\ufffa\046\ufffa\050\ufffa\053\ufffa\055" +
    "\ufffa\060\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\103\ufffa" +
    "\104\ufffa\113\ufffa\116\ufffa\122\ufffa\126\ufffa\130\ufffa\001" +
    "\002\000\046\002\ufffb\035\ufffb\046\ufffb\050\ufffb\053\ufffb" +
    "\055\ufffb\060\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\103" +
    "\ufffb\104\ufffb\113\ufffb\116\ufffb\122\ufffb\126\ufffb\130\ufffb" +
    "\001\002\000\004\100\u0146\001\002\000\010\013\170\035" +
    "\166\043\167\001\002\000\016\003\uffd2\006\uffd2\043\u014c" +
    "\070\u0149\071\u014a\077\u014b\001\002\000\006\003\uffd3\006" +
    "\uffd3\001\002\000\004\071\u015e\001\002\000\010\013\170" +
    "\035\166\043\167\001\002\000\014\013\170\023\207\024" +
    "\204\035\166\043\167\001\002\000\016\003\uffd2\006\uffd2" +
    "\043\u014c\070\u0149\071\u014a\077\u014b\001\002\000\006\003" +
    "\uffcf\006\uffcf\001\002\000\012\003\uffcd\006\uffcd\023\207" +
    "\024\204\001\002\000\006\003\uffd1\006\uffd1\001\002\000" +
    "\004\012\u0151\001\002\000\034\003\201\025\064\030\065" +
    "\034\060\035\072\036\071\037\062\040\063\041\061\042" +
    "\067\111\176\112\177\116\020\001\002\000\012\003\uffbe" +
    "\006\uffbe\023\207\024\204\001\002\000\006\003\uffcc\006" +
    "\uffcc\001\002\000\010\035\u0156\043\u0157\107\uffc9\001\002" +
    "\000\004\107\u0158\001\002\000\006\012\uffc7\107\uffc7\001" +
    "\002\000\006\012\uffc8\107\uffc8\001\002\000\010\013\170" +
    "\035\166\043\167\001\002\000\010\012\uffc9\035\u0156\043" +
    "\u0157\001\002\000\004\012\u015b\001\002\000\010\013\170" +
    "\035\166\043\167\001\002\000\016\003\uffd2\006\uffd2\043" +
    "\u014c\070\u0149\071\u014a\077\u014b\001\002\000\006\003\uffd0" +
    "\006\uffd0\001\002\000\010\013\170\035\166\043\167\001" +
    "\002\000\010\035\u0156\043\u0157\107\uffc9\001\002\000\004" +
    "\107\u0161\001\002\000\010\013\170\035\166\043\167\001" +
    "\002\000\004\012\u0163\001\002\000\010\013\170\035\166" +
    "\043\167\001\002\000\006\003\uffce\006\uffce\001\002\000" +
    "\004\107\u0166\001\002\000\004\035\304\001\002\000\004" +
    "\100\u0168\001\002\000\004\035\u0169\001\002\000\006\003" +
    "\uffac\006\uffac\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\036\002\021\004\025\005\042\006\010\022" +
    "\011\041\032\052\004\053\003\054\041\066\020\070\037" +
    "\074\015\076\012\077\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\u0164\001\001\000\002\001\001" +
    "\000\010\030\164\031\u0144\034\171\001\001\000\004\003" +
    "\u0143\001\001\000\004\003\u0142\001\001\000\002\001\001" +
    "\000\026\053\u013f\054\041\066\020\070\037\072\u013d\074" +
    "\015\076\012\077\013\100\u013c\102\u013e\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\075\u012d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\u0106\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\314\006\010\022\011\041\032\052\004\053\003" +
    "\054\041\066\020\070\037\074\015\076\012\077\013\001" +
    "\001\000\002\001\001\000\034\004\313\005\042\006\010" +
    "\022\011\041\032\052\004\053\003\054\041\066\020\070" +
    "\037\074\015\076\012\077\013\001\001\000\004\043\277" +
    "\001\001\000\002\001\001\000\004\003\246\001\001\000" +
    "\002\001\001\000\010\030\164\031\224\034\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\062\044\063\046\064\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\050\001\001\000\002\001\001" +
    "\000\004\067\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\046\067\047\072\070\065\001\001\000\010\046" +
    "\135\047\072\070\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\046\134\047\072\070" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\074\001\001\000\002\001\001\000\012\046\077\047\072" +
    "\051\075\070\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\046\130" +
    "\047\072\070\065\001\001\000\010\046\127\047\072\070" +
    "\065\001\001\000\010\046\126\047\072\070\065\001\001" +
    "\000\010\046\125\047\072\070\065\001\001\000\010\046" +
    "\124\047\072\070\065\001\001\000\010\046\123\047\072" +
    "\070\065\001\001\000\010\046\122\047\072\070\065\001" +
    "\001\000\010\046\121\047\072\070\065\001\001\000\010" +
    "\046\120\047\072\070\065\001\001\000\002\001\001\000" +
    "\010\046\117\047\072\070\065\001\001\000\010\046\116" +
    "\047\072\070\065\001\001\000\010\046\115\047\072\070" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\046\142\047\072\070\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\046\151\047\072\070\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\154\047\072\070\065" +
    "\001\001\000\002\001\001\000\010\046\156\047\072\070" +
    "\065\001\001\000\022\053\157\054\041\066\020\070\037" +
    "\074\015\076\012\077\013\101\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\164\031\170\034\171\001\001\000\002\001" +
    "\001\000\004\033\221\001\001\000\004\033\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\177\046\201" +
    "\047\072\070\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\205\026\202\027\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\164\031\213\034\171\001\001\000\004\025\212\001\001" +
    "\000\002\001\001\000\010\030\164\031\207\034\171\001" +
    "\001\000\002\001\001\000\012\024\211\046\201\047\072" +
    "\070\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\215\046\201\047\072\070\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\231\046\201\047\072\070\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\236\046\201\047\072\070\065\001\001\000" +
    "\010\025\205\026\237\027\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\242\046\201\047\072\070" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\056\254\057\260\060\257\065\256\001\001" +
    "\000\010\046\252\047\072\070\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\060\263\065\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\061\270\072\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\314\006\010\022\011\041\032\052\004\053" +
    "\003\054\041\066\020\070\037\074\015\076\012\077\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\321\001\001\000\004" +
    "\016\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\341\037\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\361\001\001\000\004\015\357\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\046\363\047\072\070\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\164\031\366\034\171\001" +
    "\001\000\002\001\001\000\014\020\371\021\370\046\373" +
    "\047\072\070\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\u0105" +
    "\046\373\047\072\070\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\023\u0100\024\u0101\046\201\047\072" +
    "\070\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\u0104\046\201\047\072\070\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\u0110\012" +
    "\u010e\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\u0111\001\001\000\002\001\001\000\006\011\u0113\013" +
    "\u0116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u011b" +
    "\001\001\000\002\001\001\000\004\007\u011e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\046\u012b\047\072\070\065\001\001\000\002\001\001" +
    "\000\010\046\u0130\047\072\070\065\001\001\000\002\001" +
    "\001\000\022\053\157\054\041\066\020\070\037\074\015" +
    "\076\012\077\013\101\u012f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u013b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\164\031\u0146" +
    "\034\171\001\001\000\004\032\u0147\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\164\031\u0153\034\171" +
    "\001\001\000\016\025\205\027\u014d\030\164\031\u014f\034" +
    "\171\040\u014e\001\001\000\004\032\u014c\001\001\000\002" +
    "\001\001\000\004\025\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\u0151\046\201\047\072\070\065" +
    "\001\001\000\010\025\205\026\u0152\027\204\001\001\000" +
    "\002\001\001\000\004\036\u0154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\164\031" +
    "\u0158\034\171\001\001\000\004\036\u0159\001\001\000\002" +
    "\001\001\000\010\030\164\031\u015b\034\171\001\001\000" +
    "\004\032\u015c\001\001\000\002\001\001\000\010\030\164" +
    "\031\u015e\034\171\001\001\000\004\036\u015f\001\001\000" +
    "\002\001\001\000\010\030\164\031\u0161\034\171\001\001" +
    "\000\002\001\001\000\010\030\164\031\u0163\034\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\u0166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserSQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserSQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserSQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private LexemaSQL lexema;
private AnalyzerSemantico analyzerSemantico = new AnalyzerSemantico(); 

 ///
    private boolean mode = false;
    private String procedure = "";
    private int executionNumber = 0;
    private boolean exitProcedure = true;

        private ArrayList<String> listID = new ArrayList();
    ///

	  public ParserSQL(LexemaSQL Lexema) {
        super(Lexema);
        this.lexema = Lexema;
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
        System.out.println(this.listError.get(0).toString());
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    public AnalyzerSemantico getAnalyzerSemantico(){
        return this.analyzerSemantico;
    }

    private Token getToken(Symbol cur_token){
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        return new Token(line, columna, lexema);
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserSQL$actions {
  private final ParserSQL parser;

  /** Constructor */
  CUP$ParserSQL$actions(ParserSQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action_part00000000(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserSQL$result;

      /* select the action based on the action number */
      switch (CUP$ParserSQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		RESULT = start_val;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserSQL$parser.done_parsing();
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= varias_etiquetas_usar 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error varias_etiquetas_usar 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // varias_etiquetas_usar ::= varias_etiquetas_usar etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("varias_etiquetas_usar",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varias_etiquetas_usar ::= etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("varias_etiquetas_usar",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // etiqueta_inicial ::= use_ddl finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // etiqueta_inicial ::= use_dml finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // etiqueta_inicial ::= use_dcl finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // etiqueta_inicial ::= start_pl_sql 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // finalizacion_punto_y_coma ::= PERIOD_AND_AS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("finalizacion_punto_y_coma",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // finalizacion_punto_y_coma ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("finalizacion_punto_y_coma",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // use_ddl ::= CREATE optimization_create 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // use_ddl ::= USE SCHEMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // use_ddl ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P accion_update 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // use_ddl ::= ALTER TABLE IDENTIFICADOR accion_alter space_use_alter IDENTIFICADOR type_optional_alter 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // use_ddl ::= DROP TABLE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optimization_create ::= TABLE IDENTIFICADOR OPEN_P various_attributes CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optimization_create ::= SCHEMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // optimization_create ::= USER IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // various_attributes ::= various_attributes COMMA atributos_tabla 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("various_attributes",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // various_attributes ::= atributos_tabla 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("various_attributes",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atributos_tabla ::= IDENTIFICADOR type_attribute type_privacy 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributos_tabla",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // atributos_tabla ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributos_tabla",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-9)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // accion_update ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // accion_update ::= ON UPDATE accion_fk 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // accion_update ::= ON DELETE accion_fk 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // accion_fk ::= SET 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_fk",11, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_privacy ::= PRIMARY KEY attribute_null 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_privacy ::= attribute_null 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_privacy ::= NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_privacy ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // attribute_null ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // attribute_null ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // attribute_null ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_optional_alter ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",29, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_optional_alter ::= type_attribute 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",29, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_optional_alter ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P accion_update 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",29, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // accion_alter ::= ADD 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // accion_alter ::= DROP 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // accion_alter ::= MODIFY 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // space_use_alter ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("space_use_alter",12, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // space_use_alter ::= COLUMN 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("space_use_alter",12, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // use_dml ::= INSERT INTO select_parameters OPEN_P several_parameters CLOSE_P VALUES OPEN_P insert_parameters CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-9)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // use_dml ::= UPDATE select_parameters SET loop_set WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-8)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // use_dml ::= DELETE FROM select_parameters WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-7)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // use_dml ::= SELECT select_parameters FROM select_parameters continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // continuation_select ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // continuation_select ::= WHERE optimization_where 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // continuation_select ::= JOIN select_parameters possibility_alias ON select_parameters possibility_alias EQUAL select_parameters continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-8)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // continuation_select ::= ALIAS continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // continuation_select ::= LEFT JOIN select_parameters possibility_alias ON select_parameters EQUAL select_parameters 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-7)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // optimization_where ::= logical_connector_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_where",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // optimization_where ::= select_parameters EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_where",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // loop_set ::= loop_set COMMA IDENTIFICADOR EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("loop_set",27, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // loop_set ::= IDENTIFICADOR EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("loop_set",27, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // possibility_alias ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("possibility_alias",28, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // possibility_alias ::= ALIAS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("possibility_alias",28, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // possibility_alias ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("possibility_alias",28, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // select_parameters ::= identificador_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("select_parameters",23, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // identificador_loop ::= identificador_loop COMMA optimization_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_loop",22, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // identificador_loop ::= optimization_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_loop",22, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // optimization_loop ::= IDENTIFICADOR attribute_possibility 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // optimization_loop ::= ALIAS attribute_possibility 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // optimization_loop ::= ASTERISK 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // attribute_possibility ::= POINT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_possibility",25, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // attribute_possibility ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_possibility",25, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // continuation_UPDATE ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_UPDATE",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // continuation_UPDATE ::= logical_connector_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_UPDATE",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logical_connector ::= AND select_parameters EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector",19, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logical_connector ::= OR select_parameters EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector",19, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logical_connector_loop ::= logical_connector_loop logical_connector 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector_loop",21, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logical_connector_loop ::= logical_connector 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector_loop",21, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // insert_parameters ::= insert_parameters COMMA insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_parameters",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // insert_parameters ::= insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_parameters",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // insert_value ::= operaciones 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // insert_value ::= NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // insert_value ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // insert_value ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // several_parameters ::= several_parameters COMMA attribute_insert 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("several_parameters",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // several_parameters ::= attribute_insert 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("several_parameters",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // attribute_insert ::= operaciones 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // attribute_insert ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // attribute_insert ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // use_dcl ::= GRANT option_grant ON identificador_or_point TO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dcl",31, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // use_dcl ::= REVOKE option_grant ON identificador_or_point FROM IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dcl",31, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // identificador_or_point ::= IDENTIFICADOR POINT atributo_or_all 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_or_point",35, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // identificador_or_point ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_or_point",35, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // option_grant ::= INSERT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // option_grant ::= SELECT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // option_grant ::= UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // option_grant ::= DELETE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // option_grant ::= REFERENCES 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // atributo_or_all ::= ASTERISK 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributo_or_all",34, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // atributo_or_all ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributo_or_all",34, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operaciones ::= operaciones SAME_AS_O operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
            RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.SAME_AS,getToken(this.parser.cur_token));
          } else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operaciones ::= operaciones NOT_THE_SAME operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.NOT_THE_SAME,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operaciones ::= operaciones LESS_THAN operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.LESS_THAN,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operaciones ::= operaciones LESS_THAN_EQUAL operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.LESS_THAN_EQUAL,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operaciones ::= operaciones GREATER_THAN operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.GREATER_THAN,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operaciones ::= operaciones GREATER_THAN_EQUAL operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.GREATER_THAN_EQUAL,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operaciones ::= operaciones OR_O operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.OR,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operaciones ::= operaciones AND_O operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.AND,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operaciones ::= NOT_O operaciones 
            {
              Object RESULT =null;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (rightString != null) {
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(null, rightDataValue,ListTypeOperations.NOT,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operaciones ::= operaciones ADDITION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.ADDITION,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operaciones ::= operaciones SUBTRACTION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.SUBTRACTION,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operaciones ::= operaciones DIVISION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.DIVISION,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }
          
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operaciones ::= operaciones MULTIPLICATION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.MULTIPLICATION,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operaciones ::= PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		RESULT = a;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operaciones ::= TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = new DataValue(a.toString(),ListTypeData.BOOLEAN);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operaciones ::= FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = new DataValue(a.toString(),ListTypeData.BOOLEAN);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operaciones ::= DECIMAL_V 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = new DataValue(a.toString(),ListTypeData.DECIMAL);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operaciones ::= WHOLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = new DataValue(a.toString(),ListTypeData.INTEGER);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operaciones ::= SUBTRACTION DECIMAL_V 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = new DataValue("-"+a.toString(),ListTypeData.DECIMAL);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operaciones ::= SUBTRACTION WHOLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = new DataValue("-"+a.toString(),ListTypeData.INTEGER);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operaciones ::= CHARS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = new DataValue(a.toString(),ListTypeData.CHAR);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operaciones ::= parentesis 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = a;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operaciones ::= funciones_defecto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = a;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parentesis ::= IDENTIFICADOR fucion_id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		int funcion_idleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int funcion_idright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object funcion_id = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = analyzerSemantico.retrieveDataVariableOrFunction(id.toString(),getToken(this.parser.cur_token));
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("parentesis",37, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // fucion_id ::= OPEN_P vacio_interno 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = a;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("fucion_id",38, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // fucion_id ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("fucion_id",38, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // vacio_interno ::= operaciones OPEN_P 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		RESULT = a;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("vacio_interno",39, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // vacio_interno ::= CLOSE_P 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("vacio_interno",39, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // start_pl_sql ::= instrucciones 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("start_pl_sql",40, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // type_attribute ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // type_attribute ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // type_attribute ::= INT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // type_attribute ::= VARCHAR OPEN_P operaciones CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // type_attribute ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // type_attribute ::= DATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // instrucciones ::= funcion 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("instrucciones",41, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // instrucciones ::= DECLARE declaracion 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("instrucciones",41, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // instrucciones ::= asignar_variable 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("instrucciones",41, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // instrucciones ::= sentencias_control 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("instrucciones",41, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // instrucciones ::= funciones_defecto PERIOD_AND_AS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("instrucciones",41, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // funcion ::= IDENTIFICADOR PARENTHESIS_OPEN parametro_funcion ejecucion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)).value;
		
RESULT = id;
String userIde = id.toString();
analyzerSemantico.registerVariable(userIde,new DataValue(userIde, ListTypeData.VOID),getToken(this.parser.cur_token),mode,procedure,executionNumber);
if(exitProcedure){
  procedure = userIde;
  exitProcedure = false;
}

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("funcion",42, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ejecucion ::= BRACKETS_OPEN bucle_funcione 
            {
              Object RESULT =null;
		int buleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int buright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object bu = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("ejecucion",43, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ejecucion ::= PERIOD_AND_AS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("ejecucion",43, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // parametro_funcion ::= PARENTHESIS_CLOSE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("parametro_funcion",44, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // parametro_funcion ::= bucle_parametros PARENTHESIS_CLOSE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("parametro_funcion",44, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // bucle_parametros ::= bucle_parametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("bucle_parametros",45, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // bucle_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("bucle_parametros",45, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // parametro ::= tipos_datos IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("parametro",46, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // bucle_funcione ::= BRACKETS_CLOSE 
            {
              Object RESULT =null;
		
if(!exitProcedure){
  exitProcedure = true;
  procedure= "main";
}

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("bucle_funcione",47, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // bucle_funcione ::= bucle_inicio BRACKETS_CLOSE 
            {
              Object RESULT =null;
		
if(!exitProcedure ){
  exitProcedure = true;
  procedure= "main";
}

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("bucle_funcione",47, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // declaracion ::= derivando_declaracion tipos_datos asignar 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		int valorUsarleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int valorUsarright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object valorUsar = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
if(type!=null){
    ListTypeData typeData = (ListTypeData) type;
    DataValue data = (valorUsar!=null)? (DataValue) valorUsar : new DataValue("", typeData);
    analyzerSemantico.registerVariables(listID,data,getToken(this.parser.cur_token),mode,procedure,executionNumber);
    mode = false;
}
listID = new ArrayList();	

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("declaracion",48, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // derivando_declaracion ::= bucle_id 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("derivando_declaracion",49, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // bucle_id ::= bucle_id COMMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		listID.add(a.toString());
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("bucle_id",50, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // bucle_id ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		listID.add(a.toString());
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("bucle_id",50, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // tipos_datos ::= INTEGER 
            {
              Object RESULT =null;
		RESULT = ListTypeData.INTEGER;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("tipos_datos",51, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // tipos_datos ::= DECIMAL 
            {
              Object RESULT =null;
		RESULT = ListTypeData.DECIMAL;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("tipos_datos",51, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // tipos_datos ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = ListTypeData.BOOLEAN;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("tipos_datos",51, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // tipos_datos ::= VARCHAR OPEN_P operaciones CLOSE_P 
            {
              Object RESULT =null;
		RESULT = ListTypeData.CHAR;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("tipos_datos",51, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // tipos_datos ::= INT 
            {
              Object RESULT =null;
		RESULT = ListTypeData.INTEGER;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("tipos_datos",51, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // tipos_datos ::= DATE 
            {
              Object RESULT =null;
		RESULT = ListTypeData.DATE;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("tipos_datos",51, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // asignar_variable ::= IDENTIFICADOR EQUAL operaciones PERIOD_AND_AS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)).value;
		int dopeleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int doperight = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object dope = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		
if(id != null && dope != null){
DataValue dopeDataValue = (DataValue) dope;
analyzerSemantico.assignNewData(id.toString(),dopeDataValue,getToken(this.parser.cur_token));
}

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("asignar_variable",52, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // asignar ::= PERIOD_AND_AS 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("asignar",53, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // asignar ::= EQUAL operaciones PERIOD_AND_AS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		RESULT = a;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("asignar",53, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // funciones_defecto ::= RAISE NOTICE operaciones 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
if(parametro!=null){
DataValue parametroDataValue = (DataValue) parametro;
RESULT = analyzerSemantico.getFunctionResult(parametroDataValue, ListsDefaultFunctionOperations.ALERT_INFO,getToken(this.parser.cur_token));
}

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("funciones_defecto",54, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // bucle_insert ::= bucle_insert COMMA datos_insert 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("bucle_insert",55, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // bucle_insert ::= datos_insert 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("bucle_insert",55, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // datos_insert ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("datos_insert",57, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // datos_insert ::= WHOLE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("datos_insert",57, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // datos_insert ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("datos_insert",57, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // datos_insert ::= CHARS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("datos_insert",57, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // sentencias_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("sentencias_control",58, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // sentencias_control ::= FOR ALIAS IN operaciones POINT POINT operaciones LOOP operaciones sentencia_control_interno_if 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("sentencias_control",58, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-9)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // sentencia_if ::= IF realizar_operaciones THEN sentencia_control_interno_if 
            {
              Object RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		 analyzerSemantico.andIf(true);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("sentencia_if",60, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // sentencia_if ::= use_else sentencia_else 
            {
              Object RESULT =null;
		 analyzerSemantico.andIf(true);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("sentencia_if",60, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // use_else ::= ELSE 
            {
              Object RESULT =null;
		 analyzerSemantico.andIf(!analyzerSemantico.getIf_instruc());
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_else",61, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // realizar_operaciones ::= PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		
 if (leftString != null && leftString instanceof DataValue) {
            DataValue operation = (DataValue) leftString;
            RESULT = operation ;
            analyzerSemantico.ifOperation(operation, getToken(this.parser.cur_token));
          } else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("realizar_operaciones",59, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // sentencia_else ::= vacio_sentincia_interna 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("sentencia_else",62, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // sentencia_else ::= instrucciones 
            {
              Object RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("sentencia_else",62, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // sentencia_control_interno_if ::= instrucciones END LOOP 
            {
              Object RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		RESULT = false;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("sentencia_control_interno_if",63, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // vacio_sentincia_interna ::= bucle_inicio END 
            {
              Object RESULT =null;
		RESULT = false;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("vacio_sentincia_interna",64, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // vacio_sentincia_interna ::= END 
            {
              Object RESULT =null;
		RESULT = false;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("vacio_sentincia_interna",64, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserSQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
              return CUP$ParserSQL$do_action_part00000000(
                               CUP$ParserSQL$act_num,
                               CUP$ParserSQL$parser,
                               CUP$ParserSQL$stack,
                               CUP$ParserSQL$top);
    }
}

}
