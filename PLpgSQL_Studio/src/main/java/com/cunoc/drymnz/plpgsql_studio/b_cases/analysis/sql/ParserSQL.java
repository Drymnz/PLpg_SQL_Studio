
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.sql;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ErrorTypeInTheInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ReportErrorInterpreter;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.Token;
import com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.InterpretSyntaticError;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.DataValue;
import com.cunoc.drymnz.plpgsql_studio.b_cases.analysis.AnalyzerSemantico;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.operations.ListTypeOperations;
import com.cunoc.drymnz.plpgsql_studio.a_entidades.analyzer.ListTypeData;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserSQL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymSQL.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserSQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserSQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserSQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\003\003\000\002\003\003\000\002" +
    "\006\004\000\002\006\005\000\002\006\015\000\002\006" +
    "\011\000\002\006\005\000\002\042\007\000\002\042\004" +
    "\000\002\042\004\000\002\012\005\000\002\012\003\000" +
    "\002\007\005\000\002\007\014\000\002\014\002\000\002" +
    "\014\005\000\002\014\005\000\002\015\003\000\002\011" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\013\004\000\002\013\003\000\002\013\002\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\006\000\002\010\003\000\002\010\003\000\002\037" +
    "\002\000\002\037\003\000\002\037\015\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\016\003\000" +
    "\002\016\003\000\002\022\014\000\002\022\013\000\002" +
    "\022\012\000\002\022\007\000\002\032\002\000\002\032" +
    "\004\000\002\032\013\000\002\032\004\000\002\032\012" +
    "\000\002\040\003\000\002\040\006\000\002\035\007\000" +
    "\002\035\005\000\002\036\002\000\002\036\003\000\002" +
    "\036\003\000\002\031\003\000\002\030\005\000\002\030" +
    "\003\000\002\034\004\000\002\034\004\000\002\034\003" +
    "\000\002\033\004\000\002\033\002\000\002\026\002\000" +
    "\002\026\003\000\002\025\006\000\002\025\006\000\002" +
    "\027\004\000\002\027\003\000\002\023\005\000\002\023" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\020\005\000\002\020\003\000" +
    "\002\021\003\000\002\021\002\000\002\021\003\000\002" +
    "\041\010\000\002\041\010\000\002\045\005\000\002\045" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\044\003\000" +
    "\002\044\003\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\004" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\004\000\002\046\004\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\047\004\000\002\050\004\000" +
    "\002\050\002\000\002\051\004\000\002\051\003\000\002" +
    "\053\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\036\002\ufffe\003\020\046\011\050\013\053" +
    "\015\055\017\060\023\072\006\073\014\074\025\075\024" +
    "\103\004\104\021\113\026\001\002\000\014\045\210\072" +
    "\213\073\206\074\212\075\207\001\002\000\034\002\ufff8" +
    "\046\ufff8\050\ufff8\053\ufff8\055\ufff8\060\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\075\ufff8\103\ufff8\104\ufff8\113\ufff8\001\002" +
    "\000\010\013\124\035\123\043\122\001\002\000\006\003" +
    "\203\006\205\001\002\000\006\003\203\006\205\001\002" +
    "\000\004\056\353\001\002\000\004\002\352\001\002\000" +
    "\010\051\310\052\311\105\312\001\002\000\004\101\266" +
    "\001\002\000\004\052\231\001\002\000\034\002\000\046" +
    "\011\050\013\053\015\055\017\060\023\072\006\073\014" +
    "\074\025\075\024\103\004\104\021\113\026\001\002\000" +
    "\004\052\227\001\002\000\032\046\011\050\013\053\015" +
    "\055\017\060\023\072\006\073\014\074\025\075\024\103" +
    "\004\104\021\113\026\001\002\000\014\045\210\072\213" +
    "\073\206\074\212\075\207\001\002\000\006\003\203\006" +
    "\205\001\002\000\004\051\201\001\002\000\004\100\172" +
    "\001\002\000\010\013\124\035\123\043\122\001\002\000" +
    "\004\035\030\001\002\000\034\002\ufffc\046\ufffc\050\ufffc" +
    "\053\ufffc\055\ufffc\060\ufffc\072\ufffc\073\ufffc\074\ufffc\075" +
    "\ufffc\103\ufffc\104\ufffc\113\ufffc\001\002\000\016\062\036" +
    "\063\032\064\034\065\037\066\035\067\033\001\002\000" +
    "\034\002\uff80\046\uff80\050\uff80\053\uff80\055\uff80\060\uff80" +
    "\072\uff80\073\uff80\074\uff80\075\uff80\103\uff80\104\uff80\113" +
    "\uff80\001\002\000\054\002\uffde\003\uffde\006\uffde\010\uffde" +
    "\011\uffde\046\uffde\047\uffde\050\uffde\053\uffde\055\uffde\060" +
    "\uffde\072\uffde\073\uffde\074\uffde\075\uffde\103\uffde\104\uffde" +
    "\110\uffde\111\uffde\112\uffde\113\uffde\001\002\000\054\002" +
    "\uffd9\003\uffd9\006\uffd9\010\uffd9\011\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\053\uffd9\055\uffd9\060\uffd9\072\uffd9\073\uffd9\074" +
    "\uffd9\075\uffd9\103\uffd9\104\uffd9\110\uffd9\111\uffd9\112\uffd9" +
    "\113\uffd9\001\002\000\054\002\uffdd\003\uffdd\006\uffdd\010" +
    "\uffdd\011\uffdd\046\uffdd\047\uffdd\050\uffdd\053\uffdd\055\uffdd" +
    "\060\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd\103\uffdd\104" +
    "\uffdd\110\uffdd\111\uffdd\112\uffdd\113\uffdd\001\002\000\054" +
    "\002\uffda\003\uffda\006\uffda\010\uffda\011\uffda\046\uffda\047" +
    "\uffda\050\uffda\053\uffda\055\uffda\060\uffda\072\uffda\073\uffda" +
    "\074\uffda\075\uffda\103\uffda\104\uffda\110\uffda\111\uffda\112" +
    "\uffda\113\uffda\001\002\000\004\007\040\001\002\000\054" +
    "\002\uffdc\003\uffdc\006\uffdc\010\uffdc\011\uffdc\046\uffdc\047" +
    "\uffdc\050\uffdc\053\uffdc\055\uffdc\060\uffdc\072\uffdc\073\uffdc" +
    "\074\uffdc\075\uffdc\103\uffdc\104\uffdc\110\uffdc\111\uffdc\112" +
    "\uffdc\113\uffdc\001\002\000\024\025\045\030\046\034\041" +
    "\035\053\036\052\037\044\040\043\041\042\042\050\001" +
    "\002\000\024\025\045\030\046\034\041\035\053\036\052" +
    "\037\044\040\043\041\042\042\050\001\002\000\054\003" +
    "\uff8e\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024" +
    "\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e" +
    "\077\uff8e\001\002\000\054\003\uff88\004\uff88\005\uff88\006" +
    "\uff88\007\uff88\010\uff88\011\uff88\016\uff88\017\uff88\020\uff88" +
    "\021\uff88\022\uff88\023\uff88\024\uff88\026\uff88\027\uff88\030" +
    "\uff88\031\uff88\032\uff88\033\uff88\077\uff88\001\002\000\054" +
    "\003\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011" +
    "\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b" +
    "\024\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033" +
    "\uff8b\077\uff8b\001\002\000\024\025\045\030\046\034\041" +
    "\035\053\036\052\037\044\040\043\041\042\042\050\001" +
    "\002\000\006\036\114\037\115\001\002\000\054\003\uff86" +
    "\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86\016" +
    "\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86" +
    "\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\077" +
    "\uff86\001\002\000\054\003\uff8d\004\uff8d\005\uff8d\006\uff8d" +
    "\007\uff8d\010\uff8d\011\uff8d\016\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\026\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\032\uff8d\033\uff8d\077\uff8d\001\002\000\034\004" +
    "\063\005\072\010\113\016\067\017\066\020\062\021\075" +
    "\022\074\026\065\027\070\030\064\031\071\032\076\001" +
    "\002\000\054\003\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c" +
    "\010\uff8c\011\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022" +
    "\uff8c\023\uff8c\024\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c" +
    "\032\uff8c\033\uff8c\077\uff8c\001\002\000\054\003\uff83\004" +
    "\uff83\005\uff83\006\uff83\007\055\010\uff83\011\uff83\016\uff83" +
    "\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\026" +
    "\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\077\uff83" +
    "\001\002\000\054\003\uff87\004\uff87\005\uff87\006\uff87\007" +
    "\uff87\010\uff87\011\uff87\016\uff87\017\uff87\020\uff87\021\uff87" +
    "\022\uff87\023\uff87\024\uff87\026\uff87\027\uff87\030\uff87\031" +
    "\uff87\032\uff87\033\uff87\077\uff87\001\002\000\026\010\060" +
    "\025\045\030\046\034\041\035\053\036\052\037\044\040" +
    "\043\041\042\042\050\001\002\000\054\003\uff85\004\uff85" +
    "\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\016\uff85\017" +
    "\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85\026\uff85" +
    "\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\077\uff85\001" +
    "\002\000\054\003\uff84\004\uff84\005\uff84\006\uff84\007\uff84" +
    "\010\uff84\011\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022" +
    "\uff84\023\uff84\024\uff84\026\uff84\027\uff84\030\uff84\031\uff84" +
    "\032\uff84\033\uff84\077\uff84\001\002\000\054\003\uff81\004" +
    "\uff81\005\uff81\006\uff81\007\uff81\010\uff81\011\uff81\016\uff81" +
    "\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81\026" +
    "\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81\077\uff81" +
    "\001\002\000\034\004\063\005\072\007\073\016\067\017" +
    "\066\020\062\021\075\022\074\026\065\027\070\030\064" +
    "\031\071\032\076\001\002\000\024\025\045\030\046\034" +
    "\041\035\053\036\052\037\044\040\043\041\042\042\050" +
    "\001\002\000\024\025\045\030\046\034\041\035\053\036" +
    "\052\037\044\040\043\041\042\042\050\001\002\000\024" +
    "\025\045\030\046\034\041\035\053\036\052\037\044\040" +
    "\043\041\042\042\050\001\002\000\024\025\045\030\046" +
    "\034\041\035\053\036\052\037\044\040\043\041\042\042" +
    "\050\001\002\000\024\025\045\030\046\034\041\035\053" +
    "\036\052\037\044\040\043\041\042\042\050\001\002\000" +
    "\024\025\045\030\046\034\041\035\053\036\052\037\044" +
    "\040\043\041\042\042\050\001\002\000\024\025\045\030" +
    "\046\034\041\035\053\036\052\037\044\040\043\041\042" +
    "\042\050\001\002\000\024\025\045\030\046\034\041\035" +
    "\053\036\052\037\044\040\043\041\042\042\050\001\002" +
    "\000\024\025\045\030\046\034\041\035\053\036\052\037" +
    "\044\040\043\041\042\042\050\001\002\000\054\003\uff82" +
    "\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\016" +
    "\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82" +
    "\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\077" +
    "\uff82\001\002\000\024\025\045\030\046\034\041\035\053" +
    "\036\052\037\044\040\043\041\042\042\050\001\002\000" +
    "\024\025\045\030\046\034\041\035\053\036\052\037\044" +
    "\040\043\041\042\042\050\001\002\000\024\025\045\030" +
    "\046\034\041\035\053\036\052\037\044\040\043\041\042" +
    "\042\050\001\002\000\054\003\uff90\004\063\005\072\006" +
    "\uff90\007\uff90\010\uff90\011\uff90\016\067\017\066\020\062" +
    "\021\075\022\074\023\uff90\024\uff90\026\065\027\uff90\030" +
    "\uff90\031\uff90\032\uff90\033\uff90\077\uff90\001\002\000\054" +
    "\003\uff98\004\063\005\072\006\uff98\007\uff98\010\uff98\011" +
    "\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98" +
    "\024\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033" +
    "\uff98\077\uff98\001\002\000\054\003\uff97\004\063\005\072" +
    "\006\uff97\007\uff97\010\uff97\011\uff97\016\uff97\017\uff97\020" +
    "\uff97\021\uff97\022\uff97\023\uff97\024\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\033\uff97\077\uff97\001\002\000" +
    "\054\003\uff96\004\063\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\011\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023" +
    "\uff96\024\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96" +
    "\033\uff96\077\uff96\001\002\000\054\003\uff91\004\063\005" +
    "\072\006\uff91\007\uff91\010\uff91\011\uff91\016\067\017\066" +
    "\020\062\021\075\022\074\023\uff91\024\uff91\026\065\027" +
    "\uff91\030\uff91\031\uff91\032\uff91\033\uff91\077\uff91\001\002" +
    "\000\054\003\uff93\004\063\005\072\006\uff93\007\uff93\010" +
    "\uff93\011\uff93\016\067\017\066\020\062\021\075\022\074" +
    "\023\uff93\024\uff93\026\065\027\uff93\030\uff93\031\071\032" +
    "\076\033\uff93\077\uff93\001\002\000\054\003\uff9b\004\063" +
    "\005\072\006\uff9b\007\uff9b\010\uff9b\011\uff9b\016\uff9b\017" +
    "\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\077\uff9b\001" +
    "\002\000\054\003\uff9a\004\063\005\072\006\uff9a\007\uff9a" +
    "\010\uff9a\011\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022" +
    "\uff9a\023\uff9a\024\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a" +
    "\032\uff9a\033\uff9a\077\uff9a\001\002\000\054\003\uff9c\004" +
    "\063\005\072\006\uff9c\007\uff9c\010\uff9c\011\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\026" +
    "\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\077\uff9c" +
    "\001\002\000\054\003\uff92\004\063\005\072\006\uff92\007" +
    "\uff92\010\uff92\011\uff92\016\067\017\066\020\062\021\075" +
    "\022\074\023\uff92\024\uff92\026\065\027\uff92\030\uff92\031" +
    "\071\032\076\033\uff92\077\uff92\001\002\000\054\003\uff95" +
    "\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\077" +
    "\uff95\001\002\000\054\003\uff99\004\063\005\072\006\uff99" +
    "\007\uff99\010\uff99\011\uff99\016\uff99\017\uff99\020\uff99\021" +
    "\uff99\022\uff99\023\uff99\024\uff99\026\uff99\027\uff99\030\uff99" +
    "\031\uff99\032\uff99\033\uff99\077\uff99\001\002\000\054\002" +
    "\uffdb\003\uffdb\006\uffdb\010\uffdb\011\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\053\uffdb\055\uffdb\060\uffdb\072\uffdb\073\uffdb\074" +
    "\uffdb\075\uffdb\103\uffdb\104\uffdb\110\uffdb\111\uffdb\112\uffdb" +
    "\113\uffdb\001\002\000\054\003\uff8a\004\uff8a\005\uff8a\006" +
    "\uff8a\007\uff8a\010\uff8a\011\uff8a\016\uff8a\017\uff8a\020\uff8a" +
    "\021\uff8a\022\uff8a\023\uff8a\024\uff8a\026\uff8a\027\uff8a\030" +
    "\uff8a\031\uff8a\032\uff8a\033\uff8a\077\uff8a\001\002\000\054" +
    "\003\uff89\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011" +
    "\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89" +
    "\024\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033" +
    "\uff89\077\uff89\001\002\000\054\003\uff94\004\uff94\005\uff94" +
    "\006\uff94\007\uff94\010\uff94\011\uff94\016\uff94\017\uff94\020" +
    "\uff94\021\uff94\022\uff94\023\uff94\024\uff94\026\uff94\027\uff94" +
    "\030\uff94\031\uff94\032\uff94\033\uff94\077\uff94\001\002\000" +
    "\034\004\063\005\072\016\067\017\066\020\062\021\075" +
    "\022\074\026\065\027\070\030\064\031\071\032\076\033" +
    "\120\001\002\000\054\003\uff8f\004\uff8f\005\uff8f\006\uff8f" +
    "\007\uff8f\010\uff8f\011\uff8f\016\uff8f\017\uff8f\020\uff8f\021" +
    "\uff8f\022\uff8f\023\uff8f\024\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\031\uff8f\032\uff8f\033\uff8f\077\uff8f\001\002\000\034\003" +
    "\uffc0\006\uffc0\007\uffc0\011\170\012\uffc0\035\uffc0\043\uffc0" +
    "\070\uffc0\071\uffc0\077\uffc0\100\uffc0\102\uffc0\107\uffc0\001" +
    "\002\000\036\003\uffb9\006\uffb9\007\uffb9\011\uffb9\012\uffb9" +
    "\014\164\035\uffb9\043\uffb9\070\uffb9\071\uffb9\077\uffb9\100" +
    "\uffb9\102\uffb9\107\uffb9\001\002\000\036\003\uffb9\006\uffb9" +
    "\007\uffb9\011\uffb9\012\uffb9\014\164\035\uffb9\043\uffb9\070" +
    "\uffb9\071\uffb9\077\uffb9\100\uffb9\102\uffb9\107\uffb9\001\002" +
    "\000\034\003\uffbb\006\uffbb\007\uffbb\011\uffbb\012\uffbb\035" +
    "\uffbb\043\uffbb\070\uffbb\071\uffbb\077\uffbb\100\uffbb\102\uffbb" +
    "\107\uffbb\001\002\000\004\102\127\001\002\000\034\003" +
    "\uffbe\006\uffbe\007\uffbe\011\uffbe\012\uffbe\035\uffbe\043\uffbe" +
    "\070\uffbe\071\uffbe\077\uffbe\100\uffbe\102\uffbe\107\uffbe\001" +
    "\002\000\004\035\131\001\002\000\006\011\140\077\141" +
    "\001\002\000\004\012\132\001\002\000\032\003\136\025" +
    "\045\030\046\034\041\035\053\036\052\037\044\040\043" +
    "\041\042\042\050\111\133\112\134\001\002\000\020\003" +
    "\uffaf\006\uffaf\010\uffaf\011\uffaf\023\uffaf\024\uffaf\077\uffaf" +
    "\001\002\000\020\003\uffae\006\uffae\010\uffae\011\uffae\023" +
    "\uffae\024\uffae\077\uffae\001\002\000\006\011\uffc4\077\uffc4" +
    "\001\002\000\020\003\uffad\006\uffad\010\uffad\011\uffad\023" +
    "\uffad\024\uffad\077\uffad\001\002\000\050\003\uffb0\004\063" +
    "\005\072\006\uffb0\010\uffb0\011\uffb0\016\067\017\066\020" +
    "\062\021\075\022\074\023\uffb0\024\uffb0\026\065\027\070" +
    "\030\064\031\071\032\076\077\uffb0\001\002\000\004\035" +
    "\161\001\002\000\004\035\142\001\002\000\004\012\143" +
    "\001\002\000\032\003\136\025\045\030\046\034\041\035" +
    "\053\036\052\037\044\040\043\041\042\042\050\111\133" +
    "\112\134\001\002\000\012\003\uffb8\006\uffb8\023\151\024" +
    "\146\001\002\000\006\003\uffcf\006\uffcf\001\002\000\010" +
    "\013\124\035\123\043\122\001\002\000\012\003\uffb7\006" +
    "\uffb7\023\151\024\146\001\002\000\012\003\uffb3\006\uffb3" +
    "\023\uffb3\024\uffb3\001\002\000\010\013\124\035\123\043" +
    "\122\001\002\000\004\012\153\001\002\000\032\003\136" +
    "\025\045\030\046\034\041\035\053\036\052\037\044\040" +
    "\043\041\042\042\050\111\133\112\134\001\002\000\012" +
    "\003\uffb5\006\uffb5\023\uffb5\024\uffb5\001\002\000\012\003" +
    "\uffb4\006\uffb4\023\uffb4\024\uffb4\001\002\000\004\012\157" +
    "\001\002\000\032\003\136\025\045\030\046\034\041\035" +
    "\053\036\052\037\044\040\043\041\042\042\050\111\133" +
    "\112\134\001\002\000\012\003\uffb6\006\uffb6\023\uffb6\024" +
    "\uffb6\001\002\000\004\012\162\001\002\000\032\003\136" +
    "\025\045\030\046\034\041\035\053\036\052\037\044\040" +
    "\043\041\042\042\050\111\133\112\134\001\002\000\006" +
    "\011\uffc5\077\uffc5\001\002\000\004\035\166\001\002\000" +
    "\034\003\uffbd\006\uffbd\007\uffbd\011\uffbd\012\uffbd\035\uffbd" +
    "\043\uffbd\070\uffbd\071\uffbd\077\uffbd\100\uffbd\102\uffbd\107" +
    "\uffbd\001\002\000\034\003\uffba\006\uffba\007\uffba\011\uffba" +
    "\012\uffba\035\uffba\043\uffba\070\uffba\071\uffba\077\uffba\100" +
    "\uffba\102\uffba\107\uffba\001\002\000\034\003\uffbc\006\uffbc" +
    "\007\uffbc\011\uffbc\012\uffbc\035\uffbc\043\uffbc\070\uffbc\071" +
    "\uffbc\077\uffbc\100\uffbc\102\uffbc\107\uffbc\001\002\000\010" +
    "\013\124\035\123\043\122\001\002\000\034\003\uffbf\006" +
    "\uffbf\007\uffbf\011\uffbf\012\uffbf\035\uffbf\043\uffbf\070\uffbf" +
    "\071\uffbf\077\uffbf\100\uffbf\102\uffbf\107\uffbf\001\002\000" +
    "\010\013\124\035\123\043\122\001\002\000\004\077\174" +
    "\001\002\000\004\035\175\001\002\000\004\012\176\001" +
    "\002\000\032\003\136\025\045\030\046\034\041\035\053" +
    "\036\052\037\044\040\043\041\042\042\050\111\133\112" +
    "\134\001\002\000\012\003\uffb8\006\uffb8\023\151\024\146" +
    "\001\002\000\006\003\uffce\006\uffce\001\002\000\004\035" +
    "\202\001\002\000\006\003\ufff4\006\ufff4\001\002\000\034" +
    "\002\ufff6\046\ufff6\050\ufff6\053\ufff6\055\ufff6\060\ufff6\072" +
    "\ufff6\073\ufff6\074\ufff6\075\ufff6\103\ufff6\104\ufff6\113\ufff6" +
    "\001\002\000\034\002\ufff9\046\ufff9\050\ufff9\053\ufff9\055" +
    "\ufff9\060\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\103\ufff9" +
    "\104\ufff9\113\ufff9\001\002\000\034\002\ufff7\046\ufff7\050" +
    "\ufff7\053\ufff7\055\ufff7\060\ufff7\072\ufff7\073\ufff7\074\ufff7" +
    "\075\ufff7\103\ufff7\104\ufff7\113\ufff7\001\002\000\004\107" +
    "\uffa3\001\002\000\004\107\uffa0\001\002\000\004\107\uff9f" +
    "\001\002\000\004\107\214\001\002\000\004\107\uffa1\001" +
    "\002\000\004\107\uffa2\001\002\000\004\035\216\001\002" +
    "\000\004\106\223\001\002\000\010\014\217\100\uffa4\106" +
    "\uffa4\001\002\000\006\013\222\035\221\001\002\000\006" +
    "\100\uffa5\106\uffa5\001\002\000\006\100\uff9d\106\uff9d\001" +
    "\002\000\006\100\uff9e\106\uff9e\001\002\000\004\035\224" +
    "\001\002\000\006\003\uffa7\006\uffa7\001\002\000\034\002" +
    "\uffff\046\011\050\013\053\015\055\017\060\023\072\006" +
    "\073\014\074\025\075\024\103\004\104\021\113\026\001" +
    "\002\000\034\002\ufffd\046\ufffd\050\ufffd\053\ufffd\055\ufffd" +
    "\060\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\103\ufffd\104" +
    "\ufffd\113\ufffd\001\002\000\004\035\230\001\002\000\006" +
    "\003\ufff1\006\ufff1\001\002\000\004\035\232\001\002\000" +
    "\010\055\235\057\234\061\236\001\002\000\006\044\240" +
    "\054\241\001\002\000\006\044\uffd5\054\uffd5\001\002\000" +
    "\006\044\uffd4\054\uffd4\001\002\000\006\044\uffd3\054\uffd3" +
    "\001\002\000\004\035\242\001\002\000\004\035\uffd2\001" +
    "\002\000\004\035\uffd1\001\002\000\024\003\uffd8\006\uffd8" +
    "\046\244\062\036\063\032\064\034\065\037\066\035\067" +
    "\033\001\002\000\006\003\ufff2\006\ufff2\001\002\000\004" +
    "\056\246\001\002\000\006\003\uffd7\006\uffd7\001\002\000" +
    "\004\007\247\001\002\000\004\035\250\001\002\000\004" +
    "\010\251\001\002\000\004\045\252\001\002\000\004\035" +
    "\253\001\002\000\004\007\254\001\002\000\004\035\255" +
    "\001\002\000\004\010\256\001\002\000\010\003\uffe9\006" +
    "\uffe9\107\257\001\002\000\006\074\262\075\261\001\002" +
    "\000\006\003\uffd6\006\uffd6\001\002\000\004\102\264\001" +
    "\002\000\004\102\264\001\002\000\006\003\uffe8\006\uffe8" +
    "\001\002\000\006\003\uffe6\006\uffe6\001\002\000\006\003" +
    "\uffe7\006\uffe7\001\002\000\010\013\124\035\123\043\122" +
    "\001\002\000\004\007\270\001\002\000\032\003\273\010" +
    "\uffa9\011\uffa9\025\045\030\046\034\041\035\053\036\052" +
    "\037\044\040\043\041\042\042\050\001\002\000\006\010" +
    "\uffab\011\uffab\001\002\000\006\010\276\011\275\001\002" +
    "\000\006\010\uffa8\011\uffa8\001\002\000\036\004\063\005" +
    "\072\010\uffaa\011\uffaa\016\067\017\066\020\062\021\075" +
    "\022\074\026\065\027\070\030\064\031\071\032\076\001" +
    "\002\000\032\003\273\010\uffa9\011\uffa9\025\045\030\046" +
    "\034\041\035\053\036\052\037\044\040\043\041\042\042" +
    "\050\001\002\000\004\076\277\001\002\000\004\007\300" +
    "\001\002\000\032\003\136\025\045\030\046\034\041\035" +
    "\053\036\052\037\044\040\043\041\042\042\050\111\133" +
    "\112\134\001\002\000\006\010\304\011\303\001\002\000" +
    "\006\010\uffb1\011\uffb1\001\002\000\032\003\136\025\045" +
    "\030\046\034\041\035\053\036\052\037\044\040\043\041" +
    "\042\042\050\111\133\112\134\001\002\000\006\003\uffd0" +
    "\006\uffd0\001\002\000\006\010\uffb2\011\uffb2\001\002\000" +
    "\006\010\uffac\011\uffac\001\002\000\006\003\ufff5\006\ufff5" +
    "\001\002\000\004\035\351\001\002\000\004\035\314\001" +
    "\002\000\004\035\313\001\002\000\006\003\uffee\006\uffee" +
    "\001\002\000\004\007\315\001\002\000\006\035\320\046" +
    "\316\001\002\000\004\056\340\001\002\000\006\010\336" +
    "\011\335\001\002\000\016\062\036\063\032\064\034\065" +
    "\037\066\035\067\033\001\002\000\006\010\uffec\011\uffec" +
    "\001\002\000\020\003\326\010\uffdf\011\uffdf\047\325\110" +
    "\330\111\331\112\323\001\002\000\006\010\uffe2\011\uffe2" +
    "\001\002\000\006\010\uffeb\011\uffeb\001\002\000\004\056" +
    "\333\001\002\000\006\010\uffe0\011\uffe0\001\002\000\006" +
    "\010\uffe4\011\uffe4\001\002\000\004\111\332\001\002\000" +
    "\006\010\uffe3\011\uffe3\001\002\000\006\010\uffe1\011\uffe1" +
    "\001\002\000\012\003\326\010\uffdf\011\uffdf\110\330\001" +
    "\002\000\006\010\uffe5\011\uffe5\001\002\000\006\035\320" +
    "\046\316\001\002\000\006\003\ufff0\006\ufff0\001\002\000" +
    "\006\010\uffed\011\uffed\001\002\000\004\007\341\001\002" +
    "\000\004\035\342\001\002\000\004\010\343\001\002\000" +
    "\004\045\344\001\002\000\004\035\345\001\002\000\004" +
    "\007\346\001\002\000\004\035\347\001\002\000\004\010" +
    "\350\001\002\000\006\010\uffea\011\uffea\001\002\000\006" +
    "\003\uffef\006\uffef\001\002\000\004\002\001\001\002\000" +
    "\004\007\354\001\002\000\004\035\355\001\002\000\004" +
    "\010\356\001\002\000\004\045\357\001\002\000\004\035" +
    "\360\001\002\000\004\007\361\001\002\000\004\035\362" +
    "\001\002\000\004\010\363\001\002\000\010\003\uffe9\006" +
    "\uffe9\107\257\001\002\000\006\003\ufff3\006\ufff3\001\002" +
    "\000\034\002\ufffa\046\ufffa\050\ufffa\053\ufffa\055\ufffa\060" +
    "\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\103\ufffa\104\ufffa" +
    "\113\ufffa\001\002\000\034\002\ufffb\046\ufffb\050\ufffb\053" +
    "\ufffb\055\ufffb\060\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb" +
    "\103\ufffb\104\ufffb\113\ufffb\001\002\000\004\100\370\001" +
    "\002\000\010\013\124\035\123\043\122\001\002\000\016" +
    "\003\uffcc\006\uffcc\043\376\070\374\071\372\077\375\001" +
    "\002\000\010\013\124\035\123\043\122\001\002\000\006" +
    "\003\uffcd\006\uffcd\001\002\000\004\071\u0106\001\002\000" +
    "\014\013\124\023\151\024\146\035\123\043\122\001\002" +
    "\000\016\003\uffcc\006\uffcc\043\376\070\374\071\372\077" +
    "\375\001\002\000\006\003\uffc9\006\uffc9\001\002\000\012" +
    "\003\uffc7\006\uffc7\023\151\024\146\001\002\000\006\003" +
    "\uffcb\006\uffcb\001\002\000\004\012\u0103\001\002\000\032" +
    "\003\136\025\045\030\046\034\041\035\053\036\052\037" +
    "\044\040\043\041\042\042\050\111\133\112\134\001\002" +
    "\000\012\003\uffb8\006\uffb8\023\151\024\146\001\002\000" +
    "\006\003\uffc6\006\uffc6\001\002\000\010\013\124\035\123" +
    "\043\122\001\002\000\010\035\u0109\043\u010a\107\uffc3\001" +
    "\002\000\004\107\u010b\001\002\000\006\012\uffc1\107\uffc1" +
    "\001\002\000\006\012\uffc2\107\uffc2\001\002\000\010\013" +
    "\124\035\123\043\122\001\002\000\004\012\u010d\001\002" +
    "\000\010\013\124\035\123\043\122\001\002\000\006\003" +
    "\uffc8\006\uffc8\001\002\000\010\035\u0109\043\u010a\107\uffc3" +
    "\001\002\000\004\107\u0111\001\002\000\010\013\124\035" +
    "\123\043\122\001\002\000\010\012\uffc3\035\u0109\043\u010a" +
    "\001\002\000\004\012\u0114\001\002\000\010\013\124\035" +
    "\123\043\122\001\002\000\016\003\uffcc\006\uffcc\043\376" +
    "\070\374\071\372\077\375\001\002\000\006\003\uffca\006" +
    "\uffca\001\002\000\004\107\u0118\001\002\000\004\035\216" +
    "\001\002\000\004\100\u011a\001\002\000\004\035\u011b\001" +
    "\002\000\006\003\uffa6\006\uffa6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\020\002\011\004\015\005\026\006\006\022" +
    "\007\041\021\053\004\001\001\000\004\043\u0116\001\001" +
    "\000\002\001\001\000\010\030\120\031\366\034\125\001" +
    "\001\000\004\003\365\001\001\000\004\003\364\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\306\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\225" +
    "\006\006\022\007\041\021\053\004\001\001\000\002\001" +
    "\001\000\016\004\224\005\026\006\006\022\007\041\021" +
    "\053\004\001\001\000\004\043\210\001\001\000\004\003" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\120\031\124\034\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\046\050\047\053\052\046\001\001\000\010\046\116\047" +
    "\053\052\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\046\115\047\053\052\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\055\001" +
    "\001\000\002\001\001\000\012\046\060\047\053\051\056" +
    "\052\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\046\111\047\053" +
    "\052\046\001\001\000\010\046\110\047\053\052\046\001" +
    "\001\000\010\046\107\047\053\052\046\001\001\000\010" +
    "\046\106\047\053\052\046\001\001\000\010\046\105\047" +
    "\053\052\046\001\001\000\010\046\104\047\053\052\046" +
    "\001\001\000\010\046\103\047\053\052\046\001\001\000" +
    "\010\046\102\047\053\052\046\001\001\000\010\046\101" +
    "\047\053\052\046\001\001\000\002\001\001\000\010\046" +
    "\100\047\053\052\046\001\001\000\010\046\077\047\053" +
    "\052\046\001\001\000\010\046\076\047\053\052\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\166\001\001\000\004\033\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\134\046\136\047\053\052\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\143\046\136\047\053\052\046" +
    "\001\001\000\010\025\147\026\144\027\146\001\001\000" +
    "\002\001\001\000\010\030\120\031\155\034\125\001\001" +
    "\000\004\025\154\001\001\000\002\001\001\000\010\030" +
    "\120\031\151\034\125\001\001\000\002\001\001\000\012" +
    "\024\153\046\136\047\053\052\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\157" +
    "\046\136\047\053\052\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\162\046\136\047\053\052\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\170" +
    "\001\001\000\002\001\001\000\010\030\120\031\172\034" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\176\046\136\047\053\052\046\001" +
    "\001\000\010\025\147\026\177\027\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\225\006" +
    "\006\022\007\041\021\053\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\232\001\001\000\004\016\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\244" +
    "\037\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\264\001\001\000\004\015\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\120\031" +
    "\266\034\125\001\001\000\002\001\001\000\014\020\271" +
    "\021\270\046\273\047\053\052\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\305\046\273\047\053\052\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\023\300\024\301" +
    "\046\136\047\053\052\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\304\046\136\047\053\052\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\320\012\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\321\001\001\000\002\001\001\000" +
    "\006\011\323\013\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\333\001\001\000\002\001\001\000\004\007" +
    "\336\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\363" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\120\031\370\034\125" +
    "\001\001\000\004\032\372\001\001\000\010\030\120\031" +
    "\u010e\034\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\025\147\027\377\030\120\031\u0101\034\125\040" +
    "\u0100\001\001\000\004\032\376\001\001\000\002\001\001" +
    "\000\004\025\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\u0103\046\136\047\053\052\046\001\001" +
    "\000\010\025\147\026\u0104\027\146\001\001\000\002\001" +
    "\001\000\010\030\120\031\u0106\034\125\001\001\000\004" +
    "\036\u0107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\120\031\u010b\034\125\001\001" +
    "\000\002\001\001\000\010\030\120\031\u010d\034\125\001" +
    "\001\000\002\001\001\000\004\036\u010f\001\001\000\002" +
    "\001\001\000\010\030\120\031\u0111\034\125\001\001\000" +
    "\004\036\u0112\001\001\000\002\001\001\000\010\030\120" +
    "\031\u0114\034\125\001\001\000\004\032\u0115\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\u0118\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserSQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserSQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserSQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private LexemaSQL lexema;
private AnalyzerSemantico analyzerSemantico = new AnalyzerSemantico(); 

	  public ParserSQL(LexemaSQL Lexema) {
        super(Lexema);
        this.lexema = Lexema;
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        ///codigo para el objeto
        ErrorTypeInTheInterpreter type = ErrorTypeInTheInterpreter.SYNTACTIC;
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        Token token =  new Token(line, columna, lexema);
        this.listError.add(new ReportErrorInterpreter(type, token, (new InterpretSyntaticError(this.stack)).descriptionParser(this)));
        System.out.println(this.listError.get(0).toString());
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    public AnalyzerSemantico getAnalyzerSemantico(){
        return this.analyzerSemantico;
    }

    private Token getToken(Symbol cur_token){
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        String lexema = (this.cur_token.value!=null)? this.cur_token.value.toString() : "Token no existe";
        return new Token(line, columna, lexema);
    }

    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserSQL$actions {
  private final ParserSQL parser;

  /** Constructor */
  CUP$ParserSQL$actions(ParserSQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action_part00000000(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserSQL$result;

      /* select the action based on the action number */
      switch (CUP$ParserSQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		RESULT = start_val;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserSQL$parser.done_parsing();
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= varias_etiquetas_usar 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error varias_etiquetas_usar 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // varias_etiquetas_usar ::= varias_etiquetas_usar etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("varias_etiquetas_usar",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varias_etiquetas_usar ::= etiqueta_inicial 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("varias_etiquetas_usar",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // etiqueta_inicial ::= use_ddl finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // etiqueta_inicial ::= use_dml finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // etiqueta_inicial ::= use_dcl finalizacion_punto_y_coma 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // etiqueta_inicial ::= start_pl_sql 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("etiqueta_inicial",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // finalizacion_punto_y_coma ::= PERIOD_AND_AS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("finalizacion_punto_y_coma",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // finalizacion_punto_y_coma ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("finalizacion_punto_y_coma",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // use_ddl ::= CREATE optimization_create 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // use_ddl ::= USE SCHEMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // use_ddl ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P accion_update 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // use_ddl ::= ALTER TABLE IDENTIFICADOR accion_alter space_use_alter IDENTIFICADOR type_optional_alter 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // use_ddl ::= DROP TABLE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_ddl",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optimization_create ::= TABLE IDENTIFICADOR OPEN_P various_attributes CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optimization_create ::= SCHEMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // optimization_create ::= USER IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_create",32, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // various_attributes ::= various_attributes COMMA atributos_tabla 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("various_attributes",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // various_attributes ::= atributos_tabla 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("various_attributes",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atributos_tabla ::= IDENTIFICADOR type_attribute type_privacy 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributos_tabla",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // atributos_tabla ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributos_tabla",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-9)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // accion_update ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // accion_update ::= ON UPDATE accion_fk 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // accion_update ::= ON DELETE accion_fk 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_update",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // accion_fk ::= SET 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_fk",11, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_privacy ::= PRIMARY KEY attribute_null 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_privacy ::= attribute_null 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_privacy ::= NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_privacy ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_privacy",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // attribute_null ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // attribute_null ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // attribute_null ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_null",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_attribute ::= INTEGER 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_attribute ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_attribute ::= INT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_attribute ::= VARCHAR OPEN_P operaciones CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_attribute ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_attribute ::= DATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_attribute",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_optional_alter ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",29, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_optional_alter ::= type_attribute 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",29, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_optional_alter ::= FOREIGN KEY OPEN_P IDENTIFICADOR CLOSE_P REFERENCES IDENTIFICADOR OPEN_P IDENTIFICADOR CLOSE_P accion_update 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("type_optional_alter",29, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // accion_alter ::= ADD 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // accion_alter ::= DROP 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // accion_alter ::= MODIFY 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("accion_alter",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // space_use_alter ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("space_use_alter",12, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // space_use_alter ::= COLUMN 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("space_use_alter",12, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // use_dml ::= INSERT INTO select_parameters OPEN_P several_parameters CLOSE_P VALUES OPEN_P insert_parameters CLOSE_P 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-9)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // use_dml ::= UPDATE select_parameters SET loop_set WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-8)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // use_dml ::= DELETE FROM select_parameters WHERE IDENTIFICADOR EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-7)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // use_dml ::= SELECT select_parameters FROM select_parameters continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dml",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // continuation_select ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // continuation_select ::= WHERE optimization_where 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // continuation_select ::= JOIN select_parameters possibility_alias ON select_parameters possibility_alias EQUAL select_parameters continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-8)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // continuation_select ::= ALIAS continuation_select 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // continuation_select ::= LEFT JOIN select_parameters possibility_alias ON select_parameters EQUAL select_parameters 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_select",24, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-7)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // optimization_where ::= logical_connector_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_where",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // optimization_where ::= select_parameters EQUAL insert_value continuation_UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_where",30, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // loop_set ::= loop_set COMMA IDENTIFICADOR EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("loop_set",27, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // loop_set ::= IDENTIFICADOR EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("loop_set",27, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // possibility_alias ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("possibility_alias",28, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // possibility_alias ::= ALIAS 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("possibility_alias",28, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // possibility_alias ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("possibility_alias",28, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // select_parameters ::= identificador_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("select_parameters",23, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // identificador_loop ::= identificador_loop COMMA optimization_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_loop",22, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // identificador_loop ::= optimization_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_loop",22, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // optimization_loop ::= IDENTIFICADOR attribute_possibility 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // optimization_loop ::= ALIAS attribute_possibility 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // optimization_loop ::= ASTERISK 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("optimization_loop",26, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // attribute_possibility ::= POINT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_possibility",25, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // attribute_possibility ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_possibility",25, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // continuation_UPDATE ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_UPDATE",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // continuation_UPDATE ::= logical_connector_loop 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("continuation_UPDATE",20, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logical_connector ::= AND select_parameters EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector",19, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // logical_connector ::= OR select_parameters EQUAL insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector",19, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logical_connector_loop ::= logical_connector_loop logical_connector 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector_loop",21, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // logical_connector_loop ::= logical_connector 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("logical_connector_loop",21, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // insert_parameters ::= insert_parameters COMMA insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_parameters",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // insert_parameters ::= insert_value 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_parameters",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // insert_value ::= operaciones 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // insert_value ::= NULL 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // insert_value ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // insert_value ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insert_value",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // several_parameters ::= several_parameters COMMA attribute_insert 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("several_parameters",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // several_parameters ::= attribute_insert 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("several_parameters",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // attribute_insert ::= operaciones 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // attribute_insert ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // attribute_insert ::= error 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("attribute_insert",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // use_dcl ::= GRANT option_grant ON identificador_or_point TO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dcl",31, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // use_dcl ::= REVOKE option_grant ON identificador_or_point FROM IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("use_dcl",31, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // identificador_or_point ::= IDENTIFICADOR POINT atributo_or_all 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_or_point",35, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // identificador_or_point ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("identificador_or_point",35, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // option_grant ::= INSERT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // option_grant ::= SELECT 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // option_grant ::= UPDATE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // option_grant ::= DELETE 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // option_grant ::= REFERENCES 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("option_grant",33, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // atributo_or_all ::= ASTERISK 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributo_or_all",34, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // atributo_or_all ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("atributo_or_all",34, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operaciones ::= operaciones SAME_AS_O operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
            RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.SAME_AS,getToken(this.parser.cur_token));
          } else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operaciones ::= operaciones NOT_THE_SAME operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.NOT_THE_SAME,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operaciones ::= operaciones LESS_THAN operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.LESS_THAN,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operaciones ::= operaciones LESS_THAN_EQUAL operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.LESS_THAN_EQUAL,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operaciones ::= operaciones GREATER_THAN operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.GREATER_THAN,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operaciones ::= operaciones GREATER_THAN_EQUAL operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.GREATER_THAN_EQUAL,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operaciones ::= operaciones OR_O operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.OR,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operaciones ::= operaciones AND_O operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.AND,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operaciones ::= NOT_O operaciones 
            {
              Object RESULT =null;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (rightString != null) {
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(null, rightDataValue,ListTypeOperations.NOT,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operaciones ::= operaciones ADDITION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.ADDITION,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operaciones ::= operaciones SUBTRACTION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.SUBTRACTION,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operaciones ::= operaciones DIVISION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.DIVISION,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }
          
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operaciones ::= operaciones MULTIPLICATION operaciones 
            {
              Object RESULT =null;
		int leftStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int leftStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		Object leftString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int rightStringleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int rightStringright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object rightString = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
 if (leftString != null && rightString != null) {
            DataValue leftDataValue = (DataValue) leftString;
            DataValue rightDataValue = (DataValue) rightString;
RESULT = analyzerSemantico.operationsDatas(leftDataValue, rightDataValue,ListTypeOperations.MULTIPLICATION,getToken(this.parser.cur_token));
} else {
            RESULT = null;
          }

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operaciones ::= PARENTHESIS_OPEN operaciones PARENTHESIS_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		RESULT = a;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operaciones ::= TRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = new DataValue(a.toString(),ListTypeData.BOOLEAN);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operaciones ::= FALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = new DataValue(a.toString(),ListTypeData.BOOLEAN);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operaciones ::= DECIMAL_V 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = new DataValue(a.toString(),ListTypeData.DECIMAL);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operaciones ::= WHOLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = new DataValue(a.toString(),ListTypeData.INTEGER);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operaciones ::= SUBTRACTION DECIMAL_V 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = new DataValue("-"+a.toString(),ListTypeData.DECIMAL);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operaciones ::= SUBTRACTION WHOLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = new DataValue("-"+a.toString(),ListTypeData.INTEGER);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operaciones ::= CHARS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = new DataValue(a.toString(),ListTypeData.CHAR);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operaciones ::= parentesis 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = a;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operaciones ::= funciones_defecto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = a;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operaciones",36, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parentesis ::= IDENTIFICADOR fucion_id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		int funcion_idleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int funcion_idright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object funcion_id = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = analyzerSemantico.retrieveDataVariableOrFunction(id.toString(),getToken(this.parser.cur_token));
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("parentesis",37, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // fucion_id ::= OPEN_P vacio_interno 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = a;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("fucion_id",38, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // fucion_id ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("fucion_id",38, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // vacio_interno ::= operaciones OPEN_P 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		RESULT = a;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("vacio_interno",39, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // vacio_interno ::= CLOSE_P 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("vacio_interno",39, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // start_pl_sql ::= DECLARE IDENTIFICADOR type_attribute 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("start_pl_sql",41, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserSQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
              return CUP$ParserSQL$do_action_part00000000(
                               CUP$ParserSQL$act_num,
                               CUP$ParserSQL$parser,
                               CUP$ParserSQL$stack,
                               CUP$ParserSQL$top);
    }
}

}
